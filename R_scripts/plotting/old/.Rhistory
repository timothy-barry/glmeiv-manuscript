fixed_params = fixed_params,
methods = c("glmeiv_fast", "glmeiv_slow", "thresholding"))
check <- simulatr::check_simulatr_specifier_object(simulatr_spec = sim_spec_1,
B_in = 2, parallel = TRUE)
B_in = 2; parallel = TRUE
parallel
return_data
B_in
simulatr_spec
# decide which lapply function to use
if (parallel) {
future::plan(future::multisession())
my_lapply <- function(X, FUN) future.apply::future_lapply(X, FUN, future.seed = NULL)
} else {
my_lapply <- lapply
}
# set basic quantities
n_param_settings <- nrow(simulatr_spec@parameter_grid)
# update B in the fixed parameter list
if (!is.null(B_in)) {
simulatr_spec@fixed_parameters[["B"]] <- B_in
if ("B" %in% colnames(simulatr_spec@parameter_grid)) simulatr_spec@parameter_grid$B <- NULL
}
# set up for data generation across parameter settings; load data generation packages (if necessary)
data_generator <- simulatr_spec@generate_data_function
packs_to_load <- data_generator@packages
if (!(identical(packs_to_load, NA_character_))) invisible(lapply(packs_to_load, function(pack) library(pack, character.only = TRUE)))
# extract the seed
seed <- simulatr_spec@fixed_parameters$seed
cat("Generating data...\n")
# Generate the synthetic data
data_generation_out <- my_lapply(X = seq(1, n_param_settings), FUN = function(row_idx) {
# obtain arguments
ordered_args <- lapply(data_generator@arg_names, function(curr_arg) {
get_param_from_simulatr_spec(simulatr_spec, row_idx, curr_arg)
})
# obtain B; if B_in has been passed, use that instead
B <- get_param_from_simulatr_spec(simulatr_spec, row_idx, "B")
# generate the data, while clocking the time and looking for errors
tryCatch({
invisible(gc(reset = TRUE)) # garbage collect prior to generating data
time <- suppressMessages(system.time(
if (data_generator@loop) {
data_list <- lapply(
1:B,
function(b) {
R.utils::withSeed(do.call(data_generator@f, ordered_args),
seed = seed + b)
}
)
} else {
data_list <- R.utils::withSeed(do.call(data_generator@f, ordered_args), seed = seed)
})[["elapsed"]]/B)
bytes <- get_memory_used()/B
return(list(error = FALSE, warning = FALSE, time = time,
bytes = bytes, data_list = data_list))
# handle errors and warnings
}, error = function(e) {
return(list(error = TRUE, warning = FALSE, ordered_args = ordered_args, msg = e))
}, warning = function(w) {
return(list(error = FALSE, warning = TRUE, ordered_args = ordered_args, msg = w))
})
})
query_funct <- check_funct_helper(data_generation_out, "data generator")
load_all("~/research_code/simulatr")
query_funct <- check_funct_helper(data_generation_out, "data generator")
if (query_funct$stop_funct) return(query_funct$ret_val)
# no errors; get the times and data_lists
data_generation_times <- sapply(data_generation_out, function(i) i$time)
data_generation_bytes <- sapply(data_generation_out, function(i) i$bytes)
data_lists <- lapply(data_generation_out, function(i) i$data_list)
# Next, apply each method to each simulated dataset
method_names <- names(simulatr_spec@run_method_functions)
n_methods <- length(method_names)
result_lists <- method_times <- method_bytes <- vector(mode = "list", length = n_methods)
names(result_lists) <- names(method_times) <- names(method_bytes) <- method_names
for (method_name in method_names) {
cat(paste0("Running method \'", method_name, "\'...\n"))
method_object <- simulatr_spec@run_method_functions[[method_name]]
packs_to_load <- method_object@packages
if (!(identical(packs_to_load, NA_character_))) invisible(lapply(packs_to_load, function(pack)
library(pack, character.only = TRUE)))
# run the method across all parameter settings
method_out <- my_lapply(seq(1, n_param_settings), function(row_idx) {
tryCatch({
# obtain arguments
if (identical(method_object@arg_names, NA_character_)) {
ordered_args <- list(NA)
} else {
ordered_args <- c(list(NA), lapply(method_object@arg_names, function(curr_arg) {
get_param_from_simulatr_spec(simulatr_spec, row_idx, curr_arg)}))
}
# get the current data list
data_list <- data_lists[[row_idx]]
# get B
B <- length(data_list)
# run method, while clocking time and looking for errors
invisible(gc(reset = TRUE)) # garbage collect prior to generating data
time <- suppressMessages(system.time(if (method_object@loop) {
result_list <- vector(mode = "list", length = length(data_list))
for (i in seq(1, length(data_list))) {
ordered_args[[1]] <- data_list[[i]]
out <- dplyr::tibble(
output = list(R.utils::withSeed(do.call(method_object@f, ordered_args),
seed = seed)),
run_id = i
)
result_list[[i]] <- out
}
result_df <- do.call(rbind, result_list)
} else {
ordered_args[[1]] <- data_list
result_df <- do.call(method_object@f, ordered_args)
})[["elapsed"]]/B)
bytes <- get_memory_used()/B
result_df$grid_id <- row_idx
return(list(error = FALSE, warning = FALSE, time = time, bytes = bytes, result_df = result_df))
}, error = function(e) {
return(list(error = TRUE, warning = FALSE, ordered_args = ordered_args, msg = e))
}, warning = function(w) {
return(list(error = FALSE, warning = TRUE, ordered_args = ordered_args, msg = w))
})
})
query_funct <- check_funct_helper(method_out, method_name)
if (query_funct$stop_funct) return(query_funct$ret_val)
# no errors; get the times and result_dfs
method_times[[method_name]] <- sapply(method_out, function(i) i$time)
method_bytes[[method_name]] <- sapply(method_out, function(i) i$bytes)
result_lists[[method_name]] <- do.call(what = rbind, args = lapply(method_out, function(i) i$result_df)) %>%
dplyr::mutate(method = method_name)
}
n_warnings <- c(data_generation_times, unlist(method_times)) %>% is.na() %>% sum()
if (n_warnings == 0) {
cat("\nSUMMARY: The simulatr specifier object is specified correctly!\n")
} else {
cat(paste0("\nSUMMARY: There are ", n_warnings, " warnings (see above). Otherwise, simulatr specifier object is specified correctly.\n"))
}
results <- do.call(what = rbind, args = result_lists)
results
# join the results with the parameter grid
results_joined <- results |>
dplyr::left_join(simulatr_spec@parameter_grid |>
dplyr::mutate(grid_id = dplyr::row_number()) |>
dplyr::select(grid_id, ground_truth),
by = "grid_id")
# join the results with the parameter grid
results_joined <- results |>
dplyr::left_join(simulatr_spec@parameter_grid |>
dplyr::mutate(grid_id = dplyr::row_number()) |>
dplyr::select(grid_id, ground_truth),
by = "grid_id")
param_grid$ground_truth <- m_perturbation
m_perturbation <- log(0.25)
####################################################################
# Experiment 1
# Vary g_pert, fix all other parameters
# Vary distribution (Poisson, NB (known theta), NB (estimated theta)
# One covariate: batch (bernoulli variable)
####################################################################
set.seed(4)
theta <- 20
n <- 15000 # n <- 150000
g_perturbation_grid <- log(seq(1, 4, 0.5))
param_grid <- expand.grid(g_perturbation = g_perturbation_grid,
fam_str = c("nb_theta_unknown", "nb_theta_known"))
param_grid$grid_id <- seq(1, nrow(param_grid))
param_grid$ground_truth <- m_perturbation
fam_obj <- lapply(as.character(param_grid$fam_str), function(str) {
switch(EXPR = str,
"nb_theta_unknown" = MASS::negative.binomial(theta),
"nb_theta_known" = MASS::negative.binomial(theta)) %>% glmeiv::augment_family_object()
})
param_grid$m_fam <- param_grid$g_fam <- fam_obj
param_grid$run_unknown_theta_precomputation <- as.character(param_grid$fam_str) == "nb_theta_unknown"
fixed_params <- list(
seed = 4,
n = n,
B = 500,
m_intercept = log(0.01),
m_perturbation = log(0.25),
g_intercept = log(0.005),
covariate_matrix = data.frame(batch = rbinom(n = n, size = 1, prob = 0.5)),
m_covariate_coefs = log(0.9),
g_covariate_coefs = log(1.1),
alpha = 0.95,
n_em_rep = 15,
save_membership_probs_mult = 1000L,
pi = 0.02,
m_offset = log(rpois(n = n, lambda = 10000)),
g_offset = log(rpois(n = n, lambda = 5000)),
pi_guess_range = c(1e-5, 0.03),
m_perturbation_guess_range = log(c(0.1, 1.5)),
g_perturbation_guess_range = log(c(0.5, 10)),
m_intercept_guess_range = log(c(1e-4, 1e-1)),
g_intercept_guess_range = log(c(1e-4, 1e-1)),
m_covariate_coefs_guess_range = log(c(0.25, 2)),
g_covariate_coefs_guess_range = log(c(0.25, 2)),
exponentiate_coefs = FALSE,
ep_tol = 1e-4)
n
n <- 1500
set.seed(4)
theta <- 20
n <- 150000
g_perturbation_grid <- log(seq(1, 4, 0.5))
param_grid <- expand.grid(g_perturbation = g_perturbation_grid,
fam_str = c("nb_theta_unknown", "nb_theta_known"))
param_grid$grid_id <- seq(1, nrow(param_grid))
param_grid$ground_truth <- m_perturbation
fam_obj <- lapply(as.character(param_grid$fam_str), function(str) {
switch(EXPR = str,
"nb_theta_unknown" = MASS::negative.binomial(theta),
"nb_theta_known" = MASS::negative.binomial(theta)) %>% glmeiv::augment_family_object()
})
param_grid$m_fam <- param_grid$g_fam <- fam_obj
param_grid$run_unknown_theta_precomputation <- as.character(param_grid$fam_str) == "nb_theta_unknown"
fixed_params <- list(
seed = 4,
n = 2000,
B = 500,
m_intercept = log(0.01),
m_perturbation = log(0.25),
g_intercept = log(0.005),
covariate_matrix = data.frame(batch = rbinom(n = n, size = 1, prob = 0.5)),
m_covariate_coefs = log(0.9),
g_covariate_coefs = log(1.1),
alpha = 0.95,
n_em_rep = 15,
save_membership_probs_mult = 1000L,
pi = 0.1,
m_offset = log(rpois(n = n, lambda = 10000)),
g_offset = log(rpois(n = n, lambda = 5000)),
pi_guess_range = c(1e-5, 0.03),
m_perturbation_guess_range = log(c(0.1, 1.5)),
g_perturbation_guess_range = log(c(0.5, 10)),
m_intercept_guess_range = log(c(1e-4, 1e-1)),
g_intercept_guess_range = log(c(1e-4, 1e-1)),
m_covariate_coefs_guess_range = log(c(0.25, 2)),
g_covariate_coefs_guess_range = log(c(0.25, 2)),
exponentiate_coefs = FALSE,
ep_tol = 1e-4)
sim_spec_1 <- create_simulatr_specifier_object(param_grid = param_grid,
fixed_params = fixed_params,
methods = c("glmeiv_fast", "glmeiv_slow", "thresholding"))
param_grid
param_grid$ground_truth
check <- simulatr::check_simulatr_specifier_object(simulatr_spec = sim_spec_1,
B_in = 2, parallel = TRUE)
####################################################################
# Experiment 1
# Vary g_pert, fix all other parameters
# Vary distribution (Poisson, NB (known theta), NB (estimated theta)
# One covariate: batch (bernoulli variable)
####################################################################
set.seed(4)
theta <- 20
n <- 2000
g_perturbation_grid <- log(seq(1, 4, 0.5))
param_grid <- expand.grid(g_perturbation = g_perturbation_grid,
fam_str = c("nb_theta_unknown", "nb_theta_known"))
param_grid$grid_id <- seq(1, nrow(param_grid))
param_grid$ground_truth <- m_perturbation
fam_obj <- lapply(as.character(param_grid$fam_str), function(str) {
switch(EXPR = str,
"nb_theta_unknown" = MASS::negative.binomial(theta),
"nb_theta_known" = MASS::negative.binomial(theta)) %>% glmeiv::augment_family_object()
})
param_grid$m_fam <- param_grid$g_fam <- fam_obj
param_grid$run_unknown_theta_precomputation <- as.character(param_grid$fam_str) == "nb_theta_unknown"
fixed_params <- list(
seed = 4,
n = n,
B = 500,
m_intercept = log(0.01),
m_perturbation = log(0.25),
g_intercept = log(0.005),
covariate_matrix = data.frame(batch = rbinom(n = n, size = 1, prob = 0.5)),
m_covariate_coefs = log(0.9),
g_covariate_coefs = log(1.1),
alpha = 0.95,
n_em_rep = 15,
save_membership_probs_mult = 1000L,
pi = 0.1,
m_offset = log(rpois(n = n, lambda = 10000)),
g_offset = log(rpois(n = n, lambda = 5000)),
pi_guess_range = c(1e-5, 0.03),
m_perturbation_guess_range = log(c(0.1, 1.5)),
g_perturbation_guess_range = log(c(0.5, 10)),
m_intercept_guess_range = log(c(1e-4, 1e-1)),
g_intercept_guess_range = log(c(1e-4, 1e-1)),
m_covariate_coefs_guess_range = log(c(0.25, 2)),
g_covariate_coefs_guess_range = log(c(0.25, 2)),
exponentiate_coefs = FALSE,
ep_tol = 1e-4)
sim_spec_1 <- create_simulatr_specifier_object(param_grid = param_grid,
fixed_params = fixed_params,
methods = c("glmeiv_fast", "glmeiv_slow", "thresholding"))
check <- simulatr::check_simulatr_specifier_object(simulatr_spec = sim_spec_1,
B_in = 2, parallel = TRUE)
check$metrics
####################################################################
# Experiment 1
# Vary g_pert, fix all other parameters
# Vary distribution (Poisson, NB (known theta), NB (estimated theta)
# One covariate: batch (bernoulli variable)
####################################################################
set.seed(4)
theta <- 20
n <- 150000
g_perturbation_grid <- log(seq(1, 4, 0.5))
param_grid <- expand.grid(g_perturbation = g_perturbation_grid,
fam_str = c("nb_theta_unknown", "nb_theta_known", "poisson"))
param_grid
####################################################################
# Experiment 1
# Vary g_pert, fix all other parameters
# Vary distribution (Poisson, NB (known theta), NB (estimated theta)
# One covariate: batch (bernoulli variable)
####################################################################
set.seed(4)
theta <- 20
n <- 150000
####################################################################
# Experiment 1
# Vary g_pert, fix all other parameters
# Vary distribution (Poisson, NB (known theta), NB (estimated theta)
# One covariate: batch (bernoulli variable)
####################################################################
set.seed(4)
theta <- 20
n <- 5000 # n <- 150000
g_perturbation_grid <- log(seq(1, 4, 0.5))
param_grid <- expand.grid(g_perturbation = g_perturbation_grid,
fam_str = c("nb_theta_unknown", "nb_theta_known", "poisson"))
param_grid$grid_id <- seq(1, nrow(param_grid))
param_grid$ground_truth <- m_perturbation
fam_obj <- lapply(as.character(param_grid$fam_str), function(str) {
switch(EXPR = str,
"nb_theta_unknown" = MASS::negative.binomial(theta),
"nb_theta_known" = MASS::negative.binomial(theta) |> glmeiv::augment_family_object(),
"poisson" = poisson())
})
fam_obj
fam_obj
param_grid$m_fam <- param_grid$g_fam <- fam_obj
param_grid$run_unknown_theta_precomputation <- as.character(param_grid$fam_str) == "nb_theta_unknown"
param_grid
fixed_params <- list(
seed = 4,
n = n,
B = 500,
m_intercept = log(0.01),
m_perturbation = log(0.25),
g_intercept = log(0.005),
covariate_matrix = data.frame(batch = rbinom(n = n, size = 1, prob = 0.5)),
m_covariate_coefs = log(0.9),
g_covariate_coefs = log(1.1),
alpha = 0.95,
n_em_rep = 15,
save_membership_probs_mult = 1000L,
pi = 0.02,
m_offset = log(rpois(n = n, lambda = 10000)),
g_offset = log(rpois(n = n, lambda = 5000)),
pi_guess_range = c(1e-5, 0.03),
m_perturbation_guess_range = log(c(0.1, 1.5)),
g_perturbation_guess_range = log(c(0.5, 10)),
m_intercept_guess_range = log(c(1e-4, 1e-1)),
g_intercept_guess_range = log(c(1e-4, 1e-1)),
m_covariate_coefs_guess_range = log(c(0.25, 2)),
g_covariate_coefs_guess_range = log(c(0.25, 2)),
exponentiate_coefs = FALSE,
ep_tol = 1e-4)
sim_spec_1 <- create_simulatr_specifier_object(param_grid = param_grid,
fixed_params = fixed_params,
methods = c("glmeiv_fast", "glmeiv_slow", "thresholding"))
set.seed(4)
theta <- 20
n <- 10000 # n <- 150000
g_perturbation_grid <- log(seq(1, 4, 0.5))
param_grid <- expand.grid(g_perturbation = g_perturbation_grid,
fam_str = c("nb_theta_unknown", "nb_theta_known", "poisson"))
param_grid$grid_id <- seq(1, nrow(param_grid))
param_grid$ground_truth <- m_perturbation
fam_obj <- lapply(as.character(param_grid$fam_str), function(str) {
switch(EXPR = str,
"nb_theta_unknown" = MASS::negative.binomial(theta),
"nb_theta_known" = MASS::negative.binomial(theta) |> glmeiv::augment_family_object(),
"poisson" = poisson())
})
param_grid$m_fam <- param_grid$g_fam <- fam_obj
param_grid$run_unknown_theta_precomputation <- as.character(param_grid$fam_str) == "nb_theta_unknown"
fixed_params <- list(
seed = 4,
n = n,
B = 500,
m_intercept = log(0.01),
m_perturbation = log(0.25),
g_intercept = log(0.005),
covariate_matrix = data.frame(batch = rbinom(n = n, size = 1, prob = 0.5)),
m_covariate_coefs = log(0.9),
g_covariate_coefs = log(1.1),
alpha = 0.95,
n_em_rep = 15,
save_membership_probs_mult = 1000L,
pi = 0.02,
m_offset = log(rpois(n = n, lambda = 10000)),
g_offset = log(rpois(n = n, lambda = 5000)),
pi_guess_range = c(1e-5, 0.03),
m_perturbation_guess_range = log(c(0.1, 1.5)),
g_perturbation_guess_range = log(c(0.5, 10)),
m_intercept_guess_range = log(c(1e-4, 1e-1)),
g_intercept_guess_range = log(c(1e-4, 1e-1)),
m_covariate_coefs_guess_range = log(c(0.25, 2)),
g_covariate_coefs_guess_range = log(c(0.25, 2)),
exponentiate_coefs = FALSE,
ep_tol = 1e-4)
sim_spec_1 <- create_simulatr_specifier_object(param_grid = param_grid,
fixed_params = fixed_params,
methods = c("glmeiv_fast", "glmeiv_slow", "thresholding"))
n
set.seed(4)
theta <- 20
n <- 1000 # n <- 150000
g_perturbation_grid <- log(seq(1, 4, 0.5))
param_grid <- expand.grid(g_perturbation = g_perturbation_grid,
fam_str = c("nb_theta_unknown", "nb_theta_known", "poisson"))
param_grid$grid_id <- seq(1, nrow(param_grid))
param_grid$ground_truth <- m_perturbation
fam_obj <- lapply(as.character(param_grid$fam_str), function(str) {
switch(EXPR = str,
"nb_theta_unknown" = MASS::negative.binomial(theta),
"nb_theta_known" = MASS::negative.binomial(theta) |> glmeiv::augment_family_object(),
"poisson" = poisson())
})
param_grid$m_fam <- param_grid$g_fam <- fam_obj
param_grid$run_unknown_theta_precomputation <- as.character(param_grid$fam_str) == "nb_theta_unknown"
fixed_params <- list(
seed = 4,
n = n,
B = 500,
m_intercept = log(0.01),
m_perturbation = log(0.25),
g_intercept = log(0.005),
covariate_matrix = data.frame(batch = rbinom(n = n, size = 1, prob = 0.5)),
m_covariate_coefs = log(0.9),
g_covariate_coefs = log(1.1),
alpha = 0.95,
n_em_rep = 15,
save_membership_probs_mult = 1000L,
pi = 0.02,
m_offset = log(rpois(n = n, lambda = 10000)),
g_offset = log(rpois(n = n, lambda = 5000)),
pi_guess_range = c(1e-5, 0.03),
m_perturbation_guess_range = log(c(0.1, 1.5)),
g_perturbation_guess_range = log(c(0.5, 10)),
m_intercept_guess_range = log(c(1e-4, 1e-1)),
g_intercept_guess_range = log(c(1e-4, 1e-1)),
m_covariate_coefs_guess_range = log(c(0.25, 2)),
g_covariate_coefs_guess_range = log(c(0.25, 2)),
exponentiate_coefs = FALSE,
ep_tol = 1e-4)
sim_spec_1 <- create_simulatr_specifier_object(param_grid = param_grid,
fixed_params = fixed_params,
methods = c("glmeiv_fast", "glmeiv_slow", "thresholding"))
check <- simulatr::check_simulatr_specifier_object(simulatr_spec = sim_spec_1,
B_in = 2, parallel = TRUE)
set.seed(4)
theta <- 20
n <- 10000 # n <- 150000
g_perturbation_grid <- log(seq(1, 4, 0.5))
param_grid <- expand.grid(g_perturbation = g_perturbation_grid,
fam_str = c("nb_theta_unknown", "nb_theta_known", "poisson"))
param_grid$grid_id <- seq(1, nrow(param_grid))
param_grid$ground_truth <- m_perturbation
fam_obj <- lapply(as.character(param_grid$fam_str), function(str) {
switch(EXPR = str,
"nb_theta_unknown" = MASS::negative.binomial(theta),
"nb_theta_known" = MASS::negative.binomial(theta) |> glmeiv::augment_family_object(),
"poisson" = poisson())
})
param_grid$m_fam <- param_grid$g_fam <- fam_obj
param_grid$run_unknown_theta_precomputation <- as.character(param_grid$fam_str) == "nb_theta_unknown"
fixed_params <- list(
seed = 4,
n = n,
B = 500,
m_intercept = log(0.01),
m_perturbation = log(0.25),
g_intercept = log(0.005),
covariate_matrix = data.frame(batch = rbinom(n = n, size = 1, prob = 0.5)),
m_covariate_coefs = log(0.9),
g_covariate_coefs = log(1.1),
alpha = 0.95,
n_em_rep = 15,
save_membership_probs_mult = 1000L,
pi = 0.02,
m_offset = log(rpois(n = n, lambda = 10000)),
g_offset = log(rpois(n = n, lambda = 5000)),
pi_guess_range = c(1e-5, 0.03),
m_perturbation_guess_range = log(c(0.1, 1.5)),
g_perturbation_guess_range = log(c(0.5, 10)),
m_intercept_guess_range = log(c(1e-4, 1e-1)),
g_intercept_guess_range = log(c(1e-4, 1e-1)),
m_covariate_coefs_guess_range = log(c(0.25, 2)),
g_covariate_coefs_guess_range = log(c(0.25, 2)),
exponentiate_coefs = FALSE,
ep_tol = 1e-4)
sim_spec_1 <- create_simulatr_specifier_object(param_grid = param_grid,
fixed_params = fixed_params,
methods = c("glmeiv_fast", "glmeiv_slow", "thresholding"))
check <- simulatr::check_simulatr_specifier_object(simulatr_spec = sim_spec_1,
B_in = 2, parallel = TRUE)
