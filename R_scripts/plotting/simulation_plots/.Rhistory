library(dplyr)
library(ggplot2)
library(simulatr)
my_cols <- c("firebrick3", "dodgerblue3", "orchid4")
# load the results and specifier objects
sim_result_dir <- paste0(.get_config_path("LOCAL_GLMEIV_DATA_DIR"), "public/simulations/results")
sim_res_3 <- readRDS(paste0(sim_result_dir, "/sim_res_3.rds"))[["metrics"]]
to_plot <- sim_res_3 |>
dplyr::mutate(distribution = ifelse(run_unknown_theta_precomputation, "NB (theta unknown)", "NB (theta known)")) |>
dplyr::filter(metric %in% c("bias", "ci_width", "coverage", "mse", "time")) |>
mutate(metric_fct = factor(metric, levels = c("bias", "mse", "coverage", "ci_width", "time"),
labels = c("Bias", "MSE", "Coverage", "CI width", "Time (s)")),
Method = factor(method, levels = c("glmeiv_slow", "glmeiv_fast", "thresholding"),
labels = c("GLM-EIV", "GLM-EIV (accelerated)", "Thresholding"))) |>
arrange(Method)
p <- ggplot(data = to_plot, mapping = aes(x = theta,
y = mean,
ymin = mean - 2 * se,
ymax = mean + 2 * se,
col = Method)) +
xlab(expression(theta)) + scale_color_manual(values = my_cols) +
scale_x_continuous(trans = "log10") +
facet_grid(metric_fct ~ distribution, scales = "free") +
geom_hline(data = dplyr::filter(to_plot, metric_fct == "Bias"),
mapping = aes(yintercept = 0), colour = "black") +
geom_hline(data = dplyr::filter(to_plot, metric_fct == "MSE"),
mapping = aes(yintercept = 0), colour = "black") +
geom_hline(data = dplyr::filter(to_plot, metric_fct == "Coverage"),
mapping = aes(yintercept = 0.95), colour = "black") +
geom_line() + geom_errorbar(width = 0.05) + geom_point() +
theme_bw() + theme(legend.position = "bottom", panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) + ylab("")
p
library(dplyr)
library(ggplot2)
library(simulatr)
my_cols <- c("firebrick3", "dodgerblue3", "orchid4")
# load the results and specifier objects
sim_result_dir <- paste0(.get_config_path("LOCAL_GLMEIV_DATA_DIR"), "public/simulations/results")
sim_res_4 <- readRDS(paste0(sim_result_dir, "/sim_res_4.rds"))[["metrics"]]
to_plot <- sim_res_4 |>
dplyr::filter(metric %in% c("bias", "ci_width", "coverage", "mse", "time")) |>
mutate(metric_fct = factor(metric, levels = c("bias", "mse", "coverage", "ci_width", "time"),
labels = c("Bias", "MSE", "Coverage", "CI width", "Time (s)")),
Method = factor(method, levels = c("glmeiv_slow", "glmeiv_fast", "thresholding"),
labels = c("GLM-EIV", "GLM-EIV (accelerated)", "Thresholding"))) |>
arrange(Method) |> mutate(exp_m_perturbation = exp(m_perturbation))
p <- ggplot(data = to_plot, mapping = aes(x = exp_m_perturbation,
y = mean,
ymin = mean - 2 * se,
ymax = mean + 2 * se,
col = Method)) +
xlab(expression(exp(beta[m]))) + scale_color_manual(values = my_cols) +
scale_x_continuous(trans = "log10") +
facet_grid(metric_fct ~ fam_str, scales = "free") +
geom_hline(data = dplyr::filter(to_plot, metric_fct == "Bias"),
mapping = aes(yintercept = 0), colour = "black") +
geom_hline(data = dplyr::filter(to_plot, metric_fct == "MSE"),
mapping = aes(yintercept = 0), colour = "black") +
geom_hline(data = dplyr::filter(to_plot, metric_fct == "Coverage"),
mapping = aes(yintercept = 0.95), colour = "black") +
geom_line() + geom_errorbar(width = 0.05) + geom_point() +
theme_bw() + theme(legend.position = "bottom", panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) + ylab("")
p
library(dplyr)
library(ggplot2)
library(simulatr)
my_cols <- c("firebrick3", "dodgerblue3", "orchid4")
# load the results and specifier objects
sim_result_dir <- paste0(.get_config_path("LOCAL_GLMEIV_DATA_DIR"), "public/simulations/results")
sim_res_4 <- readRDS(paste0(sim_result_dir, "/sim_res_4.rds"))[["metrics"]]
to_plot <- sim_res_4 |>
dplyr::filter(metric %in% c("bias", "ci_width", "coverage", "mse", "time")) |>
mutate(metric_fct = factor(metric, levels = c("bias", "mse", "coverage", "ci_width", "time"),
labels = c("Bias", "MSE", "Coverage", "CI width", "Time (s)")),
Method = factor(method, levels = c("glmeiv_slow", "glmeiv_fast", "thresholding"),
labels = c("GLM-EIV", "GLM-EIV (accelerated)", "Thresholding"))) |>
arrange(Method) |> mutate(exp_m_perturbation = exp(m_perturbation))
to_plot$exp_m_perturbation |> unique()
to_plot$exp_m_perturbation |> unique() |> diff()
p <- ggplot(data = to_plot, mapping = aes(x = exp_m_perturbation,
y = mean,
ymin = mean - 2 * se,
ymax = mean + 2 * se,
col = Method)) +
xlab(expression(exp(beta[m]))) + scale_color_manual(values = my_cols) +
scale_x_continuous(trans = "log10") +
facet_grid(metric_fct ~ fam_str, scales = "free") +
geom_hline(data = dplyr::filter(to_plot, metric_fct == "Bias"),
mapping = aes(yintercept = 0), colour = "black") +
geom_hline(data = dplyr::filter(to_plot, metric_fct == "MSE"),
mapping = aes(yintercept = 0), colour = "black") +
geom_hline(data = dplyr::filter(to_plot, metric_fct == "Coverage"),
mapping = aes(yintercept = 0.95), colour = "black") +
geom_line() + geom_errorbar(width = 0.05) + geom_point() +
theme_bw() + theme(legend.position = "bottom", panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) + ylab("")
p
p
p <- ggplot(data = to_plot, mapping = aes(x = exp_m_perturbation,
y = mean,
ymin = mean - 2 * se,
ymax = mean + 2 * se,
col = Method)) +
xlab(expression(exp(beta[m]))) + scale_color_manual(values = my_cols) +
facet_grid(metric_fct ~ fam_str, scales = "free") +
geom_hline(data = dplyr::filter(to_plot, metric_fct == "Bias"),
mapping = aes(yintercept = 0), colour = "black") +
geom_hline(data = dplyr::filter(to_plot, metric_fct == "MSE"),
mapping = aes(yintercept = 0), colour = "black") +
geom_hline(data = dplyr::filter(to_plot, metric_fct == "Coverage"),
mapping = aes(yintercept = 0.95), colour = "black") +
geom_line() + geom_errorbar(width = 0.05) + geom_point() +
theme_bw() + theme(legend.position = "bottom", panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) + ylab("")
p
sim_res_4$metric |> unique:()
sim_res_4$metric |> unique()
to_plot <- sim_res_4 |>
dplyr::filter(metric %in% c("bias", "ci_width", "coverage", "mse", "time", "rejection_indicator")) |>
mutate(metric_fct = factor(metric, levels = c("bias", "mse", "coverage", "ci_width", "time", "rejection_indicator"),
labels = c("Bias", "MSE", "Coverage", "CI width", "Time (s)", "Rejection prob")),
Method = factor(method, levels = c("glmeiv_slow", "glmeiv_fast", "thresholding"),
labels = c("GLM-EIV", "GLM-EIV (accelerated)", "Thresholding"))) |>
arrange(Method) |> mutate(exp_m_perturbation = exp(m_perturbation))
p <- ggplot(data = to_plot, mapping = aes(x = exp_m_perturbation,
y = mean,
ymin = mean - 2 * se,
ymax = mean + 2 * se,
col = Method)) +
xlab(expression(exp(beta[m]))) + scale_color_manual(values = my_cols) +
facet_grid(metric_fct ~ fam_str, scales = "free") +
geom_hline(data = dplyr::filter(to_plot, metric_fct == "Bias"),
mapping = aes(yintercept = 0), colour = "black") +
geom_hline(data = dplyr::filter(to_plot, metric_fct == "MSE"),
mapping = aes(yintercept = 0), colour = "black") +
geom_hline(data = dplyr::filter(to_plot, metric_fct == "Coverage"),
mapping = aes(yintercept = 0.95), colour = "black") +
geom_line() + geom_errorbar(width = 0.05) + geom_point() +
theme_bw() + theme(legend.position = "bottom", panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) + ylab("")
p
to_plot <- sim_res_4 |>
dplyr::filter(metric %in% c("bias", "ci_width", "coverage", "mse", "time", "rejection_indicator")) |>
mutate(metric_fct = factor(metric, levels = c("bias", "mse", "coverage", "ci_width", "time"),
labels = c("Bias", "MSE", "Coverage", "CI width", "Time (s)")),
Method = factor(method, levels = c("glmeiv_slow", "glmeiv_fast", "thresholding"),
labels = c("GLM-EIV", "GLM-EIV (accelerated)", "Thresholding"))) |>
arrange(Method) |> mutate(exp_m_perturbation = exp(m_perturbation))
p <- ggplot(data = to_plot, mapping = aes(x = exp_m_perturbation,
y = mean,
ymin = mean - 2 * se,
ymax = mean + 2 * se,
col = Method)) +
xlab(expression(exp(beta[m]))) + scale_color_manual(values = my_cols) +
facet_grid(metric_fct ~ fam_str, scales = "free") +
geom_hline(data = dplyr::filter(to_plot, metric_fct == "Bias"),
mapping = aes(yintercept = 0), colour = "black") +
geom_hline(data = dplyr::filter(to_plot, metric_fct == "MSE"),
mapping = aes(yintercept = 0), colour = "black") +
geom_hline(data = dplyr::filter(to_plot, metric_fct == "Coverage"),
mapping = aes(yintercept = 0.95), colour = "black") +
geom_line() + geom_errorbar(width = 0.05) + geom_point() +
theme_bw() + theme(legend.position = "bottom", panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) + ylab("")
p
to_plot <- sim_res_4 |>
dplyr::filter(metric %in% c("bias", "ci_width", "coverage", "mse", "time")) |>
mutate(metric_fct = factor(metric, levels = c("bias", "mse", "coverage", "ci_width", "time"),
labels = c("Bias", "MSE", "Coverage", "CI width", "Time (s)")),
Method = factor(method, levels = c("glmeiv_slow", "glmeiv_fast", "thresholding"),
labels = c("GLM-EIV", "GLM-EIV (accelerated)", "Thresholding"))) |>
arrange(Method) |> mutate(exp_m_perturbation = exp(m_perturbation))
p <- ggplot(data = to_plot, mapping = aes(x = exp_m_perturbation,
y = mean,
ymin = mean - 2 * se,
ymax = mean + 2 * se,
col = Method)) +
xlab(expression(exp(beta[m]))) + scale_color_manual(values = my_cols) +
facet_grid(metric_fct ~ fam_str, scales = "free") +
geom_hline(data = dplyr::filter(to_plot, metric_fct == "Bias"),
mapping = aes(yintercept = 0), colour = "black") +
geom_hline(data = dplyr::filter(to_plot, metric_fct == "MSE"),
mapping = aes(yintercept = 0), colour = "black") +
geom_hline(data = dplyr::filter(to_plot, metric_fct == "Coverage"),
mapping = aes(yintercept = 0.95), colour = "black") +
geom_line() + geom_errorbar(width = 0.05) + geom_point() +
theme_bw() + theme(legend.position = "bottom", panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) + ylab("")
p
log(seq(0.05, 1, length.out = 9))
#########################################################
# Experiment 4: varying m_pert while keeping g_pert fixed
# We vary the parameter m_pert over log(0, 0.2)
# We keep g_pert fixed at log(2)
##########################################################
n <- 50000
n
m_perturbations <- log(seq(0.05, 1, length.out = 9))
m_perturbations
param_grid <- expand.grid(m_perturbation = m_perturbations,
fam_str = c("nb_theta_unknown", "nb_theta_known", "poisson"))
param_grid
head(param_grid)
param_grid$grid_id <- seq(1, nrow(param_grid))
param_grid$ground_truth <- m_perturbations
fam_obj <- lapply(as.character(param_grid$fam_str), function(str) {
switch(EXPR = str,
"nb_theta_unknown" = MASS::negative.binomial(20) |> glmeiv::augment_family_object(),
"nb_theta_known" = MASS::negative.binomial(20) |> glmeiv::augment_family_object(),
"poisson" = poisson() |> glmeiv::augment_family_object())
})
param_grid$m_fam <- param_grid$g_fam <- fam_obj
param_grid$run_unknown_theta_precomputation <- as.character(param_grid$fam_str) == "nb_theta_unknown"
head(param_grid)
0.02 * 50000
library(dplyr)
library(ggplot2)
library(simulatr)
my_cols <- c("firebrick3", "dodgerblue3", "orchid4")
# load the results and specifier objects
sim_result_dir <- paste0(.get_config_path("LOCAL_GLMEIV_DATA_DIR"), "public/simulations/results")
sim_res_3 <- readRDS(paste0(sim_result_dir, "/sim_res_3.rds"))[["metrics"]]
to_plot <- sim_res_3 |>
dplyr::mutate(distribution = ifelse(run_unknown_theta_precomputation, "NB (theta unknown)", "NB (theta known)")) |>
dplyr::filter(metric %in% c("bias", "ci_width", "coverage", "mse", "time")) |>
mutate(metric_fct = factor(metric, levels = c("bias", "mse", "coverage", "ci_width", "time"),
labels = c("Bias", "MSE", "Coverage", "CI width", "Time (s)")),
Method = factor(method, levels = c("glmeiv_slow", "glmeiv_fast", "thresholding"),
labels = c("GLM-EIV", "GLM-EIV (accelerated)", "Thresholding"))) |>
arrange(Method)
p <- ggplot(data = to_plot, mapping = aes(x = theta,
y = mean,
ymin = mean - 2 * se,
ymax = mean + 2 * se,
col = Method)) +
xlab(expression(theta)) + scale_color_manual(values = my_cols) +
scale_x_continuous(trans = "log10") +
facet_grid(metric_fct ~ distribution, scales = "free") +
geom_hline(data = dplyr::filter(to_plot, metric_fct == "Bias"),
mapping = aes(yintercept = 0), colour = "black") +
geom_hline(data = dplyr::filter(to_plot, metric_fct == "MSE"),
mapping = aes(yintercept = 0), colour = "black") +
geom_hline(data = dplyr::filter(to_plot, metric_fct == "Coverage"),
mapping = aes(yintercept = 0.95), colour = "black") +
geom_line() + geom_errorbar(width = 0.05) + geom_point() +
theme_bw() + theme(legend.position = "bottom", panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) + ylab("")
p
100000 * 0.02
log(0)
library(dplyr)
library(ggplot2)
library(simulatr)
my_cols <- c("firebrick3", "dodgerblue3", "orchid4")
# load the results and specifier objects
sim_result_dir <- paste0(.get_config_path("LOCAL_GLMEIV_DATA_DIR"), "public/simulations/results")
sim_res_1 <- readRDS(paste0(sim_result_dir, "/sim_res_1.rds"))[["metrics"]]
to_plot <- sim_res_1 |>
dplyr::filter(metric %in% c("bias", "ci_width", "coverage", "mse", "time")) |>
mutate(metric_fct = factor(metric, levels = c("bias", "mse", "coverage", "ci_width", "time"),
labels = c("Bias", "MSE", "Coverage", "CI width", "Time (s)")),
Method = factor(method, levels = c("glmeiv_slow", "glmeiv_fast", "thresholding"),
labels = c("GLM-EIV", "GLM-EIV (accelerated)", "Thresholding"))) |>
arrange(Method) |> mutate(exp_g_perturbation = exp(g_perturbation))
p <- ggplot(data = to_plot, mapping = aes(x = exp_g_perturbation,
y = mean,
ymin = mean - 2 * se,
ymax = mean + 2 * se,
col = Method)) +
xlab(expression(exp(beta[g]))) + scale_color_manual(values = my_cols) +
facet_grid(metric_fct ~ fam_str, scales = "free") +
geom_hline(data = dplyr::filter(to_plot, metric_fct == "Bias"),
mapping = aes(yintercept = 0), colour = "black") +
geom_hline(data = dplyr::filter(to_plot, metric_fct == "MSE"),
mapping = aes(yintercept = 0), colour = "black") +
geom_hline(data = dplyr::filter(to_plot, metric_fct == "Coverage"),
mapping = aes(yintercept = 0.95), colour = "black") +
geom_line() + geom_errorbar(width = 0.05) + geom_point() +
theme_bw() + theme(legend.position = "bottom", panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) + ylab("")
p
library(dplyr)
library(ggplot2)
library(simulatr)
my_cols <- c("firebrick3", "dodgerblue3", "orchid4")
# load the results and specifier objects
sim_result_dir <- paste0(.get_config_path("LOCAL_GLMEIV_DATA_DIR"), "public/simulations/results")
sim_res_2 <- readRDS(paste0(sim_result_dir, "/sim_res_2.rds"))[["metrics"]]
to_plot <- sim_res_2 |>
dplyr::filter(metric %in% c("bias", "ci_width", "coverage", "mse", "time")) |>
mutate(metric_fct = factor(metric, levels = c("bias", "mse", "coverage", "ci_width", "time"),
labels = c("Bias", "MSE", "Coverage", "CI width", "Time (s)")),
Method = factor(method, levels = c("glmeiv_slow", "glmeiv_fast", "thresholding"),
labels = c("GLM-EIV", "GLM-EIV (accelerated)", "Thresholding"))) |>
arrange(Method)
p <- ggplot(data = to_plot, mapping = aes(x = g_perturbation,
y = mean,
ymin = mean - 2 * se,
ymax = mean + 2 * se,
col = Method)) +
xlab(expression(exp(beta[g]))) + scale_color_manual(values = my_cols) +
facet_grid(metric_fct ~ ., scales = "free") +
geom_hline(data = dplyr::filter(to_plot, metric_fct == "Bias"),
mapping = aes(yintercept = 0), colour = "black") +
geom_hline(data = dplyr::filter(to_plot, metric_fct == "MSE"),
mapping = aes(yintercept = 0), colour = "black") +
geom_hline(data = dplyr::filter(to_plot, metric_fct == "Coverage"),
mapping = aes(yintercept = 0.95), colour = "black") +
geom_line() + geom_errorbar(width = 0.05) + geom_point() +
theme_bw() + theme(legend.position = "bottom", panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) + ylab("")
p
library(dplyr)
library(ggplot2)
library(simulatr)
my_cols <- c("firebrick3", "dodgerblue3", "orchid4")
# load the results and specifier objects
sim_result_dir <- paste0(.get_config_path("LOCAL_GLMEIV_DATA_DIR"), "public/simulations/results")
sim_res_3 <- readRDS(paste0(sim_result_dir, "/sim_res_3.rds"))[["metrics"]]
to_plot <- sim_res_3 |>
dplyr::mutate(distribution = ifelse(run_unknown_theta_precomputation, "NB (theta unknown)", "NB (theta known)")) |>
dplyr::filter(metric %in% c("bias", "ci_width", "coverage", "mse", "time")) |>
mutate(metric_fct = factor(metric, levels = c("bias", "mse", "coverage", "ci_width", "time"),
labels = c("Bias", "MSE", "Coverage", "CI width", "Time (s)")),
Method = factor(method, levels = c("glmeiv_slow", "glmeiv_fast", "thresholding"),
labels = c("GLM-EIV", "GLM-EIV (accelerated)", "Thresholding"))) |>
arrange(Method)
p <- ggplot(data = to_plot, mapping = aes(x = theta,
y = mean,
ymin = mean - 2 * se,
ymax = mean + 2 * se,
col = Method)) +
xlab(expression(theta)) + scale_color_manual(values = my_cols) +
scale_x_continuous(trans = "log10") +
facet_grid(metric_fct ~ distribution, scales = "free") +
geom_hline(data = dplyr::filter(to_plot, metric_fct == "Bias"),
mapping = aes(yintercept = 0), colour = "black") +
geom_hline(data = dplyr::filter(to_plot, metric_fct == "MSE"),
mapping = aes(yintercept = 0), colour = "black") +
geom_hline(data = dplyr::filter(to_plot, metric_fct == "Coverage"),
mapping = aes(yintercept = 0.95), colour = "black") +
geom_line() + geom_errorbar(width = 0.05) + geom_point() +
theme_bw() + theme(legend.position = "bottom", panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) + ylab("")
p
library(dplyr)
library(ggplot2)
library(simulatr)
my_cols <- c("firebrick3", "dodgerblue3", "orchid4")
# load the results and specifier objects
sim_result_dir <- paste0(.get_config_path("LOCAL_GLMEIV_DATA_DIR"), "public/simulations/results")
sim_res_4 <- readRDS(paste0(sim_result_dir, "/sim_res_4.rds"))[["metrics"]]
to_plot <- sim_res_4 |> dplyr::filter(m_perturbation > -1.8) |>
dplyr::filter(metric %in% c("bias", "ci_width", "coverage", "mse", "time")) |>
mutate(metric_fct = factor(metric, levels = c("bias", "mse", "coverage", "ci_width", "time"),
labels = c("Bias", "MSE", "Coverage", "CI width", "Time (s)")),
Method = factor(method, levels = c("glmeiv_slow", "glmeiv_fast", "thresholding"),
labels = c("GLM-EIV", "GLM-EIV (accelerated)", "Thresholding"))) |>
arrange(Method) |> mutate(exp_m_perturbation = exp(m_perturbation))
p <- ggplot(data = to_plot, mapping = aes(x = exp_m_perturbation,
y = mean,
ymin = mean - 2 * se,
ymax = mean + 2 * se,
col = Method)) +
xlab(expression(exp(beta[m]))) + scale_color_manual(values = my_cols) +
facet_grid(metric_fct ~ fam_str, scales = "free") +
geom_hline(data = dplyr::filter(to_plot, metric_fct == "Bias"),
mapping = aes(yintercept = 0), colour = "black") +
geom_hline(data = dplyr::filter(to_plot, metric_fct == "MSE"),
mapping = aes(yintercept = 0), colour = "black") +
geom_hline(data = dplyr::filter(to_plot, metric_fct == "Coverage"),
mapping = aes(yintercept = 0.95), colour = "black") +
geom_line() + geom_errorbar(width = 0.05) + geom_point() +
theme_bw() + theme(legend.position = "bottom", panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) + ylab("")
p
library(dplyr)
library(ggplot2)
library(simulatr)
my_cols <- c("firebrick3", "dodgerblue3", "orchid4")
# load the results and specifier objects
sim_result_dir <- paste0(.get_config_path("LOCAL_GLMEIV_DATA_DIR"), "public/simulations/results")
sim_res_3 <- readRDS(paste0(sim_result_dir, "/sim_res_3.rds"))[["metrics"]]
to_plot <- sim_res_3 |>
dplyr::mutate(distribution = ifelse(run_unknown_theta_precomputation, "NB (theta unknown)", "NB (theta known)")) |>
dplyr::filter(metric %in% c("bias", "ci_width", "coverage", "mse", "time")) |>
mutate(metric_fct = factor(metric, levels = c("bias", "mse", "coverage", "ci_width", "time"),
labels = c("Bias", "MSE", "Coverage", "CI width", "Time (s)")),
Method = factor(method, levels = c("glmeiv_slow", "glmeiv_fast", "thresholding"),
labels = c("GLM-EIV", "GLM-EIV (accelerated)", "Thresholding"))) |>
arrange(Method)
p <- ggplot(data = to_plot, mapping = aes(x = theta,
y = mean,
ymin = mean - 2 * se,
ymax = mean + 2 * se,
col = Method)) +
xlab(expression(theta)) + scale_color_manual(values = my_cols) +
scale_x_continuous(trans = "log10") +
facet_grid(metric_fct ~ distribution, scales = "free") +
geom_hline(data = dplyr::filter(to_plot, metric_fct == "Bias"),
mapping = aes(yintercept = 0), colour = "black") +
geom_hline(data = dplyr::filter(to_plot, metric_fct == "MSE"),
mapping = aes(yintercept = 0), colour = "black") +
geom_hline(data = dplyr::filter(to_plot, metric_fct == "Coverage"),
mapping = aes(yintercept = 0.95), colour = "black") +
geom_line() + geom_errorbar(width = 0.05) + geom_point() +
theme_bw() + theme(legend.position = "bottom", panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) + ylab("")
p
my_cols <- c("firebrick3", "dodgerblue3", "orchid4")
# load the results and specifier objects
sim_result_dir <- paste0(.get_config_path("LOCAL_GLMEIV_DATA_DIR"), "public/simulations/results")
sim_res_1 <- readRDS(paste0(sim_result_dir, "/sim_res_1.rds"))[["metrics"]]
to_plot <- sim_res_1 |>
dplyr::filter(metric %in% c("bias", "ci_width", "coverage", "mse", "time")) |>
mutate(metric_fct = factor(metric, levels = c("bias", "mse", "coverage", "ci_width", "time"),
labels = c("Bias", "MSE", "Coverage", "CI width", "Time (s)")),
Method = factor(method, levels = c("glmeiv_slow", "glmeiv_fast", "thresholding"),
labels = c("GLM-EIV", "GLM-EIV (accelerated)", "Thresholding"))) |>
arrange(Method) |> mutate(exp_g_perturbation = exp(g_perturbation))
p <- ggplot(data = to_plot, mapping = aes(x = exp_g_perturbation,
y = mean,
ymin = mean - 2 * se,
ymax = mean + 2 * se,
col = Method)) +
xlab(expression(exp(beta[g]))) + scale_color_manual(values = my_cols) +
facet_grid(metric_fct ~ fam_str, scales = "free") +
geom_hline(data = dplyr::filter(to_plot, metric_fct == "Bias"),
mapping = aes(yintercept = 0), colour = "black") +
geom_hline(data = dplyr::filter(to_plot, metric_fct == "MSE"),
mapping = aes(yintercept = 0), colour = "black") +
geom_hline(data = dplyr::filter(to_plot, metric_fct == "Coverage"),
mapping = aes(yintercept = 0.95), colour = "black") +
geom_line() + geom_errorbar(width = 0.05) + geom_point() +
theme_bw() + theme(legend.position = "bottom", panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) + ylab("")
p
