gRNA_odm_qc_to_save <- gRNA_odm_sub %>% mutate_cell_covariates(n_nonzero = NULL, n_umis = NULL)
#############################
# 4. Get the pairs to analyze
#############################
gRNA_gene_pairs <- readRDS(paste0(xie_offsite, "aux/pairs_grouped.rds"))
set.seed(4)
gRNA_gene_pairs_sub <- dplyr::filter(gRNA_gene_pairs, gene_id %in% get_feature_ids(gene_odm_qc_to_save))
# check for duplication of pair id
gRNA_gene_pairs_sub %>% dplyr::summarize(pair_id = paste0(gene_id, gRNA_id)) %>%
dplyr::pull() %>% duplicated() %>% any()
# combine the cis pairs with 50,000, randomly-selected negative control pairs
gRNA_gene_sample <- rbind(gRNA_gene_pairs_sub %>% dplyr::filter(type == "cis"),
gRNA_gene_pairs_sub %>% dplyr::filter(type == "neg_control") %>% dplyr::slice_sample(n = 50000))
############################################################
# 5. Save the metadata RDS, offsets, global covariate matrix
############################################################
save_odm(odm = gene_odm_qc_to_save, metadata_fp = paste0(glmeiv_offsite_dir_xie_data, "gene_metadata"))
save_odm(odm = gRNA_odm_qc_to_save, metadata_fp = paste0(glmeiv_offsite_dir_xie_data, "gRNA_metadata"))
saveRDS(object = m_offsets_to_save, file = paste0(glmeiv_offsite_dir_xie_data, "m_offset.rds"))
saveRDS(object = g_offsets_to_save, file = paste0(glmeiv_offsite_dir_xie_data, "g_offset.rds"))
saveRDS(object = covariate_matrix_to_save, file = paste0(glmeiv_offsite_dir_xie_data, "covariate_matrix.rds"))
saveRDS(object = gRNA_gene_sample, file = paste0(glmeiv_offsite_dir_xie_data, "gRNA_gene_pairs.rds"))
saveRDS(object = gRNA_gene_sample %>% dplyr::slice_sample(n = 15), file = paste0(glmeiv_offsite_dir_xie_data, "gRNA_gene_pairs_trial.rds"))
# 0. Load the ondisc matrices of gasperini and xie count/expression data
library(ondisc)
xie_2019_offsite <- paste0(.get_config_path("LOCAL_XIE_2019_DATA_DIR"), "processed/")
xie_glmeiv_offsite <- paste0(.get_config_path("LOCAL_GLMEIV_DATA_DIR"), "public/xie/data/")
gasp_2019_offsite <- paste0(.get_config_path("LOCAL_GASPERINI_2019_DATA_DIR"), "at-scale/processed/")
gasp_glmeiv_offsite <- paste0(.get_config_path("LOCAL_GLMEIV_DATA_DIR"), "public/gasperini/data/")
gene_odm_xie <- read_odm(odm_fp = paste0(xie_2019_offsite, "gene/expression_matrix.odm"),
metadata_fp = paste0(xie_glmeiv_offsite, "gene_metadata.rds"))
gene_odm_xie[[10,]]
gRNA_odm_xie <- read_odm(odm_fp = paste0(xie_2019_offsite, "gRNA/raw_grouped.odm"),
metadata_fp = paste0(xie_2019_offsite, "gRNA/raw_grouped_metadata.rds"))
gRNA_odm_xie
gene_odm_gasp <- gene_odm <- read_odm(odm_fp = paste0(gasp_2019_offsite, "gene/gasp_scale_gene_expressions.odm"),
metadata_fp = paste0(gasp_glmeiv_offsite, "gene_qc_metadata.rds"))
# 0. Load the ondisc matrices of gasperini and xie count/expression data
library(ondisc)
xie_2019_offsite <- paste0(.get_config_path("LOCAL_XIE_2019_DATA_DIR"), "processed/")
xie_glmeiv_offsite <- paste0(.get_config_path("LOCAL_GLMEIV_DATA_DIR"), "public/xie/data/")
gasp_2019_offsite <- paste0(.get_config_path("LOCAL_GASPERINI_2019_DATA_DIR"), "at-scale/processed/")
gasp_glmeiv_offsite <- paste0(.get_config_path("LOCAL_GLMEIV_DATA_DIR"), "public/gasperini/data/")
gene_odm_xie <- read_odm(odm_fp = paste0(xie_2019_offsite, "gene/expression_matrix.odm"),
metadata_fp = paste0(xie_glmeiv_offsite, "gene_metadata.rds"))
gRNA_odm_xie <- read_odm(odm_fp = paste0(xie_2019_offsite, "gRNA/raw_grouped.odm"),
metadata_fp = paste0(xie_2019_offsite, "gRNA/raw_grouped_metadata.rds"))
gene_odm_gasp <- gene_odm <- read_odm(odm_fp = paste0(gasp_2019_offsite, "gene/gasp_scale_gene_expressions.odm"),
metadata_fp = paste0(gasp_glmeiv_offsite, "gene_qc_metadata.rds"))
gRNA_odm_gasp <- read_odm(odm_fp = paste0(gasp_2019_offsite, "gRNA_grouped/gasp_scale_gRNA_counts_grouped.odm"),
metadata_fp = paste0(gasp_glmeiv_offsite, "gRNA_qc_metadata.rds"))
gRNA_odm_xie <- read_odm(odm_fp = paste0(xie_2019_offsite, "gRNA/raw_grouped.odm"),
metadata_fp = paste0(xie_2019_offsite, "gRNA/raw_grouped_metadata.rds"))
gene_odm_gasp <- gene_odm <- read_odm(odm_fp = paste0(gasp_2019_offsite, "gene/gasp_scale_gene_expressions.odm"),
metadata_fp = paste0(gasp_glmeiv_offsite, "gene_qc_metadata.rds"))
gene_odm_xie <- read_odm(odm_fp = paste0(xie_2019_offsite, "gene/expression_matrix.odm"),
metadata_fp = paste0(xie_glmeiv_offsite, "gene_metadata.rds"))
gRNA_odm_xie <- read_odm(odm_fp = paste0(xie_2019_offsite, "gRNA/raw_grouped.odm"),
metadata_fp = paste0(xie_2019_offsite, "gRNA/raw_grouped_metadata.rds"))
xie_2019_offsite <- paste0(.get_config_path("LOCAL_XIE_2019_DATA_DIR"), "processed/")
xie_glmeiv_offsite <- paste0(.get_config_path("LOCAL_GLMEIV_DATA_DIR"), "public/xie/data/")
gasp_2019_offsite <- paste0(.get_config_path("LOCAL_GASPERINI_2019_DATA_DIR"), "at-scale/processed/")
gasp_glmeiv_offsite <- paste0(.get_config_path("LOCAL_GLMEIV_DATA_DIR"), "public/gasperini/data/")
gene_odm_gasp <- gene_odm <- read_odm(odm_fp = paste0(gasp_2019_offsite, "gene/gasp_scale_gene_expressions.odm"),
metadata_fp = paste0(gasp_glmeiv_offsite, "gene_qc_metadata.rds"))
# 0. Load the ondisc matrices of gasperini and xie count/expression data
library(ondisc)
gene_odm_gasp <- gene_odm <- read_odm(odm_fp = paste0(gasp_2019_offsite, "gene/gasp_scale_gene_expressions.odm"),
metadata_fp = paste0(gasp_glmeiv_offsite, "gene_qc_metadata.rds"))
gene_odm_gasp[[1,]]
gRNA_odm_gasp <- read_odm(odm_fp = paste0(gasp_2019_offsite, "gRNA_grouped/gasp_scale_gRNA_counts_grouped.odm"),
metadata_fp = paste0(gasp_glmeiv_offsite, "gRNA_qc_metadata.rds"))
gRNA_odm_gasp[[1.]]
gene_odm_xie <- read_odm(odm_fp = paste0(xie_2019_offsite, "gene/expression_matrix.odm"),
metadata_fp = paste0(xie_glmeiv_offsite, "gene_metadata.rds"))
gRNA_odm_xie <- read_odm(odm_fp = paste0(xie_2019_offsite, "gRNA/raw_grouped.odm"),
metadata_fp = paste0(xie_2019_offsite, "gRNA/raw_grouped_metadata.rds"))
gRNA_odm_xie[[1,]]
gene_odm_xie <- read_odm(odm_fp = paste0(xie_2019_offsite, "gene/expression_matrix.odm"),
metadata_fp = paste0(xie_glmeiv_offsite, "gene_metadata.rds"))
read_odm
library(magrittr)
library(ondisc)
glmeiv_offsite_dir_xie_data <- paste0(.get_config_path("LOCAL_GLMEIV_DATA_DIR"), "public/xie/data/")
xie_offsite <- paste0(.get_config_path("LOCAL_XIE_2019_DATA_DIR"), "processed/")
##############
##############
# 0. Load data
##############
gene_odm <- read_odm(odm_fp = paste0(xie_offsite, "gene/expression_matrix.odm"),
metadata_fp = paste0(xie_offsite, "gene/metadata.rds"))
gRNA_odm <- read_odm(odm_fp = paste0(xie_offsite, "gRNA/raw_grouped.odm"),
metadata_fp = paste0(xie_offsite, "gRNA/raw_grouped_metadata.rds"))
##################
# 1. QC on cells
##################
multimodal_odm <- multimodal_ondisc_matrix(list(gene = gene_odm, gRNA = gRNA_odm))
# determine which cells contain fewer than 0.08 p_mito
ok_cells <- multimodal_odm %>% get_cell_covariates() %>%
dplyr::summarize(ok = gene_p_mito < 0.08) %>% dplyr::pull(ok)
# subset the multimodal ODM according to QC metrics
multimodal_odm_sub <- multimodal_odm[,ok_cells]
# obtain global covariate matrix
global_covariate_matrix <- multimodal_odm_sub %>%
get_cell_covariates() %>% dplyr::mutate(lg_mRNA_lib_size = log(gene_n_umis),
lg_gRNA_lib_size = log(gRNA_n_umis),
batch = gene_batch,
p_mito = gene_p_mito) %>%
dplyr::select(lg_mRNA_lib_size, lg_gRNA_lib_size, batch, p_mito) %>%
dplyr::mutate(batch = factor(batch))
covariate_matrix_to_save <- global_covariate_matrix %>% dplyr::select(batch, p_mito)
m_offsets_to_save <- global_covariate_matrix %>% dplyr::pull(lg_mRNA_lib_size)
g_offsets_to_save <- global_covariate_matrix %>% dplyr::pull(lg_gRNA_lib_size)
################
# 2. QC on genes
################
# obtain the modalities
gene_odm_sub <- get_modality(multimodal_odm_sub, "gene")
# keep only genes with mean expression >= 1 and p_expressed > 0.1.
ok_genes <- gene_odm_sub %>% mutate_feature_covariates(p_expressed = n_nonzero/ncol(multimodal_odm), ok = (mean_expression >= 1 & p_expressed > 0.1)) %>% get_feature_covariates() %>% dplyr::pull(ok)
gene_odm_qc <- gene_odm_sub[ok_genes,]
gene_odm_qc_to_save <- gene_odm_qc %>% mutate_cell_covariates(n_nonzero = NULL, n_umis = NULL, p_mito = NULL, batch = NULL)
################
# 3. QC on gRNAs
################
gRNA_odm_sub <- get_modality(multimodal_odm_sub, "gRNA")
gRNA_odm_qc_to_save <- gRNA_odm_sub %>% mutate_cell_covariates(n_nonzero = NULL, n_umis = NULL)
#############################
# 4. Get the pairs to analyze
#############################
gRNA_gene_pairs <- readRDS(paste0(xie_offsite, "aux/pairs_grouped.rds"))
set.seed(4)
gRNA_gene_pairs_sub <- dplyr::filter(gRNA_gene_pairs, gene_id %in% get_feature_ids(gene_odm_qc_to_save))
# check for duplication of pair id
gRNA_gene_pairs_sub %>% dplyr::summarize(pair_id = paste0(gene_id, gRNA_id)) %>%
dplyr::pull() %>% duplicated() %>% any()
# combine the cis pairs with 50,000, randomly-selected negative control pairs
gRNA_gene_sample <- rbind(gRNA_gene_pairs_sub %>% dplyr::filter(type == "cis"),
gRNA_gene_pairs_sub %>% dplyr::filter(type == "neg_control") %>% dplyr::slice_sample(n = 50000))
############################################################
# 5. Save the metadata RDS, offsets, global covariate matrix
############################################################
save_odm(odm = gene_odm_qc_to_save, metadata_fp = paste0(glmeiv_offsite_dir_xie_data, "gene_metadata"))
save_odm(odm = gRNA_odm_qc_to_save, metadata_fp = paste0(glmeiv_offsite_dir_xie_data, "gRNA_metadata"))
saveRDS(object = m_offsets_to_save, file = paste0(glmeiv_offsite_dir_xie_data, "m_offset.rds"))
saveRDS(object = g_offsets_to_save, file = paste0(glmeiv_offsite_dir_xie_data, "g_offset.rds"))
saveRDS(object = covariate_matrix_to_save, file = paste0(glmeiv_offsite_dir_xie_data, "covariate_matrix.rds"))
saveRDS(object = gRNA_gene_sample, file = paste0(glmeiv_offsite_dir_xie_data, "gRNA_gene_pairs.rds"))
saveRDS(object = gRNA_gene_sample %>% dplyr::slice_sample(n = 15), file = paste0(glmeiv_offsite_dir_xie_data, "gRNA_gene_pairs_trial.rds"))
# 0. Load the ondisc matrices of gasperini and xie count/expression data
library(ondisc)
xie_2019_offsite <- paste0(.get_config_path("LOCAL_XIE_2019_DATA_DIR"), "processed/")
xie_glmeiv_offsite <- paste0(.get_config_path("LOCAL_GLMEIV_DATA_DIR"), "public/xie/data/")
gasp_2019_offsite <- paste0(.get_config_path("LOCAL_GASPERINI_2019_DATA_DIR"), "at-scale/processed/")
gasp_glmeiv_offsite <- paste0(.get_config_path("LOCAL_GLMEIV_DATA_DIR"), "public/gasperini/data/")
gene_odm_xie <- read_odm(odm_fp = paste0(xie_2019_offsite, "gene/expression_matrix.odm"),
metadata_fp = paste0(xie_glmeiv_offsite, "gene_metadata.rds"))
gRNA_odm_xie <- read_odm(odm_fp = paste0(xie_2019_offsite, "gRNA/raw_grouped.odm"),
metadata_fp = paste0(xie_2019_offsite, "gRNA/raw_grouped_metadata.rds"))
gene_odm_gasp <- gene_odm <- read_odm(odm_fp = paste0(gasp_2019_offsite, "gene/gasp_scale_gene_expressions.odm"),
metadata_fp = paste0(gasp_glmeiv_offsite, "gene_qc_metadata.rds"))
gRNA_odm_gasp <- read_odm(odm_fp = paste0(gasp_2019_offsite, "gRNA_grouped/gasp_scale_gRNA_counts_grouped.odm"),
metadata_fp = paste0(gasp_glmeiv_offsite, "gRNA_qc_metadata.rds"))
gene_odm_xie[[1,]]
library(magrittr)
library(ggplot2)
library(cowplot)
my_cols <- c("firebrick3", "dodgerblue3", "orchid4", "lightskyblue3")
fig_dir <- paste0(.get_config_path("LOCAL_CODE_DIR"), "glmeiv-manuscript/figures/thresholding_empirical")
if (!dir.exists(fig_dir)) dir.create(fig_dir)
my_theme <- theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"))
# load the results
gasp_result_dir <- paste0(.get_config_path("LOCAL_GLMEIV_DATA_DIR"), "public/gasperini/results/")
thresh_res <- readRDS(paste0(gasp_result_dir, "thresholding_result_pc.rds"))
# study how choice of threshold influences results on Gasperini self TSS pairs
thresh_res_pc <- thresh_res %>% dplyr::filter(site_type == "selfTSS", parameter == "m_perturbation")
# Question 1. How do thresh = 1 and thresh = 5 compare on estimation?
thresh_res_pc_wide <- thresh_res_pc %>% dplyr::select(target, value, threshold, pair_id) %>%
tidyr::pivot_wider(id_cols = c("pair_id", "target"),
names_from = "threshold",
values_from = "value", names_prefix = "threshold_")
to_plot <- thresh_res_pc_wide %>% dplyr::filter(target == "estimate") %>% dplyr::select(threshold_1, threshold_5)
p1 <- ggplot(data = to_plot, mapping = aes(x = threshold_5, y = threshold_1)) + geom_point(alpha = 0.7, col = my_cols[2]) +
xlab("Fold change (thresh = 5)") + ylab("Fold change (thresh = 1)") + geom_abline(slope = 1, intercept = 0) + theme_bw(base_size = 10) + my_theme
[1]
p1
# a) est. vs. est.
to_plot <- thresh_res_pc_wide %>% dplyr::filter(target == "estimate") %>% dplyr::select(threshold_5, threshold_20)
p2 <- ggplot(data = to_plot, mapping = aes(x = threshold_5, y = threshold_20)) + geom_point(alpha = 0.9, col = my_cols[2]) +
xlab("Fold change (thresh = 5)") + ylab("Fold change (thresh = 20)") + geom_abline(slope = 1, intercept = 0, lwd = 0.75) + theme_bw(base_size = 10) + my_theme
p2
# b) p-value vs. p-value
to_plot <- thresh_res_pc_wide %>% dplyr::filter(target == "p_value") %>% dplyr::select(threshold_5, threshold_20)
p3 <- ggplot(data = to_plot, mapping = aes(x = -log(threshold_5, base = 10), y = -log(threshold_20, base = 10))) + geom_point(alpha = 0.7, col = my_cols[3]) +
xlab("-log p (thresh = 5)") + ylab("-log p (thresh = 20)") + geom_abline(slope = 1, intercept = 0) + theme_bw(base_size = 10) + my_theme
p3
# c) CI width for threshold = 5 vs threshold = 20
to_plot <- thresh_res_pc_wide %>% dplyr::filter(target == c("confint_lower", "confint_upper")) %>% dplyr::select(-threshold_1) %>%
tidyr::pivot_longer(cols = c("threshold_5", "threshold_20"), names_to = "threshold") %>% dplyr::group_by(threshold) %>%
dplyr::group_modify(function(tbl, key) {
tidyr::pivot_wider(data = tbl, id_cols = "pair_id", names_from = "target", values_from = "value")
}) %>% dplyr::mutate(ci_width = log(confint_upper) - log(confint_lower)) %>%
dplyr::mutate(threshold = factor(x = threshold, levels = c("threshold_5", "threshold_20"), labels = c("5", "20")))
to_plot
mean_ci_width <- to_plot %>% dplyr::summarize(m_width = mean(ci_width))
(mean_ci_width %>% dplyr::filter(threshold == "20") %>% dplyr::pull(m_width))/(mean_ci_width %>% dplyr::filter(threshold == "5") %>% dplyr::pull(m_width))
# Threshold = 20 CI width is 1.5 times the threshold = 5 CI width.
p4 <- ggplot(data = to_plot, mapping = aes(x = threshold, y = ci_width)) + geom_violin(fill = my_cols[1], alpha = 0.7, draw_quantiles = 0.5) +
theme_bw(base_size = 10) + xlab("Threshold") + ylab("CI width") + geom_hline(yintercept = 0) + my_theme + scale_y_continuous(expand = c(NA, 0))
p4
# e and f) gRNA count histograms
plotting_objects <- paste0(.get_config_path("LOCAL_CODE_DIR"), "glmeiv-manuscript/figures/plotting_objects.R")
source(plotting_objects)
set.seed(2)
gRNA_ids_gasp <- sample(x = get_feature_ids(gRNA_odm_gasp), size = 1, replace = FALSE)
gRNA_ids_xie <- sample(x = get_feature_ids(gRNA_odm_xie), size = 1, replace = FALSE)
xie_gRNA <- gRNA_odm_xie[[gRNA_ids_xie,]] %>% as.numeric()
gasp_gRNA <- gRNA_odm_gasp[[gRNA_ids_gasp,]] %>% as.numeric()
# plot histograms
p5 <- ggplot(data = xie_gRNA %>% tibble::tibble(count = .) %>%
dplyr::filter(count >= 1, count <= 40),
mapping = aes(x = count)) +
geom_histogram(binwidth = 2, col = "black", fill = my_cols[4], alpha = 0.7) +
scale_y_continuous(trans='log10', expand = c(0, NA)) + xlab("gRNA count (Xie)") + ylab("") +
theme_bw(base_size = 10) + my_theme
p5
p6 <- ggplot(data = gasp_gRNA %>% tibble::tibble(count = .) %>%
dplyr::filter(count >= 1, count <= 40),
mapping = aes(x = count)) +
geom_histogram(binwidth = 2, col = "black", fill = my_cols[4], alpha = 0.7) +
scale_y_continuous(trans='log10', expand = c(0, NA)) + xlab("gRNA count (Gasperini)") +
ylab("") + theme_bw(base_size = 10) + my_theme
p6
# combine plots
p_out <- plot_grid(p1, p2, p3, p4, p6, p5, labels = c("a", "b", "c", "d", "e", "f"), ncol = 2, rel_heights = c(1,1,0.8), align = "vh")
p_out
ggsave(filename = paste0(fig_dir, "/plot.jpeg"), plot = p_out, device = "jpeg", scale = 1, width = 6, height = 6)
# combine plots
p_out <- plot_grid(p1, p2, p3, p4, p6, p5, labels = c("a", "b", "c", "d", "e", "f"), ncol = 2, rel_heights = c(1,1,0.8), align = "vh", hjust = -1)
ggsave(filename = paste0(fig_dir, "/plot.jpeg"), plot = p_out, device = "jpeg", scale = 1, width = 6, height = 6)
# combine plots
p_out <- plot_grid(p1, p2, p3, p4, p6, p5, labels = c("a", "b", "c", "d", "e", "f"), ncol = 2, rel_heights = c(1,1,0.8), align = "vh", hjust = 0.5)
ggsave(filename = paste0(fig_dir, "/plot.jpeg"), plot = p_out, device = "jpeg", scale = 1, width = 6, height = 6)
# combine plots
p_out <- plot_grid(p1, p2, p3, p4, p6, p5, labels = c("a", "b", "c", "d", "e", "f"), ncol = 2, rel_heights = c(1,1,0.8), align = "vh", vjust = 0.5)
ggsave(filename = paste0(fig_dir, "/plot.jpeg"), plot = p_out, device = "jpeg", scale = 1, width = 6, height = 6)
ggsave(filename = paste0(fig_dir, "/plot.jpeg"), plot = p_out, device = "jpeg", scale = 1, width = 6, height = 6.25)
# combine plots
p_out <- plot_grid(p1, p2, p3, p4, p6, p5, labels = c("a", "b", "c", "d", "e", "f"), ncol = 2, rel_heights = c(1,1,0.8), align = "vh")
ggsave(filename = paste0(fig_dir, "/plot.jpeg"), plot = p_out, device = "jpeg", scale = 1, width = 6, height = 6)
# combine plots
p_out <- plot_grid(p1, p2, p3, p4, p6, p5, labels = c("a", "b", "c", "d", "e", "f"),
ncol = 2, rel_heights = c(1,1,0.8), align = "vh", hjust = -1)
ggsave(filename = paste0(fig_dir, "/plot.jpeg"), plot = p_out, device = "jpeg", scale = 1, width = 6, height = 6)
# combine plots
p_out <- plot_grid(p1, p2, p3, p4, p6, p5, labels = c("a", "b", "c", "d", "e", "f"),
ncol = 2, rel_heights = c(1,1,0.8), align = "vh", hjust = 1)
ggsave(filename = paste0(fig_dir, "/plot.jpeg"), plot = p_out, device = "jpeg", scale = 1, width = 6, height = 6)
p_out
# combine plots
p_out <- plot_grid(p1, p2, p3, p4, p6, p5, labels = c("a", "b", "c", "d", "e", "f"),
ncol = 2, rel_heights = c(1,1,0.8), align = "vh")
p_out
ggsave(filename = paste0(fig_dir, "/plot.jpeg"), plot = p_out, device = "jpeg", scale = 1, width = 6, height = 6)
p1 <- ggplot(data = to_plot, mapping = aes(x = threshold_5, y = threshold_1)) + geom_point(alpha = 0.7, col = my_cols[2]) +
xlab("Fold change (thresh = 5)") + ylab("Fold change (thresh = 1)") +
geom_abline(slope = 1, intercept = 0) + theme_bw(base_size = 10) + my_theme +
theme(plot.margin = margin(1,1,1.5,1.2, "cm"))
p1
library(magrittr)
library(ggplot2)
library(cowplot)
my_cols <- c("firebrick3", "dodgerblue3", "orchid4", "lightskyblue3")
fig_dir <- paste0(.get_config_path("LOCAL_CODE_DIR"), "glmeiv-manuscript/figures/thresholding_empirical")
if (!dir.exists(fig_dir)) dir.create(fig_dir)
my_theme <- theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"))
# load the results
gasp_result_dir <- paste0(.get_config_path("LOCAL_GLMEIV_DATA_DIR"), "public/gasperini/results/")
thresh_res <- readRDS(paste0(gasp_result_dir, "thresholding_result_pc.rds"))
# study how choice of threshold influences results on Gasperini self TSS pairs
thresh_res_pc <- thresh_res %>% dplyr::filter(site_type == "selfTSS", parameter == "m_perturbation")
# Question 1. How do thresh = 1 and thresh = 5 compare on estimation?
thresh_res_pc_wide <- thresh_res_pc %>% dplyr::select(target, value, threshold, pair_id) %>%
tidyr::pivot_wider(id_cols = c("pair_id", "target"),
names_from = "threshold",
values_from = "value", names_prefix = "threshold_")
to_plot <- thresh_res_pc_wide %>% dplyr::filter(target == "estimate") %>% dplyr::select(threshold_1, threshold_5)
p1 <- ggplot(data = to_plot, mapping = aes(x = threshold_5, y = threshold_1)) + geom_point(alpha = 0.7, col = my_cols[2]) +
xlab("Fold change (thresh = 5)") + ylab("Fold change (thresh = 1)") +
geom_abline(slope = 1, intercept = 0) + theme_bw(base_size = 10) + my_theme +
theme(plot.margin = margin(1,1,1.5,1.2, "cm"))
p1
p1 <- ggplot(data = to_plot, mapping = aes(x = threshold_5, y = threshold_1)) + geom_point(alpha = 0.7, col = my_cols[2]) +
xlab("Fold change (thresh = 5)") + ylab("Fold change (thresh = 1)") +
geom_abline(slope = 1, intercept = 0) + theme_bw(base_size = 10) + my_theme +
theme(plot.margin = margin(0.2, 0.2, 0.2, 0.2, "cm"))
p1
p1 <- ggplot(data = to_plot, mapping = aes(x = threshold_5, y = threshold_1)) + geom_point(alpha = 0.7, col = my_cols[2]) +
xlab("Fold change (thresh = 5)") + ylab("Fold change (thresh = 1)") +
geom_abline(slope = 1, intercept = 0) + theme_bw(base_size = 10) + my_theme +
theme(plot.margin = margin(0.5, 0.5, 0.5, 0.5, "cm"))
p1
p2 <- ggplot(data = to_plot, mapping = aes(x = threshold_5, y = threshold_20)) + geom_point(alpha = 0.9, col = my_cols[2]) +
xlab("Fold change (thresh = 5)") + ylab("Fold change (thresh = 20)") + geom_abline(slope = 1, intercept = 0, lwd = 0.75) +
theme_bw(base_size = 10) + my_theme + theme(plot.margin = margin(0.5, 0.5, 0.5, 0.5, "cm"))
p3 <- ggplot(data = to_plot, mapping = aes(x = -log(threshold_5, base = 10), y = -log(threshold_20, base = 10))) + geom_point(alpha = 0.7, col = my_cols[3]) +
xlab("-log p (thresh = 5)") + ylab("-log p (thresh = 20)") + geom_abline(slope = 1, intercept = 0) +
theme_bw(base_size = 10) + my_theme + theme(plot.margin = margin(0.5, 0.5, 0.5, 0.5, "cm"))
# c) CI width for threshold = 5 vs threshold = 20
to_plot <- thresh_res_pc_wide %>% dplyr::filter(target == c("confint_lower", "confint_upper")) %>% dplyr::select(-threshold_1) %>%
tidyr::pivot_longer(cols = c("threshold_5", "threshold_20"), names_to = "threshold") %>% dplyr::group_by(threshold) %>%
dplyr::group_modify(function(tbl, key) {
tidyr::pivot_wider(data = tbl, id_cols = "pair_id", names_from = "target", values_from = "value")
}) %>% dplyr::mutate(ci_width = log(confint_upper) - log(confint_lower)) %>%
dplyr::mutate(threshold = factor(x = threshold, levels = c("threshold_5", "threshold_20"), labels = c("5", "20")))
mean_ci_width <- to_plot %>% dplyr::summarize(m_width = mean(ci_width))
# Threshold = 20 CI width is 1.5 times the threshold = 5 CI width.
p4 <- ggplot(data = to_plot, mapping = aes(x = threshold, y = ci_width)) + geom_violin(fill = my_cols[1], alpha = 0.7, draw_quantiles = 0.5) +
theme_bw(base_size = 10) + xlab("Threshold") + ylab("CI width") + geom_hline(yintercept = 0) +
my_theme + scale_y_continuous(expand = c(NA, 0)) + theme(plot.margin = margin(0.5, 0.5, 0.5, 0.5, "cm"))
p4
# e and f) gRNA count histograms
plotting_objects <- paste0(.get_config_path("LOCAL_CODE_DIR"), "glmeiv-manuscript/figures/plotting_objects.R")
source(plotting_objects)
set.seed(2)
gRNA_ids_gasp <- sample(x = get_feature_ids(gRNA_odm_gasp), size = 1, replace = FALSE)
gRNA_ids_xie <- sample(x = get_feature_ids(gRNA_odm_xie), size = 1, replace = FALSE)
xie_gRNA <- gRNA_odm_xie[[gRNA_ids_xie,]] %>% as.numeric()
gasp_gRNA <- gRNA_odm_gasp[[gRNA_ids_gasp,]] %>% as.numeric()
# plot histograms
p5 <- ggplot(data = xie_gRNA %>% tibble::tibble(count = .) %>%
dplyr::filter(count >= 1, count <= 40),
mapping = aes(x = count)) +
geom_histogram(binwidth = 2, col = "black", fill = my_cols[4], alpha = 0.7) +
scale_y_continuous(trans='log10', expand = c(0, NA)) + xlab("gRNA count (Xie)") + ylab("") +
theme_bw(base_size = 10) + my_theme + theme(plot.margin = margin(0.5, 0.5, 0.5, 0.5, "cm"))
p6 <- ggplot(data = gasp_gRNA %>% tibble::tibble(count = .) %>%
dplyr::filter(count >= 1, count <= 40),
mapping = aes(x = count)) +
geom_histogram(binwidth = 2, col = "black", fill = my_cols[4], alpha = 0.7) +
scale_y_continuous(trans='log10', expand = c(0, NA)) + xlab("gRNA count (Gasperini)") +
ylab("") + theme_bw(base_size = 10) + my_theme + theme(plot.margin = margin(0.5, 0.5, 0.5, 0.5, "cm"))
# combine plots
p_out <- plot_grid(p1, p2, p3, p4, p6, p5, labels = c("a", "b", "c", "d", "e", "f"),
ncol = 2, rel_heights = c(1,1,0.8), align = "vh")
p1
p2
p2 <- ggplot(data = to_plot, mapping = aes(x = threshold_5, y = threshold_20)) + geom_point(alpha = 0.9, col = my_cols[2]) +
xlab("Fold change (thresh = 5)") + ylab("Fold change (thresh = 20)") + geom_abline(slope = 1, intercept = 0, lwd = 0.75) +
theme_bw(base_size = 10) + my_theme + theme(plot.margin = margin(0.5, 0.5, 0.5, 0.5, "cm"))
# combine plots
p_out <- plot_grid(p1, p2, p3, p4, p6, p5, labels = c("a", "b", "c", "d", "e", "f"),
ncol = 2, rel_heights = c(1,1,0.8), align = "vh")
p1
p2
library(magrittr)
library(ggplot2)
library(cowplot)
my_cols <- c("firebrick3", "dodgerblue3", "orchid4", "lightskyblue3")
fig_dir <- paste0(.get_config_path("LOCAL_CODE_DIR"), "glmeiv-manuscript/figures/thresholding_empirical")
if (!dir.exists(fig_dir)) dir.create(fig_dir)
my_theme <- theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"))
# load the results
gasp_result_dir <- paste0(.get_config_path("LOCAL_GLMEIV_DATA_DIR"), "public/gasperini/results/")
thresh_res <- readRDS(paste0(gasp_result_dir, "thresholding_result_pc.rds"))
# study how choice of threshold influences results on Gasperini self TSS pairs
thresh_res_pc <- thresh_res %>% dplyr::filter(site_type == "selfTSS", parameter == "m_perturbation")
# Question 1. How do thresh = 1 and thresh = 5 compare on estimation?
thresh_res_pc_wide <- thresh_res_pc %>% dplyr::select(target, value, threshold, pair_id) %>%
tidyr::pivot_wider(id_cols = c("pair_id", "target"),
names_from = "threshold",
values_from = "value", names_prefix = "threshold_")
to_plot <- thresh_res_pc_wide %>% dplyr::filter(target == "estimate") %>% dplyr::select(threshold_1, threshold_5)
p1 <- ggplot(data = to_plot, mapping = aes(x = threshold_5, y = threshold_1)) + geom_point(alpha = 0.7, col = my_cols[2]) +
xlab("Fold change (thresh = 5)") + ylab("Fold change (thresh = 1)") +
geom_abline(slope = 1, intercept = 0) + theme_bw(base_size = 10) + my_theme +
theme(plot.margin = margin(0.5, 0.5, 0.5, 0.5, "cm"))
p1
# a) est. vs. est.
to_plot <- thresh_res_pc_wide %>% dplyr::filter(target == "estimate") %>% dplyr::select(threshold_5, threshold_20)
p2 <- ggplot(data = to_plot, mapping = aes(x = threshold_5, y = threshold_20)) + geom_point(alpha = 0.9, col = my_cols[2]) +
xlab("Fold change (thresh = 5)") + ylab("Fold change (thresh = 20)") + geom_abline(slope = 1, intercept = 0, lwd = 0.75) +
theme_bw(base_size = 10) + my_theme + theme(plot.margin = margin(0.5, 0.5, 0.5, 0.5, "cm"))
p2
# b) p-value vs. p-value
to_plot <- thresh_res_pc_wide %>% dplyr::filter(target == "p_value") %>% dplyr::select(threshold_5, threshold_20)
p3 <- ggplot(data = to_plot, mapping = aes(x = -log(threshold_5, base = 10), y = -log(threshold_20, base = 10))) + geom_point(alpha = 0.7, col = my_cols[3]) +
xlab("-log p (thresh = 5)") + ylab("-log p (thresh = 20)") + geom_abline(slope = 1, intercept = 0) +
theme_bw(base_size = 10) + my_theme + theme(plot.margin = margin(0.5, 0.5, 0.5, 0.5, "cm"))
p3
# c) CI width for threshold = 5 vs threshold = 20
to_plot <- thresh_res_pc_wide %>% dplyr::filter(target == c("confint_lower", "confint_upper")) %>% dplyr::select(-threshold_1) %>%
tidyr::pivot_longer(cols = c("threshold_5", "threshold_20"), names_to = "threshold") %>% dplyr::group_by(threshold) %>%
dplyr::group_modify(function(tbl, key) {
tidyr::pivot_wider(data = tbl, id_cols = "pair_id", names_from = "target", values_from = "value")
}) %>% dplyr::mutate(ci_width = log(confint_upper) - log(confint_lower)) %>%
dplyr::mutate(threshold = factor(x = threshold, levels = c("threshold_5", "threshold_20"), labels = c("5", "20")))
mean_ci_width <- to_plot %>% dplyr::summarize(m_width = mean(ci_width))
(mean_ci_width %>% dplyr::filter(threshold == "20") %>% dplyr::pull(m_width))/(mean_ci_width %>% dplyr::filter(threshold == "5") %>% dplyr::pull(m_width))
# Threshold = 20 CI width is 1.5 times the threshold = 5 CI width.
p4 <- ggplot(data = to_plot, mapping = aes(x = threshold, y = ci_width)) + geom_violin(fill = my_cols[1], alpha = 0.7, draw_quantiles = 0.5) +
theme_bw(base_size = 10) + xlab("Threshold") + ylab("CI width") + geom_hline(yintercept = 0) +
my_theme + scale_y_continuous(expand = c(NA, 0)) + theme(plot.margin = margin(0.5, 0.5, 0.5, 0.5, "cm"))
p4
# e and f) gRNA count histograms
plotting_objects <- paste0(.get_config_path("LOCAL_CODE_DIR"), "glmeiv-manuscript/figures/plotting_objects.R")
source(plotting_objects)
set.seed(2)
gRNA_ids_gasp <- sample(x = get_feature_ids(gRNA_odm_gasp), size = 1, replace = FALSE)
gRNA_ids_xie <- sample(x = get_feature_ids(gRNA_odm_xie), size = 1, replace = FALSE)
xie_gRNA <- gRNA_odm_xie[[gRNA_ids_xie,]] %>% as.numeric()
gasp_gRNA <- gRNA_odm_gasp[[gRNA_ids_gasp,]] %>% as.numeric()
# plot histograms
p5 <- ggplot(data = xie_gRNA %>% tibble::tibble(count = .) %>%
dplyr::filter(count >= 1, count <= 40),
mapping = aes(x = count)) +
geom_histogram(binwidth = 2, col = "black", fill = my_cols[4], alpha = 0.7) +
scale_y_continuous(trans='log10', expand = c(0, NA)) + xlab("gRNA count (Xie)") + ylab("") +
theme_bw(base_size = 10) + my_theme + theme(plot.margin = margin(0.5, 0.5, 0.5, 0.5, "cm"))
p5
p6
p6 <- ggplot(data = gasp_gRNA %>% tibble::tibble(count = .) %>%
dplyr::filter(count >= 1, count <= 40),
mapping = aes(x = count)) +
geom_histogram(binwidth = 2, col = "black", fill = my_cols[4], alpha = 0.7) +
scale_y_continuous(trans='log10', expand = c(0, NA)) + xlab("gRNA count (Gasperini)") +
ylab("") + theme_bw(base_size = 10) + my_theme + theme(plot.margin = margin(0.5, 0.5, 0.5, 0.5, "cm"))
p6
# combine plots
p_out <- plot_grid(p1, p2, p3, p4, p6, p5, labels = c("a", "b", "c", "d", "e", "f"),
ncol = 2, rel_heights = c(1,1,0.8), align = "vh")
p_out
ggsave(filename = paste0(fig_dir, "/plot.jpeg"), plot = p_out, device = "jpeg", scale = 1, width = 6, height = 6)
library(magrittr)
library(ggplot2)
library(cowplot)
my_cols <- c("firebrick3", "dodgerblue3", "orchid4", "lightskyblue3")
fig_dir <- paste0(.get_config_path("LOCAL_CODE_DIR"), "glmeiv-manuscript/figures/thresholding_empirical")
if (!dir.exists(fig_dir)) dir.create(fig_dir)
my_theme <- theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"))
# load the results
gasp_result_dir <- paste0(.get_config_path("LOCAL_GLMEIV_DATA_DIR"), "public/gasperini/results/")
thresh_res <- readRDS(paste0(gasp_result_dir, "thresholding_result_pc.rds"))
# study how choice of threshold influences results on Gasperini self TSS pairs
thresh_res_pc <- thresh_res %>% dplyr::filter(site_type == "selfTSS", parameter == "m_perturbation")
# Question 1. How do thresh = 1 and thresh = 5 compare on estimation?
thresh_res_pc_wide <- thresh_res_pc %>% dplyr::select(target, value, threshold, pair_id) %>%
tidyr::pivot_wider(id_cols = c("pair_id", "target"),
names_from = "threshold",
values_from = "value", names_prefix = "threshold_")
to_plot <- thresh_res_pc_wide %>% dplyr::filter(target == "estimate") %>% dplyr::select(threshold_1, threshold_5)
p1 <- ggplot(data = to_plot, mapping = aes(x = threshold_5, y = threshold_1)) + geom_point(alpha = 0.7, col = my_cols[2]) +
xlab("Fold change (thresh = 5)") + ylab("Fold change (thresh = 1)") +
geom_abline(slope = 1, intercept = 0) + theme_bw(base_size = 10) + my_theme +
theme(plot.margin = margin(0.1, 0.5, 0.1, 0.5, "cm"))
# threshold = 1 ests are bigger than (i.e., closer to one than) threshold = 5; this is attenuation bias due to the fact that excessively many unperturbed cells have been classified as perturbed.
# a) est. vs. est.
to_plot <- thresh_res_pc_wide %>% dplyr::filter(target == "estimate") %>% dplyr::select(threshold_5, threshold_20)
p2 <- ggplot(data = to_plot, mapping = aes(x = threshold_5, y = threshold_20)) + geom_point(alpha = 0.9, col = my_cols[2]) +
xlab("Fold change (thresh = 5)") + ylab("Fold change (thresh = 20)") + geom_abline(slope = 1, intercept = 0, lwd = 0.75) +
theme_bw(base_size = 10) + my_theme + theme(plot.margin = margin(0.1, 0.5, 0.1, 0.5, "cm"))
# b) p-value vs. p-value
to_plot <- thresh_res_pc_wide %>% dplyr::filter(target == "p_value") %>% dplyr::select(threshold_5, threshold_20)
p3 <- ggplot(data = to_plot, mapping = aes(x = -log(threshold_5, base = 10), y = -log(threshold_20, base = 10))) + geom_point(alpha = 0.7, col = my_cols[3]) +
xlab("-log p (thresh = 5)") + ylab("-log p (thresh = 20)") + geom_abline(slope = 1, intercept = 0) +
theme_bw(base_size = 10) + my_theme + theme(plot.margin = margin(0.1, 0.5, 0.1, 0.5, "cm"))
# c) CI width for threshold = 5 vs threshold = 20
to_plot <- thresh_res_pc_wide %>% dplyr::filter(target == c("confint_lower", "confint_upper")) %>% dplyr::select(-threshold_1) %>%
tidyr::pivot_longer(cols = c("threshold_5", "threshold_20"), names_to = "threshold") %>% dplyr::group_by(threshold) %>%
dplyr::group_modify(function(tbl, key) {
tidyr::pivot_wider(data = tbl, id_cols = "pair_id", names_from = "target", values_from = "value")
}) %>% dplyr::mutate(ci_width = log(confint_upper) - log(confint_lower)) %>%
dplyr::mutate(threshold = factor(x = threshold, levels = c("threshold_5", "threshold_20"), labels = c("5", "20")))
mean_ci_width <- to_plot %>% dplyr::summarize(m_width = mean(ci_width))
(mean_ci_width %>% dplyr::filter(threshold == "20") %>% dplyr::pull(m_width))/(mean_ci_width %>% dplyr::filter(threshold == "5") %>% dplyr::pull(m_width))
# Threshold = 20 CI width is 1.5 times the threshold = 5 CI width.
p4 <- ggplot(data = to_plot, mapping = aes(x = threshold, y = ci_width)) + geom_violin(fill = my_cols[1], alpha = 0.7, draw_quantiles = 0.5) +
theme_bw(base_size = 10) + xlab("Threshold") + ylab("CI width") + geom_hline(yintercept = 0) +
my_theme + scale_y_continuous(expand = c(NA, 0)) + theme(plot.margin = margin(0.1, 0.5, 0.1, 0.5, "cm"))
# e and f) gRNA count histograms
plotting_objects <- paste0(.get_config_path("LOCAL_CODE_DIR"), "glmeiv-manuscript/figures/plotting_objects.R")
source(plotting_objects)
set.seed(2)
gRNA_ids_gasp <- sample(x = get_feature_ids(gRNA_odm_gasp), size = 1, replace = FALSE)
gRNA_ids_xie <- sample(x = get_feature_ids(gRNA_odm_xie), size = 1, replace = FALSE)
xie_gRNA <- gRNA_odm_xie[[gRNA_ids_xie,]] %>% as.numeric()
gasp_gRNA <- gRNA_odm_gasp[[gRNA_ids_gasp,]] %>% as.numeric()
# plot histograms
p5 <- ggplot(data = xie_gRNA %>% tibble::tibble(count = .) %>%
dplyr::filter(count >= 1, count <= 40),
mapping = aes(x = count)) +
geom_histogram(binwidth = 2, col = "black", fill = my_cols[4], alpha = 0.7) +
scale_y_continuous(trans='log10', expand = c(0, NA)) + xlab("gRNA count (Xie)") + ylab("") +
theme_bw(base_size = 10) + my_theme + theme(plot.margin = margin(0.1, 0.5, 0.1, 0.5, "cm"))
p6 <- ggplot(data = gasp_gRNA %>% tibble::tibble(count = .) %>%
dplyr::filter(count >= 1, count <= 40),
mapping = aes(x = count)) +
geom_histogram(binwidth = 2, col = "black", fill = my_cols[4], alpha = 0.7) +
scale_y_continuous(trans='log10', expand = c(0, NA)) + xlab("gRNA count (Gasperini)") +
ylab("") + theme_bw(base_size = 10) + my_theme + theme(plot.margin = margin(0.1, 0.5, 0.1, 0.5, "cm"))
# combine plots
p_out <- plot_grid(p1, p2, p3, p4, p6, p5, labels = c("a", "b", "c", "d", "e", "f"),
ncol = 2, rel_heights = c(1, 1, 0.8), align = "vh")
ggsave(filename = paste0(fig_dir, "/plot.jpeg"), plot = p_out, device = "jpeg", scale = 1, width = 6, height = 6)
# combine plots
p_out <- plot_grid(p1, p2, p3, p4, p6, p5, labels = c("a", "b", "c", "d", "e", "f"),
ncol = 2, rel_heights = c(1, 1, 0.8), align = "vh", hjust = -0.25)
ggsave(filename = paste0(fig_dir, "/plot.jpeg"), plot = p_out, device = "jpeg", scale = 1, width = 6, height = 6)
