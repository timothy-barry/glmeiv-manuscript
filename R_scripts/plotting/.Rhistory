p4 <- ggplot(data = to_plot, mapping = aes(x = threshold, y = ci_width)) + geom_violin(fill = my_cols[1], alpha = 0.7, draw_quantiles = 0.5) +
theme_bw(base_size = 10) + xlab("Threshold") + ylab("CI width") + geom_hline(yintercept = 0) +
my_theme + scale_y_continuous(expand = c(NA, 0)) + theme(plot.margin = margin(0.5, 0.5, 0.5, 0.5, "cm"))
p4
# e and f) gRNA count histograms
plotting_objects <- paste0(.get_config_path("LOCAL_CODE_DIR"), "glmeiv-manuscript/figures/plotting_objects.R")
source(plotting_objects)
set.seed(2)
gRNA_ids_gasp <- sample(x = get_feature_ids(gRNA_odm_gasp), size = 1, replace = FALSE)
gRNA_ids_xie <- sample(x = get_feature_ids(gRNA_odm_xie), size = 1, replace = FALSE)
xie_gRNA <- gRNA_odm_xie[[gRNA_ids_xie,]] %>% as.numeric()
gasp_gRNA <- gRNA_odm_gasp[[gRNA_ids_gasp,]] %>% as.numeric()
# plot histograms
p5 <- ggplot(data = xie_gRNA %>% tibble::tibble(count = .) %>%
dplyr::filter(count >= 1, count <= 40),
mapping = aes(x = count)) +
geom_histogram(binwidth = 2, col = "black", fill = my_cols[4], alpha = 0.7) +
scale_y_continuous(trans='log10', expand = c(0, NA)) + xlab("gRNA count (Xie)") + ylab("") +
theme_bw(base_size = 10) + my_theme + theme(plot.margin = margin(0.5, 0.5, 0.5, 0.5, "cm"))
p5
p6
p6 <- ggplot(data = gasp_gRNA %>% tibble::tibble(count = .) %>%
dplyr::filter(count >= 1, count <= 40),
mapping = aes(x = count)) +
geom_histogram(binwidth = 2, col = "black", fill = my_cols[4], alpha = 0.7) +
scale_y_continuous(trans='log10', expand = c(0, NA)) + xlab("gRNA count (Gasperini)") +
ylab("") + theme_bw(base_size = 10) + my_theme + theme(plot.margin = margin(0.5, 0.5, 0.5, 0.5, "cm"))
p6
# combine plots
p_out <- plot_grid(p1, p2, p3, p4, p6, p5, labels = c("a", "b", "c", "d", "e", "f"),
ncol = 2, rel_heights = c(1,1,0.8), align = "vh")
p_out
ggsave(filename = paste0(fig_dir, "/plot.jpeg"), plot = p_out, device = "jpeg", scale = 1, width = 6, height = 6)
library(magrittr)
library(ggplot2)
library(cowplot)
my_cols <- c("firebrick3", "dodgerblue3", "orchid4", "lightskyblue3")
fig_dir <- paste0(.get_config_path("LOCAL_CODE_DIR"), "glmeiv-manuscript/figures/thresholding_empirical")
if (!dir.exists(fig_dir)) dir.create(fig_dir)
my_theme <- theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"))
# load the results
gasp_result_dir <- paste0(.get_config_path("LOCAL_GLMEIV_DATA_DIR"), "public/gasperini/results/")
thresh_res <- readRDS(paste0(gasp_result_dir, "thresholding_result_pc.rds"))
# study how choice of threshold influences results on Gasperini self TSS pairs
thresh_res_pc <- thresh_res %>% dplyr::filter(site_type == "selfTSS", parameter == "m_perturbation")
# Question 1. How do thresh = 1 and thresh = 5 compare on estimation?
thresh_res_pc_wide <- thresh_res_pc %>% dplyr::select(target, value, threshold, pair_id) %>%
tidyr::pivot_wider(id_cols = c("pair_id", "target"),
names_from = "threshold",
values_from = "value", names_prefix = "threshold_")
to_plot <- thresh_res_pc_wide %>% dplyr::filter(target == "estimate") %>% dplyr::select(threshold_1, threshold_5)
p1 <- ggplot(data = to_plot, mapping = aes(x = threshold_5, y = threshold_1)) + geom_point(alpha = 0.7, col = my_cols[2]) +
xlab("Fold change (thresh = 5)") + ylab("Fold change (thresh = 1)") +
geom_abline(slope = 1, intercept = 0) + theme_bw(base_size = 10) + my_theme +
theme(plot.margin = margin(0.1, 0.5, 0.1, 0.5, "cm"))
# threshold = 1 ests are bigger than (i.e., closer to one than) threshold = 5; this is attenuation bias due to the fact that excessively many unperturbed cells have been classified as perturbed.
# a) est. vs. est.
to_plot <- thresh_res_pc_wide %>% dplyr::filter(target == "estimate") %>% dplyr::select(threshold_5, threshold_20)
p2 <- ggplot(data = to_plot, mapping = aes(x = threshold_5, y = threshold_20)) + geom_point(alpha = 0.9, col = my_cols[2]) +
xlab("Fold change (thresh = 5)") + ylab("Fold change (thresh = 20)") + geom_abline(slope = 1, intercept = 0, lwd = 0.75) +
theme_bw(base_size = 10) + my_theme + theme(plot.margin = margin(0.1, 0.5, 0.1, 0.5, "cm"))
# b) p-value vs. p-value
to_plot <- thresh_res_pc_wide %>% dplyr::filter(target == "p_value") %>% dplyr::select(threshold_5, threshold_20)
p3 <- ggplot(data = to_plot, mapping = aes(x = -log(threshold_5, base = 10), y = -log(threshold_20, base = 10))) + geom_point(alpha = 0.7, col = my_cols[3]) +
xlab("-log p (thresh = 5)") + ylab("-log p (thresh = 20)") + geom_abline(slope = 1, intercept = 0) +
theme_bw(base_size = 10) + my_theme + theme(plot.margin = margin(0.1, 0.5, 0.1, 0.5, "cm"))
# c) CI width for threshold = 5 vs threshold = 20
to_plot <- thresh_res_pc_wide %>% dplyr::filter(target == c("confint_lower", "confint_upper")) %>% dplyr::select(-threshold_1) %>%
tidyr::pivot_longer(cols = c("threshold_5", "threshold_20"), names_to = "threshold") %>% dplyr::group_by(threshold) %>%
dplyr::group_modify(function(tbl, key) {
tidyr::pivot_wider(data = tbl, id_cols = "pair_id", names_from = "target", values_from = "value")
}) %>% dplyr::mutate(ci_width = log(confint_upper) - log(confint_lower)) %>%
dplyr::mutate(threshold = factor(x = threshold, levels = c("threshold_5", "threshold_20"), labels = c("5", "20")))
mean_ci_width <- to_plot %>% dplyr::summarize(m_width = mean(ci_width))
(mean_ci_width %>% dplyr::filter(threshold == "20") %>% dplyr::pull(m_width))/(mean_ci_width %>% dplyr::filter(threshold == "5") %>% dplyr::pull(m_width))
# Threshold = 20 CI width is 1.5 times the threshold = 5 CI width.
p4 <- ggplot(data = to_plot, mapping = aes(x = threshold, y = ci_width)) + geom_violin(fill = my_cols[1], alpha = 0.7, draw_quantiles = 0.5) +
theme_bw(base_size = 10) + xlab("Threshold") + ylab("CI width") + geom_hline(yintercept = 0) +
my_theme + scale_y_continuous(expand = c(NA, 0)) + theme(plot.margin = margin(0.1, 0.5, 0.1, 0.5, "cm"))
# e and f) gRNA count histograms
plotting_objects <- paste0(.get_config_path("LOCAL_CODE_DIR"), "glmeiv-manuscript/figures/plotting_objects.R")
source(plotting_objects)
set.seed(2)
gRNA_ids_gasp <- sample(x = get_feature_ids(gRNA_odm_gasp), size = 1, replace = FALSE)
gRNA_ids_xie <- sample(x = get_feature_ids(gRNA_odm_xie), size = 1, replace = FALSE)
xie_gRNA <- gRNA_odm_xie[[gRNA_ids_xie,]] %>% as.numeric()
gasp_gRNA <- gRNA_odm_gasp[[gRNA_ids_gasp,]] %>% as.numeric()
# plot histograms
p5 <- ggplot(data = xie_gRNA %>% tibble::tibble(count = .) %>%
dplyr::filter(count >= 1, count <= 40),
mapping = aes(x = count)) +
geom_histogram(binwidth = 2, col = "black", fill = my_cols[4], alpha = 0.7) +
scale_y_continuous(trans='log10', expand = c(0, NA)) + xlab("gRNA count (Xie)") + ylab("") +
theme_bw(base_size = 10) + my_theme + theme(plot.margin = margin(0.1, 0.5, 0.1, 0.5, "cm"))
p6 <- ggplot(data = gasp_gRNA %>% tibble::tibble(count = .) %>%
dplyr::filter(count >= 1, count <= 40),
mapping = aes(x = count)) +
geom_histogram(binwidth = 2, col = "black", fill = my_cols[4], alpha = 0.7) +
scale_y_continuous(trans='log10', expand = c(0, NA)) + xlab("gRNA count (Gasperini)") +
ylab("") + theme_bw(base_size = 10) + my_theme + theme(plot.margin = margin(0.1, 0.5, 0.1, 0.5, "cm"))
# combine plots
p_out <- plot_grid(p1, p2, p3, p4, p6, p5, labels = c("a", "b", "c", "d", "e", "f"),
ncol = 2, rel_heights = c(1, 1, 0.8), align = "vh")
ggsave(filename = paste0(fig_dir, "/plot.jpeg"), plot = p_out, device = "jpeg", scale = 1, width = 6, height = 6)
# combine plots
p_out <- plot_grid(p1, p2, p3, p4, p6, p5, labels = c("a", "b", "c", "d", "e", "f"),
ncol = 2, rel_heights = c(1, 1, 0.8), align = "vh", hjust = -0.25)
ggsave(filename = paste0(fig_dir, "/plot.jpeg"), plot = p_out, device = "jpeg", scale = 1, width = 6, height = 6)
load_all("~/research_code/glmeiv")
library(caret)
# prepare the data
papalexi_dir <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"), "data/papalexi/eccite_screen/")
gene_odm_fp <- paste0(papalexi_dir, "gene/matrix.odm")
grna_odm_fp <- paste0(papalexi_dir, "grna_expression/matrix.odm")
mm_metadata_fp <- paste0(papalexi_dir, "multimodal_metadata.rds")
mm_odm <- ondisc::read_multimodal_odm(odm_fps = c(gene_odm_fp, grna_odm_fp),
multimodal_metadata_fp = mm_metadata_fp)
covariate_mat <- mm_odm |> ondisc::get_cell_covariates()
covariate_mat_trans <- covariate_mat |>
dplyr::select(gene_n_nonzero, gene_n_umis, grna_expression_n_nonzero, grna_expression_n_umis, bio_rep) |>
dplyr::mutate(gene_n_nonzero = log(gene_n_nonzero),
gene_n_umis = log(gene_n_umis),
grna_expression_n_nonzero = log(grna_expression_n_nonzero),
grna_expression_n_umis = log(grna_expression_n_umis))
odm <- mm_odm |> ondisc::get_modality("grna_expression")
grna_mat <- odm[[1:nrow(odm),]] |> as.matrix()
grna_ids <- ondisc::get_feature_ids(odm)
# 0. identify the top 95% most highly expressed gRNAs -- analyze these
n_nonzero_per_grna <- rowSums(grna_mat >= 1)
cutoff <- quantile(n_nonzero_per_grna, probs = 0.05)
grnas_to_keep <- which(n_nonzero_per_grna > cutoff)
cellwise_grna_counts <- colSums(grna_mat)
# 1. loop over the grnas
output <- sapply(grnas_to_keep, function(grna_id) {
print(grna_id)
g <- grna_mat[grna_id,]
curr_grna_id <- grna_ids[grnas_to_keep[grna_id]]
# first, assign based on UMI counts; if g makes up more than 25% of the reads, assign
ratios <- g/cellwise_grna_counts
ground_truth_assignments <- ratios >= 0.25
# second, assign based on the mixture model
res <- assign_grnas_unimodal_mixture(g = g, g_fam = poisson() |> augment_family_object(),
covariate_matrix = covariate_mat_trans, g_offset = NULL)
mixture_assignments <- res$phat
# third assign according to the simple two-component gaussian
g_trans <- log2(g + 1)
simple_assignments <- tryCatch({
fit <- flexmix::flexmix(g_trans ~ 1, k = 2)
ifelse(fit@cluster == 2, "Perturbed", "Unperturbed") |> factor(levels = c("Perturbed", "Unperturbed"))
}, error = function(e) {
rep("Unperturbed", length(g_trans)) |> factor(levels = c("Perturbed", "Unperturbed"))
})
# compute the confusion matrix
ground_truth_assignments <- ifelse(ground_truth_assignments, "Perturbed", "Unperturbed") |> factor(levels = c("Perturbed", "Unperturbed"))
mixture_assignments <- ifelse(mixture_assignments == 0, "Unperturbed", "Perturbed") |> factor(levels = c("Perturbed", "Unperturbed"))
confusion_mat <- confusionMatrix(data = mixture_assignments, reference = ground_truth_assignments)
confusion_mat_simple <- confusionMatrix(data = simple_assignments, reference = ground_truth_assignments)
return(list(confusion_mat = confusion_mat, confusion_mat_simple = confusion_mat_simple, g = g,
mixture_assignments = mixture_assignments,
ground_truth_assignments = ground_truth_assignments,
curr_grna_id = curr_grna_id))
}, simplify = FALSE)
output[[1]]
output[[1]]$confusion_mat_simple
output[[2]]$confusion_mat_simple
output[[20]]$confusion_mat_simple
library(ggplot2)
library(cowplot)
to_read_dir <- paste0(.get_config_path("LOCAL_GLMEIV_DATA_DIR"), "public/aux/")
result <- readRDS(file = paste0(to_read_dir, "papalexi_unimodal_grna_assignments.rds"))
library(ggplot2)
library(cowplot)
to_read_dir <- paste0(.get_config_path("LOCAL_GLMEIV_DATA_DIR"), "public/aux/")
result <- readRDS(file = paste0(to_read_dir, "papalexi_unimodal_grna_assignments.rds"))
my_cols <- c("darkorchid1", "firebrick2")
# p_a: a plot of gRNA count vs. assignment (for both mixture model and ground truth)
grna_idx <- 2
grna_id <- result[[grna_idx]]$curr_grna_id
g <- result[[grna_idx]]$g
mixture_assignments <- result[[grna_idx]]$mixture_assignments
ground_truth_assignments <- result[[grna_idx]]$ground_truth_assignments
df <- data.frame(g = g,
mixture_assignment = mixture_assignments,
ground_truth_assignment = ground_truth_assignments)
p_a <- ggplot(data = df, mapping = aes(x = mixture_assignment, y = g, col = ground_truth_assignment)) +
geom_jitter(alpha = 0.8) +
scale_y_continuous(trans = "log1p", breaks = c(0, 1, 5, 20, 50, 200, 1000)) +
labs(color = "Ground truth\n assignment") +
xlab("Unimodal GLM-EIV assignment") +
ylab("gRNA count") +
ggtitle(paste0("Perturbation assignments\nfor gRNA ", grna_id)) +
sceptre:::get_my_theme() +
scale_color_manual(values = my_cols)
p_a
# p_b: get the confusion matrix and confusion matrix metrics for this gRNA
confusion_mat <- result[[grna_idx]]$confusion_mat
confusion_mat$overall
confusion_mat$overall
confusion_mat
confusion_mat
confusion_mat$byClass[["Sensitivity"]]
confusion_mat$byClass[["Specificity"]]
confusion_mat$byClass[["Balanced Accuracy"]]
library(ggplot2)
library(cowplot)
to_read_dir <- paste0(.get_config_path("LOCAL_GLMEIV_DATA_DIR"), "public/aux/")
result <- readRDS(file = paste0(to_read_dir, "papalexi_unimodal_grna_assignments.rds"))
my_cols <- c("darkorchid1", "firebrick2")
# p_a: a plot of gRNA count vs. assignment (for both mixture model and ground truth)
grna_idx <- 2
grna_id <- result[[grna_idx]]$curr_grna_id
g <- result[[grna_idx]]$g
mixture_assignments <- result[[grna_idx]]$mixture_assignments
ground_truth_assignments <- result[[grna_idx]]$ground_truth_assignments
df <- data.frame(g = g,
mixture_assignment = mixture_assignments,
ground_truth_assignment = ground_truth_assignments)
p_a <- ggplot(data = df, mapping = aes(x = mixture_assignment, y = g, col = ground_truth_assignment)) +
geom_jitter(alpha = 0.8) +
scale_y_continuous(trans = "log1p", breaks = c(0, 1, 5, 20, 50, 200, 1000)) +
labs(color = "Ground truth\n assignment") +
xlab("Unimodal GLM-EIV assignment") +
ylab("gRNA count") +
ggtitle(paste0("Perturbation assignments\nfor gRNA ", grna_id)) +
sceptre:::get_my_theme() +
scale_color_manual(values = my_cols)
p_a
# p_b: get the confusion matrix and confusion matrix metrics for this gRNA
confusion_mat <- result[[grna_idx]]$confusion_mat
confusion_mat
# p_c: plot the sensitivity, specificity, and accuracy across gRNAs
sensitivities <- sapply(X = result, FUN = function(l) l$confusion_mat$byClass[["Sensitivity"]]) |> unlist()
specificities <- sapply(X = result, FUN = function(l) l$confusion_mat$byClass[["Specificity"]]) |> unlist()
accuracies <- sapply(X = result, FUN = function(l) l$confusion_mat$byClass[["Balanced Accuracy"]]) |> unlist()
df_2 <- data.frame(Sensitivity = sensitivities,
Specificity = specificities,
Accuracy = accuracies) |>
tidyr::pivot_longer(cols = c("Sensitivity", "Specificity", "Balanced accuracy"),
names_to = "metric")
df_2 |> dplyr::group_by(metric) |> dplyr::summarize(m = mean(value))
df_2 <- data.frame(Sensitivity = sensitivities,
Specificity = specificities,
Accuracy = accuracies) |>
tidyr::pivot_longer(cols = c("Sensitivity", "Specificity", "Balanced accuracy"),
names_to = "metric")
# p_c: plot the sensitivity, specificity, and accuracy across gRNAs
sensitivities <- sapply(X = result, FUN = function(l) l$confusion_mat$byClass[["Sensitivity"]]) |> unlist()
specificities <- sapply(X = result, FUN = function(l) l$confusion_mat$byClass[["Specificity"]]) |> unlist()
accuracies <- sapply(X = result, FUN = function(l) l$confusion_mat$byClass[["Balanced Accuracy"]]) |> unlist()
data.frame(Sensitivity = sensitivities,
Specificity = specificities,
Accuracy = accuracies)
data.frame(Sensitivity = sensitivities,
Specificity = specificities,
"Balanced accuracy" = accuracies)
df_2 <- data.frame(Sensitivity = sensitivities,
Specificity = specificities,
'Balanced accuracy' = accuracies)
head(df_2)
df_2 <- data.frame(Sensitivity = sensitivities,
Specificity = specificities,
'Balanced_accuracy' = accuracies)
head(df_2 <- data.frame(Sensitivity = sensitivities,
Specificity = specificities,
'Balanced_accuracy' = accuracies))
data.frame(Sensitivity = sensitivities,
Specificity = specificities,
"Balanced_accuracy" = accuracies) |>
dplyr::rename("Balanced accuracy" = "Balanced_accuracy")
df_2 <- data.frame(Sensitivity = sensitivities,
Specificity = specificities,
"Balanced_accuracy" = accuracies) |>
dplyr::rename("Balanced accuracy" = "Balanced_accuracy") |>
tidyr::pivot_longer(cols = c("Sensitivity", "Specificity", "Balanced accuracy"),
names_to = "metric")
df_2
head(df_2)
df_2 |> dplyr::group_by(metric) |> dplyr::summarize(m = mean(value))
df_2
sensitivities
specificities
accuracies
sensitivities
grna_idx
confusion_mat$byClass[["Sensitivity"]]
confusion_mat$byClass[["Sensitivity"]]
confusion_mat$byClass[["Specificity"]]
confusion_mat$byClass[["Balanced Accuracy"]]
confusion_mat
confusion_mat$byClass[["Sensitivity"]]
confusion_mat$byClass[["Specificity"]]
confusion_mat$byClass[["Balanced Accuracy"]]
# p_c: plot the sensitivity, specificity, and accuracy across gRNAs
sensitivities <- sapply(X = result, FUN = function(l) l$confusion_mat$byClass[["Sensitivity"]]) |> unlist()
specificities <- sapply(X = result, FUN = function(l) l$confusion_mat$byClass[["Specificity"]]) |> unlist()
confusion_mat
# p_c: plot the sensitivity, specificity, and accuracy across gRNAs
sensitivities <- sapply(X = result, FUN = function(l) l$confusion_mat$byClass[["Sensitivity"]]) |> unlist()
specificities <- sapply(X = result, FUN = function(l) l$confusion_mat$byClass[["Specificity"]]) |> unlist()
specificities
sensitivities
load_all("~/research_code/glmeiv")
library(caret)
# prepare the data
papalexi_dir <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"), "data/papalexi/eccite_screen/")
gene_odm_fp <- paste0(papalexi_dir, "gene/matrix.odm")
grna_odm_fp <- paste0(papalexi_dir, "grna_expression/matrix.odm")
mm_metadata_fp <- paste0(papalexi_dir, "multimodal_metadata.rds")
mm_odm <- ondisc::read_multimodal_odm(odm_fps = c(gene_odm_fp, grna_odm_fp),
multimodal_metadata_fp = mm_metadata_fp)
covariate_mat <- mm_odm |> ondisc::get_cell_covariates()
covariate_mat_trans <- covariate_mat |>
dplyr::select(gene_n_nonzero, gene_n_umis, grna_expression_n_nonzero, grna_expression_n_umis, bio_rep) |>
dplyr::mutate(gene_n_nonzero = log(gene_n_nonzero),
gene_n_umis = log(gene_n_umis),
grna_expression_n_nonzero = log(grna_expression_n_nonzero),
grna_expression_n_umis = log(grna_expression_n_umis))
odm <- mm_odm |> ondisc::get_modality("grna_expression")
grna_mat <- odm[[1:nrow(odm),]] |> as.matrix()
grna_ids_str <- ondisc::get_feature_ids(odm)
# 0. identify the top 95% most highly expressed gRNAs -- analyze these
n_nonzero_per_grna <- rowSums(grna_mat >= 1)
cutoff <- quantile(n_nonzero_per_grna, probs = 0.05)
grnas_to_keep <- which(n_nonzero_per_grna > cutoff)
cellwise_grna_counts <- colSums(grna_mat)
grna_id <- grnas_to_keep[12]
print(grna_id)
g <- grna_mat[grna_id,]
curr_grna_id <- grna_ids_str[grna_id]
# first, assign based on UMI counts; if g makes up more than 25% of the reads, assign
ratios <- g/cellwise_grna_counts
ground_truth_assignments <- ratios >= 0.25
# second, assign based on the mixture model
res <- assign_grnas_unimodal_mixture(g = g, g_fam = poisson() |> augment_family_object(),
covariate_matrix = covariate_mat_trans, g_offset = NULL)
res
mixture_assignments <- res$phat
head(mixture_assignments)
tail(mixture_assignments)
table(mixture_assignments)
# third assign according to the simple two-component gaussian
g_trans <- log2(g + 1)
simple_assignments <- tryCatch({
fit <- flexmix::flexmix(g_trans ~ 1, k = 2)
ifelse(fit@cluster == 2, "Perturbed", "Unperturbed") |> factor(levels = c("Perturbed", "Unperturbed"))
}, error = function(e) {
rep("Unperturbed", length(g_trans)) |> factor(levels = c("Perturbed", "Unperturbed"))
})
# compute the confusion matrix
ground_truth_assignments <- ifelse(ground_truth_assignments, "Perturbed", "Unperturbed") |> factor(levels = c("Perturbed", "Unperturbed"))
mixture_assignments <- ifelse(mixture_assignments == 0, "Unperturbed", "Perturbed") |> factor(levels = c("Perturbed", "Unperturbed"))
confusion_mat <- confusionMatrix(data = mixture_assignments, reference = ground_truth_assignments)
confusion_mat
ground_truth_assignments
all(ground_truth_assignments == "Unperturbed")
ground_truth_assignments
ground_truth_assignments <- ratios >= 0.25
ground_truth_assignments
all(!ground_truth_assignments)
load_all("~/research_code/glmeiv")
library(caret)
# prepare the data
papalexi_dir <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"), "data/papalexi/eccite_screen/")
gene_odm_fp <- paste0(papalexi_dir, "gene/matrix.odm")
grna_odm_fp <- paste0(papalexi_dir, "grna_expression/matrix.odm")
mm_metadata_fp <- paste0(papalexi_dir, "multimodal_metadata.rds")
mm_odm <- ondisc::read_multimodal_odm(odm_fps = c(gene_odm_fp, grna_odm_fp),
multimodal_metadata_fp = mm_metadata_fp)
covariate_mat <- mm_odm |> ondisc::get_cell_covariates()
covariate_mat_trans <- covariate_mat |>
dplyr::select(gene_n_nonzero, gene_n_umis, grna_expression_n_nonzero, grna_expression_n_umis, bio_rep) |>
dplyr::mutate(gene_n_nonzero = log(gene_n_nonzero),
gene_n_umis = log(gene_n_umis),
grna_expression_n_nonzero = log(grna_expression_n_nonzero),
grna_expression_n_umis = log(grna_expression_n_umis))
odm <- mm_odm |> ondisc::get_modality("grna_expression")
grna_mat <- odm[[1:nrow(odm),]] |> as.matrix()
grna_ids_str <- ondisc::get_feature_ids(odm)
# 0. identify the top 95% most highly expressed gRNAs -- analyze these
n_nonzero_per_grna <- rowSums(grna_mat >= 1)
cutoff <- quantile(n_nonzero_per_grna, probs = 0.05)
grnas_to_keep <- which(n_nonzero_per_grna > cutoff)
cellwise_grna_counts <- colSums(grna_mat)
# 1. loop over the grnas
output <- sapply(grnas_to_keep, function(grna_id) {
print(grna_id)
g <- grna_mat[grna_id,]
curr_grna_id <- grna_ids_str[grna_id]
# first, assign based on UMI counts; if g makes up more than 25% of the reads, assign
ratios <- g/cellwise_grna_counts
ground_truth_assignments <- ratios >= 0.25
if (all(!ground_truth_assignments)) {
return(NULL)
}
# second, assign based on the mixture model
res <- assign_grnas_unimodal_mixture(g = g, g_fam = poisson() |> augment_family_object(),
covariate_matrix = covariate_mat_trans, g_offset = NULL)
mixture_assignments <- res$phat
# third assign according to the simple two-component gaussian
g_trans <- log2(g + 1)
simple_assignments <- tryCatch({
fit <- flexmix::flexmix(g_trans ~ 1, k = 2)
ifelse(fit@cluster == 2, "Perturbed", "Unperturbed") |> factor(levels = c("Perturbed", "Unperturbed"))
}, error = function(e) {
rep("Unperturbed", length(g_trans)) |> factor(levels = c("Perturbed", "Unperturbed"))
})
# compute the confusion matrix
ground_truth_assignments <- ifelse(ground_truth_assignments, "Perturbed", "Unperturbed") |> factor(levels = c("Perturbed", "Unperturbed"))
mixture_assignments <- ifelse(mixture_assignments == 0, "Unperturbed", "Perturbed") |> factor(levels = c("Perturbed", "Unperturbed"))
confusion_mat <- confusionMatrix(data = mixture_assignments, reference = ground_truth_assignments)
confusion_mat_simple <- confusionMatrix(data = simple_assignments, reference = ground_truth_assignments)
return(list(confusion_mat = confusion_mat, confusion_mat_simple = confusion_mat_simple, g = g,
mixture_assignments = mixture_assignments,
ground_truth_assignments = ground_truth_assignments,
curr_grna_id = curr_grna_id))
}, simplify = FALSE)
output
lapply(output, is.nul,)
lapply(output, is.null)
sapply(output, is.null)
is_null <- sapply(output, is.null)
output <- output[!is.null(output)]
length(output)
sapply(output, is.null)
!is.null(output)
!is.null(output)
length(output)
!is_null
output <- output[!is_null]
length(output)
sapply(output, is.null)
# save the output
to_save_dir <- paste0(.get_config_path("LOCAL_GLMEIV_DATA_DIR"), "public/aux/")
saveRDS(object = output, file = paste0(to_save_dir, "papalexi_unimodal_grna_assignments.rds"))
library(ggplot2)
library(cowplot)
# create plots related to unimodal gRNA assignments
to_read_dir <- paste0(.get_config_path("LOCAL_GLMEIV_DATA_DIR"), "public/aux/")
result <- readRDS(file = paste0(to_read_dir, "papalexi_unimodal_grna_assignments.rds"))
my_cols <- c("darkorchid1", "firebrick2")
# p_a: a plot of gRNA count vs. assignment (for both mixture model and ground truth)
grna_idx <- 2
grna_id <- result[[grna_idx]]$curr_grna_id
g <- result[[grna_idx]]$g
mixture_assignments <- result[[grna_idx]]$mixture_assignments
ground_truth_assignments <- result[[grna_idx]]$ground_truth_assignments
df <- data.frame(g = g,
mixture_assignment = mixture_assignments,
ground_truth_assignment = ground_truth_assignments)
p_a <- ggplot(data = df, mapping = aes(x = mixture_assignment, y = g, col = ground_truth_assignment)) +
geom_jitter(alpha = 0.8) +
scale_y_continuous(trans = "log1p", breaks = c(0, 1, 5, 20, 50, 200, 1000)) +
labs(color = "Ground truth\n assignment") +
xlab("Unimodal GLM-EIV assignment") +
ylab("gRNA count") +
ggtitle(paste0("Perturbation assignments\nfor gRNA ", grna_id)) +
sceptre:::get_my_theme() +
scale_color_manual(values = my_cols)
p_a
# p_b: get the confusion matrix and confusion matrix metrics for this gRNA
confusion_mat <- result[[grna_idx]]$confusion_mat
confusion_mat$byClass[["Sensitivity"]]
confusion_mat$byClass[["Specificity"]]
confusion_mat$byClass[["Balanced Accuracy"]]
# p_c: plot the sensitivity, specificity, and accuracy across gRNAs
sensitivities <- sapply(X = result, FUN = function(l) l$confusion_mat$byClass[["Sensitivity"]]) |> unlist()
specificities <- sapply(X = result, FUN = function(l) l$confusion_mat$byClass[["Specificity"]]) |> unlist()
accuracies <- sapply(X = result, FUN = function(l) l$confusion_mat$byClass[["Balanced Accuracy"]]) |> unlist()
head(sensitivities)
head(specificities)
head(accuracies)
specificities
head(sensitivities)
sensitivities
accuracies <- sapply(X = result, FUN = function(l) l$confusion_mat$byClass[["Balanced Accuracy"]]) |> unlist()
accuracies
df_2 <- data.frame(Sensitivity = sensitivities,
Specificity = specificities,
"Balanced_accuracy" = accuracies) |>
dplyr::rename("Balanced accuracy" = "Balanced_accuracy") |>
tidyr::pivot_longer(cols = c("Sensitivity", "Specificity", "Balanced accuracy"),
names_to = "metric")
head(df_@)
head(df_2)
df_2 |> dplyr::group_by(metric) |> dplyr::summarize(m = mean(value))
p_c <- ggplot(data = df_2, mapping = aes(y = value)) +
geom_boxplot(fill = "dodgerblue", outlier.size = 0.8) + facet_wrap(metric ~ ., scales = "free_y") +
sceptre:::get_my_theme() +
theme(axis.ticks.x = element_blank(), axis.text.x = element_blank(),
axis.title.y = element_blank()) +
ggtitle("Classification metrics across all gRNAs")
p_c
# create cowplot
p <- plot_grid(p_a, NULL, p_c, NULL, labels = c("a", "b", "c", "d"), nrow = 2, rel_widths = c(0.6, 0.3), rel_heights = c(0.6, 0.4))
p
head(df_2)
df_2 |> dplyr::group_by(metric) |> dplyr::summarize(m = mean(value))
p_c <- ggplot(data = df_2, mapping = aes(y = value)) +
geom_boxplot(fill = "dodgerblue", outlier.size = 0.8) + facet_wrap(metric ~ ., scales = "free_y") +
sceptre:::get_my_theme() +
theme(axis.ticks.x = element_blank(), axis.text.x = element_blank(),
axis.title.y = element_blank()) +
ggtitle("Classification metrics across all gRNAs")
l
# also, compute these metrics for the replogle method
sensitivities <- sapply(X = result, FUN = function(l) l$confusion_mat_simple$byClass[["Sensitivity"]]) |> unlist()
specificities <- sapply(X = result, FUN = function(l) l$confusion_mat_simple$byClass[["Specificity"]]) |> unlist()
accuracies <- sapply(X = result, FUN = function(l) l$confusion_mat_simple$byClass[["Balanced Accuracy"]]) |> unlist()
sensitivities
specificities
accuracies
