f_name <- paste0(fig_dir, "/ggplot.jpg")
ggsave(filename = f_name, plot = p_out, device = "jpg", scale = 1, width = 7, height = 6, dpi = 320)
# set up cowplot
p_out <- plot_grid(NULL, p1, NULL, NULL, labels = c("a", "c", "b", "d"), nrow = 2, rel_heights = c(0.5, 0.5))
f_name <- paste0(fig_dir, "/ggplot.jpg")
ggsave(filename = f_name, plot = p_out, device = "jpg", scale = 1, width = 7, height = 6, dpi = 320)
p1 <- ggplot(data = to_plot, mapping = aes(x = x, y = y, col = Status)) +
facet_grid(modality~.) + ylab("Density") + xlab("Expression") + theme_bw() +
theme(legend.position="bottom") + theme(legend.position="bottom", legend.title=element_blank()) +
geom_vline(data = dplyr::filter(to_plot, modality == "gene"), mapping = aes(xintercept = -0.4), col = "darkred") +
geom_vline(data = dplyr::filter(to_plot, modality == "gene"), mapping = aes(xintercept = 0.0), col = "darkred") +
geom_hline(yintercept = 0) + scale_y_continuous(expand = c(0, 0.05)) +
scale_color_manual(values = c(my_cols[2], my_cols[3])) + geom_line(lwd = 1.1) +
theme(legend.position = c(0.77, 0.85), legend.title = element_blank(),
panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line.y = element_line(colour = "black"))
p1
p1 <- ggplot(data = to_plot, mapping = aes(x = x, y = y, col = Status)) +
facet_grid(modality~.) + ylab("Density") + xlab("Expression") + theme_bw() +
theme(legend.position="bottom") + theme(legend.position="bottom", legend.title=element_blank()) +
geom_vline(data = dplyr::filter(to_plot, modality == "gene"), mapping = aes(xintercept = -0.4), col = "darkred") +
geom_vline(data = dplyr::filter(to_plot, modality == "gene"), mapping = aes(xintercept = 0.0), col = "darkred") +
geom_hline(yintercept = 0) + scale_y_continuous(expand = c(0, 0.05)) +
scale_color_manual(values = c(my_cols[2], "black")) + geom_line(lwd = 1.1) +
theme(legend.position = c(0.77, 0.85), legend.title = element_blank(),
panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line.y = element_line(colour = "black"))
p1
# set up cowplot
p_out <- plot_grid(NULL, p1, NULL, NULL, labels = c("a", "c", "b", "d"), nrow = 2, rel_heights = c(0.5, 0.5))
p_out
ggsave(filename = f_name, plot = p_out, device = "jpg", scale = 1, width = 7, height = 6, dpi = 320)
p1 <- ggplot(data = to_plot, mapping = aes(x = x, y = y, col = Status)) +
facet_grid(modality~.) + ylab("Density") + xlab("Expression") + theme_bw() +
theme(legend.position="bottom") + theme(legend.position="bottom", legend.title=element_blank()) +
geom_vline(data = dplyr::filter(to_plot, modality == "gene"), mapping = aes(xintercept = -0.4), col = "darkred") +
geom_vline(data = dplyr::filter(to_plot, modality == "gene"), mapping = aes(xintercept = 0.0), col = "darkred") +
geom_hline(yintercept = 0) + scale_y_continuous(expand = c(0, 0.05)) + scale_x_continuous(expand = c(0, 0.05)) +
scale_color_manual(values = c(my_cols[2], "black")) + geom_line(lwd = 1.1) +
theme(legend.position = c(0.77, 0.85), legend.title = element_blank(),
panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line.y = element_line(colour = "black"))
p1
p1 <- ggplot(data = to_plot, mapping = aes(x = x, y = y, col = Status)) +
facet_grid(modality~.) + ylab("Density") + xlab("Expression") + theme_bw() +
theme(legend.position="bottom") + theme(legend.position="bottom", legend.title=element_blank()) +
geom_vline(data = dplyr::filter(to_plot, modality == "gene"), mapping = aes(xintercept = -0.4), col = "darkred") +
geom_vline(data = dplyr::filter(to_plot, modality == "gene"), mapping = aes(xintercept = 0.0), col = "darkred") +
geom_hline(yintercept = 0) + scale_y_continuous(expand = c(0, 0.05)) + scale_x_continuous(expand = c(0, 0)) +
scale_color_manual(values = c(my_cols[2], "black")) + geom_line(lwd = 1.1) +
theme(legend.position = c(0.77, 0.85), legend.title = element_blank(),
panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line.y = element_line(colour = "black"))
p1
# set up cowplot
p_out <- plot_grid(NULL, p1, NULL, NULL, labels = c("a", "c", "b", "d"), nrow = 2, rel_heights = c(0.5, 0.5))
f_name <- paste0(fig_dir, "/ggplot.jpg")
ggsave(filename = f_name, plot = p_out, device = "jpg", scale = 1, width = 7, height = 6, dpi = 320)
# set up cowplot
p_out <- plot_grid(NULL, p1, NULL, NULL, labels = c("a", "c", "b", "d"), nrow = 2, rel_heights = c(0.5, 0.5))
f_name <- paste0(fig_dir, "/ggplot.pdf")
ggsave(filename = f_name, plot = p_out, device = "pdf", scale = 1, width = 7, height = 6, dpi = 320)
library(dplyr)
library(ggplot2)
load_all("~/research_code/simulatr/")
my_cols <- c("firebrick3", "dodgerblue3", "orchid4")
fig_dir <- paste0(.get_config_path("LOCAL_CODE_DIR"), "glmeiv-manuscript/figures/main_text_sim")
if (!dir.exists(fig_dir)) dir.create(fig_dir)
my_theme <- theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"))
# load the results and specifier objects
sim_result_dir <- paste0(.get_config_path("LOCAL_GLMEIV_DATA_DIR"), "public/simulations/results")
sim_spec_dir <- paste0(.get_config_path("LOCAL_GLMEIV_DATA_DIR"), "public/simulations/spec_objects")
############
# 1. Poisson
############
pois_res <- readRDS(paste0(sim_result_dir, "/raw_result_0.rds")) %>% tibble()
pois_res$target[pois_res$target == "confint_higher"] <- "confint_upper"
pois_spec <- readRDS(paste0(sim_spec_dir, "/sim_spec_0.rds"))
# summarize the results
summarized_pois_results <- summarize_results(sim_spec = pois_spec, sim_res = pois_res,
metrics = c("bias", "mse", "coverage", "count", "time"),
parameters = "m_perturbation") %>% mutate(distribution = "Poisson")
# remove times with 0 counts
thresh_grid_row_exclude <- summarized_pois_results %>% filter(metric == "count", value == 0) %>% dplyr::pull(grid_row_id)
summarized_pois_results_trimmed <- summarized_pois_results %>%
filter(!(grid_id %in% thresh_grid_row_exclude & method == "thresholding"))
summarized_pois_results_trimmed
#######
# 2. NB
#######
nb_res <- readRDS(paste0(sim_result_dir, "/raw_result_1.rds")) %>% tibble()
nb_res$target[nb_res$target == "confint_higher"] <- "confint_upper"
nb_spec <- readRDS(paste0(sim_spec_dir, "/sim_spec_1.rds"))
# summarize the results
summarized_nb_results <- summarize_results(sim_spec = nb_spec, sim_res = nb_res,
metrics = c("bias", "mse", "coverage", "count", "time"),
parameters = "m_perturbation")
thresh_grid_row_exclude <- summarized_nb_results %>% filter(metric == "count", value == 0) %>% dplyr::pull(grid_row_id)
summarized_nb_results_trimmed <- summarized_nb_results %>%
filter(!(grid_id %in% thresh_grid_row_exclude & method == "thresholding")) %>%
mutate(distribution = ifelse(fam_str == "nb_theta_known", "NB (theta known)", "NB (theta est.)")) %>%
select(-g_fam, -m_fam, -run_unknown_theta_precomputation, -fam_str)
##################
# 3. Make the plot
##################
to_plot_all <- rbind(summarized_pois_results_trimmed, summarized_nb_results_trimmed) %>% filter(metric != "count") %>%
mutate(metric_fct = factor(metric, levels = c("bias", "mse", "coverage", "time"),
labels = c("Bias", "MSE", "Coverage", "Time (s)")),
Method = factor(method, levels = c("glmeiv_slow", "glmeiv_fast", "thresholding"),
labels = c("GLM-EIV", "GLM-EIV (accelerated)", "Thresholding")),
distribution = factor(distribution, levels = c("Poisson", "NB (theta known)", "NB (theta est.)"),
labels = c("Poisson", "NB (theta known)", "NB (theta est.)"))) %>%
arrange(Method) %>% mutate(exp_g_perturbation = exp(g_perturbation))
p <- ggplot(data = to_plot_all, mapping = aes(x = exp_g_perturbation, y = value, col = Method)) +
facet_grid(metric_fct ~ distribution, scales = "free") + xlab(expression(exp(beta[g]))) + scale_color_manual(values = my_cols) +
geom_hline(data = dplyr::filter(to_plot_all, metric_fct == "Bias"), mapping = aes(yintercept = 0), colour = "black") +
geom_hline(data = dplyr::filter(to_plot_all, metric_fct == "MSE"), mapping = aes(yintercept = 0), colour = "black") +
geom_hline(data = dplyr::filter(to_plot_all, metric_fct == "Coverage"), mapping = aes(yintercept = 0.95), colour = "black") +
geom_line() + geom_point() +
theme_bw() + theme(legend.position = "bottom", panel.grid.major = element_blank(), panel.grid.minor = element_blank()) + ylab("")
p
library(dplyr)
library(ggplot2)
load_all("~/research_code/simulatr/")
my_cols <- c("firebrick3", "dodgerblue3", "orchid4")
fig_dir <- paste0(.get_config_path("LOCAL_CODE_DIR"), "glmeiv-manuscript/figures/main_text_sim")
if (!dir.exists(fig_dir)) dir.create(fig_dir)
my_theme <- theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"))
# load the results and specifier objects
sim_result_dir <- paste0(.get_config_path("LOCAL_GLMEIV_DATA_DIR"), "public/simulations/results")
sim_spec_dir <- paste0(.get_config_path("LOCAL_GLMEIV_DATA_DIR"), "public/simulations/spec_objects")
############
# 1. Poisson
############
pois_res <- readRDS(paste0(sim_result_dir, "/raw_result_0.rds")) %>% tibble()
pois_res$target[pois_res$target == "confint_higher"] <- "confint_upper"
pois_spec <- readRDS(paste0(sim_spec_dir, "/sim_spec_0.rds"))
pois_res
library(dplyr)
library(ggplot2)
load_all("~/research_code/simulatr/")
my_cols <- c("firebrick3", "dodgerblue3", "orchid4")
fig_dir <- paste0(.get_config_path("LOCAL_CODE_DIR"), "glmeiv-manuscript/figures/main_text_sim")
if (!dir.exists(fig_dir)) dir.create(fig_dir)
my_theme <- theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"))
# load the results and specifier objects
sim_result_dir <- paste0(.get_config_path("LOCAL_GLMEIV_DATA_DIR"), "public/simulations/results")
sim_spec_dir <- paste0(.get_config_path("LOCAL_GLMEIV_DATA_DIR"), "public/simulations/spec_objects")
############
# 1. Poisson
############
pois_res <- readRDS(paste0(sim_result_dir, "/raw_result_0.rds")) %>% tibble()
pois_res$target[pois_res$target == "confint_higher"] <- "confint_upper"
pois_spec <- readRDS(paste0(sim_spec_dir, "/sim_spec_0.rds"))
pois_res
pois_res$grid_row_id %>% unqiue()
pois_res$grid_row_id %>% unique()
pois_res %>% filter(parameter == "m_perturbation")
pois_res %>% filter(parameter == "m_perturbation", target == "estimate")
pois_res %>% filter(parameter == "m_perturbation", target == "estimate") %>% pull(value) %>% hist()
pois_res %>% filter(parameter == "m_perturbation", target == "estimate", method == "glmeiv_fast") %>% pull(value) %>% hist()
pois_res %>% filter(parameter == "m_perturbation", target == "estimate", method == "glmeiv_slow") %>% pull(value) %>% hist()
# summarize the results
summarized_pois_results <- summarize_results(sim_spec = pois_spec, sim_res = pois_res,
metrics = c("bias", "mse", "coverage", "count", "time"),
parameters = "m_perturbation") %>% mutate(distribution = "Poisson")
# remove times with 0 counts
thresh_grid_row_exclude <- summarized_pois_results %>% filter(metric == "count", value == 0) %>% dplyr::pull(grid_row_id)
summarized_pois_results_trimmed <- summarized_pois_results %>%
filter(!(grid_id %in% thresh_grid_row_exclude & method == "thresholding"))
summarized_pois_results_trimmed
View(summarized_pois_results_trimmed)
#######
# 2. NB
#######
nb_res <- readRDS(paste0(sim_result_dir, "/raw_result_1.rds")) %>% tibble()
nb_res$target[nb_res$target == "confint_higher"] <- "confint_upper"
nb_spec <- readRDS(paste0(sim_spec_dir, "/sim_spec_1.rds"))
# summarize the results
summarized_nb_results <- summarize_results(sim_spec = nb_spec, sim_res = nb_res,
metrics = c("bias", "mse", "coverage", "count", "time"),
parameters = "m_perturbation")
thresh_grid_row_exclude <- summarized_nb_results %>% filter(metric == "count", value == 0) %>% dplyr::pull(grid_row_id)
summarized_nb_results_trimmed <- summarized_nb_results %>%
filter(!(grid_id %in% thresh_grid_row_exclude & method == "thresholding")) %>%
mutate(distribution = ifelse(fam_str == "nb_theta_known", "NB (theta known)", "NB (theta est.)")) %>%
select(-g_fam, -m_fam, -run_unknown_theta_precomputation, -fam_str)
##################
# 3. Make the plot
##################
to_plot_all <- rbind(summarized_pois_results_trimmed, summarized_nb_results_trimmed) %>% filter(metric != "count") %>%
mutate(metric_fct = factor(metric, levels = c("bias", "mse", "coverage", "time"),
labels = c("Bias", "MSE", "Coverage", "Time (s)")),
Method = factor(method, levels = c("glmeiv_slow", "glmeiv_fast", "thresholding"),
labels = c("GLM-EIV", "GLM-EIV (accelerated)", "Thresholding")),
distribution = factor(distribution, levels = c("Poisson", "NB (theta known)", "NB (theta est.)"),
labels = c("Poisson", "NB (theta known)", "NB (theta est.)"))) %>%
arrange(Method) %>% mutate(exp_g_perturbation = exp(g_perturbation))
p <- ggplot(data = to_plot_all, mapping = aes(x = exp_g_perturbation, y = value, col = Method)) +
facet_grid(metric_fct ~ distribution, scales = "free") + xlab(expression(exp(beta[g]))) + scale_color_manual(values = my_cols) +
geom_hline(data = dplyr::filter(to_plot_all, metric_fct == "Bias"), mapping = aes(yintercept = 0), colour = "black") +
geom_hline(data = dplyr::filter(to_plot_all, metric_fct == "MSE"), mapping = aes(yintercept = 0), colour = "black") +
geom_hline(data = dplyr::filter(to_plot_all, metric_fct == "Coverage"), mapping = aes(yintercept = 0.95), colour = "black") +
geom_line() + geom_point() +
theme_bw() + theme(legend.position = "bottom", panel.grid.major = element_blank(), panel.grid.minor = element_blank()) + ylab("")
p
library(dplyr)
library(ggplot2)
load_all("~/research_code/simulatr/")
my_cols <- c("firebrick3", "dodgerblue3", "orchid4")
fig_dir <- paste0(.get_config_path("LOCAL_CODE_DIR"), "glmeiv-manuscript/figures/main_text_sim")
if (!dir.exists(fig_dir)) dir.create(fig_dir)
my_theme <- theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"))
# load the results and specifier objects
sim_result_dir <- paste0(.get_config_path("LOCAL_GLMEIV_DATA_DIR"), "public/simulations/results")
sim_spec_dir <- paste0(.get_config_path("LOCAL_GLMEIV_DATA_DIR"), "public/simulations/spec_objects")
############
# 1. Poisson
############
pois_res <- readRDS(paste0(sim_result_dir, "/raw_result_0.rds")) %>% tibble()
pois_res$target[pois_res$target == "confint_higher"] <- "confint_upper"
pois_spec <- readRDS(paste0(sim_spec_dir, "/sim_spec_0.rds"))
# summarize the results
summarized_pois_results <- summarize_results(sim_spec = pois_spec, sim_res = pois_res,
metrics = c("bias", "mse", "coverage", "count", "time"),
parameters = "m_perturbation") %>% mutate(distribution = "Poisson")
# summarize the results
summarized_pois_results <- summarize_results(sim_spec = pois_spec, sim_res = pois_res,
metrics = c("bias", "mse", "coverage", "ci_width", "count", "time"),
parameters = "m_perturbation") %>% mutate(distribution = "Poisson")
# remove times with 0 counts
thresh_grid_row_exclude <- summarized_pois_results %>% filter(metric == "count", value == 0) %>% dplyr::pull(grid_row_id)
summarized_pois_results_trimmed <- summarized_pois_results %>%
filter(!(grid_id %in% thresh_grid_row_exclude & method == "thresholding"))
#######
# 2. NB
#######
nb_res <- readRDS(paste0(sim_result_dir, "/raw_result_1.rds")) %>% tibble()
nb_res$target[nb_res$target == "confint_higher"] <- "confint_upper"
nb_spec <- readRDS(paste0(sim_spec_dir, "/sim_spec_1.rds"))
# summarize the results
summarized_nb_results <- summarize_results(sim_spec = nb_spec, sim_res = nb_res,
metrics = c("bias", "mse", "ci_width", "coverage", "count", "time"),
parameters = "m_perturbation")
thresh_grid_row_exclude <- summarized_nb_results %>% filter(metric == "count", value == 0) %>% dplyr::pull(grid_row_id)
summarized_nb_results_trimmed <- summarized_nb_results %>%
filter(!(grid_id %in% thresh_grid_row_exclude & method == "thresholding")) %>%
mutate(distribution = ifelse(fam_str == "nb_theta_known", "NB (theta known)", "NB (theta est.)")) %>%
select(-g_fam, -m_fam, -run_unknown_theta_precomputation, -fam_str)
##################
# 3. Make the plot
##################
to_plot_all <- rbind(summarized_pois_results_trimmed, summarized_nb_results_trimmed) %>% filter(metric != "count") %>%
mutate(metric_fct = factor(metric, levels = c("bias", "mse", "coverage", "time"),
labels = c("Bias", "MSE", "Coverage", "Time (s)")),
Method = factor(method, levels = c("glmeiv_slow", "glmeiv_fast", "thresholding"),
labels = c("GLM-EIV", "GLM-EIV (accelerated)", "Thresholding")),
distribution = factor(distribution, levels = c("Poisson", "NB (theta known)", "NB (theta est.)"),
labels = c("Poisson", "NB (theta known)", "NB (theta est.)"))) %>%
arrange(Method) %>% mutate(exp_g_perturbation = exp(g_perturbation))
p <- ggplot(data = to_plot_all, mapping = aes(x = exp_g_perturbation, y = value, col = Method)) +
facet_grid(metric_fct ~ distribution, scales = "free") + xlab(expression(exp(beta[g]))) + scale_color_manual(values = my_cols) +
geom_hline(data = dplyr::filter(to_plot_all, metric_fct == "Bias"), mapping = aes(yintercept = 0), colour = "black") +
geom_hline(data = dplyr::filter(to_plot_all, metric_fct == "MSE"), mapping = aes(yintercept = 0), colour = "black") +
geom_hline(data = dplyr::filter(to_plot_all, metric_fct == "Coverage"), mapping = aes(yintercept = 0.95), colour = "black") +
geom_line() + geom_point() +
theme_bw() + theme(legend.position = "bottom", panel.grid.major = element_blank(), panel.grid.minor = element_blank()) + ylab("")
p
##################
# 3. Make the plot
##################
to_plot_all <- rbind(summarized_pois_results_trimmed, summarized_nb_results_trimmed) %>% filter(metric != "count") %>%
mutate(metric_fct = factor(metric, levels = c("bias", "mse", "coverage", "ci_width", "time"),
labels = c("Bias", "MSE", "Coverage", "CI width", "Time (s)")),
Method = factor(method, levels = c("glmeiv_slow", "glmeiv_fast", "thresholding"),
labels = c("GLM-EIV", "GLM-EIV (accelerated)", "Thresholding")),
distribution = factor(distribution, levels = c("Poisson", "NB (theta known)", "NB (theta est.)"),
labels = c("Poisson", "NB (theta known)", "NB (theta est.)"))) %>%
arrange(Method) %>% mutate(exp_g_perturbation = exp(g_perturbation))
p <- ggplot(data = to_plot_all, mapping = aes(x = exp_g_perturbation, y = value, col = Method)) +
facet_grid(metric_fct ~ distribution, scales = "free") + xlab(expression(exp(beta[g]))) + scale_color_manual(values = my_cols) +
geom_hline(data = dplyr::filter(to_plot_all, metric_fct == "Bias"), mapping = aes(yintercept = 0), colour = "black") +
geom_hline(data = dplyr::filter(to_plot_all, metric_fct == "MSE"), mapping = aes(yintercept = 0), colour = "black") +
geom_hline(data = dplyr::filter(to_plot_all, metric_fct == "Coverage"), mapping = aes(yintercept = 0.95), colour = "black") +
geom_line() + geom_point() +
theme_bw() + theme(legend.position = "bottom", panel.grid.major = element_blank(), panel.grid.minor = element_blank()) + ylab("")
p
fig_dir
# save
fp <- paste0(fig_dir, "/plot.pdf")
fp
ggsave(filename = fp, plot = p, device = "pdf", scale = 1, width = 5, height = 7)
ggsave(filename = fp, plot = p, device = "pdf", scale = 1, width = 5, height = 6)
ggsave(filename = fp, plot = p, device = "pdf", scale = 1, width = 5, height = 5.5)
ggsave(filename = fp, plot = p, device = "pdf", scale = 0.9, width = 5, height = 5.5)
ggsave(filename = fp, plot = p, device = "pdf", scale = 1.1, width = 5, height = 5.5)
fig_dir <- paste0(.get_config_path("LOCAL_CODE_DIR"), "glmeiv-manuscript/figures/supplement_sim")
if (!dir.exists(fig_dir)) dir.create(fig_dir)
# load the results and specifier objects
sim_result_dir <- paste0(.get_config_path("LOCAL_GLMEIV_DATA_DIR"), "public/simulations/results")
sim_spec_dir <- paste0(.get_config_path("LOCAL_GLMEIV_DATA_DIR"), "public/simulations/spec_objects")
# load the results and specifier objects
sim_result_dir <- paste0(.get_config_path("LOCAL_GLMEIV_DATA_DIR"), "public/simulations/results")
sim_spec_dir <- paste0(.get_config_path("LOCAL_GLMEIV_DATA_DIR"), "public/simulations/spec_objects")
sim_result_dir
sim_spec_dir
#############
# 1. Gaussian
#############
gaus_res <- readRDS(paste0(sim_result_dir, "/raw_result_2.rds")) %>% tibble()
gaus_res
gaus_res$target[gaus_res$target == "confint_higher"] <- "confint_upper"
#############
# 1. Gaussian
#############
gaus_res <- readRDS(paste0(sim_result_dir, "/raw_result_2.rds")) %>% tibble()
gaus_res$target[gaus_res$target == "confint_higher"] <- "confint_upper"
gaus_spec <- readRDS(paste0(sim_spec_dir, "/sim_spec_2.rds"))
gaus_res
gaus_spec
gaus_res
gaus_res %>% filter(target == "estimate", parameter == "m_perturbation")
gaus_res %>% filter(target == "estimate", parameter == "m_perturbation", method == "glmeiv_fast") %>% pull(value)
gaus_res %>% filter(target == "estimate", parameter == "m_perturbation", method == "glmeiv_fast") %>% pull(value) %>% hist()
gaus_res %>% filter(target == "estimate", parameter == "m_perturbation", method == "thresholding") %>% pull(value) %>% hist()
# summarize results
summarized_gaus_results <- summarize_results(sim_spec = gaus_res, sim_res = gaus_spec,
metrics = c("bias", "mse", "coverage", "ci_width"),
parameters = "m_perturbation")
#############
# 1. Gaussian
#############
gaus_res <- readRDS(paste0(sim_result_dir, "/raw_result_2.rds")) %>% tibble()
gaus_res$target[gaus_res$target == "confint_higher"] <- "confint_upper"
gaus_spec <- readRDS(paste0(sim_spec_dir, "/sim_spec_2.rds"))
# summarize results
summarized_gaus_results <- summarize_results(sim_spec = gaus_res, sim_res = gaus_spec,
metrics = c("bias", "mse", "coverage", "ci_width"),
parameters = "m_perturbation")
gaus_res
gaus_spec
summarize_results
sim_res$grid_row_id <- as.integer(as.character(sim_res$grid_row_id))
sim_spec = gaus_res; sim_res = gaus_spec;
metrics = c("bias", "mse", "coverage", "ci_width");
parameters = "m_perturbation"
sim_res$grid_row_id <- as.integer(as.character(sim_res$grid_row_id))
# get the functions to apply
funts_to_apply <- purrr::set_names(paste0("compute_", metrics), metrics)
sim_res$grid_row_id <- as.integer(as.character(sim_res$grid_row_id))
sim_res
# summarize results
summarized_gaus_results <- summarize_results(sim_spec = gaus_spec, sim_res = gaus_res,
metrics = c("bias", "mse", "coverage", "ci_width"),
parameters = "m_perturbation")
summarized_gaus_results
summarized_gaus_results
to_plot_all <- summarized_gaus_results %>% filter(metric != "count") %>%
mutate(metric_fct = factor(metric, levels = c("bias", "mse", "coverage", "ci_width", "time"),
labels = c("Bias", "MSE", "Coverage", "CI width", "Time (s)")),
Method = factor(method, levels = c("glmeiv_slow", "glmeiv_fast", "thresholding"),
labels = c("GLM-EIV", "GLM-EIV (accelerated)", "Thresholding")),
distribution = factor(distribution, levels = c("Poisson", "NB (theta known)", "NB (theta est.)"),
labels = c("Poisson", "NB (theta known)", "NB (theta est.)"))) %>%
arrange(Method) %>% mutate(exp_g_perturbation = exp(g_perturbation))
to_plot_all <- summarized_gaus_results %>% filter(metric != "count") %>%
mutate(metric_fct = factor(metric, levels = c("bias", "mse", "coverage", "ci_width", "time"),
labels = c("Bias", "MSE", "Coverage", "CI width", "Time (s)")),
Method = factor(method, levels = c("glmeiv_slow", "glmeiv_fast", "thresholding"),
labels = c("GLM-EIV", "GLM-EIV (accelerated)", "Thresholding"))) %>%
arrange(Method) %>% mutate(exp_g_perturbation = exp(g_perturbation))
to_plot_all
to_plot_all <- summarized_gaus_results %>% filter(metric != "count") %>%
mutate(metric_fct = factor(metric, levels = c("bias", "mse", "coverage", "ci_width", "time"),
labels = c("Bias", "MSE", "Coverage", "CI width", "Time (s)")),
Method = factor(method, levels = c("glmeiv_slow", "glmeiv_fast", "thresholding"),
labels = c("GLM-EIV", "GLM-EIV (accelerated)", "Thresholding"))) %>%
arrange(Method) %>% mutate(exp_g_perturbation = exp(g_perturbation))
to_plot_all
ggplot(data = to_plot_all, mapping = aes(x = exp_g_perturbation, y = value, col = Method)) +
facet_grid(. ~ metric_fct) + xlab(expression(exp(beta[g]))) + scale_color_manual(values = my_cols)
my_cols <- c("firebrick3", "dodgerblue3", "orchid4")
fig_dir <- paste0(.get_config_path("LOCAL_CODE_DIR"), "glmeiv-manuscript/figures/supplement_sim")
if (!dir.exists(fig_dir)) dir.create(fig_dir)
ggplot(data = to_plot_all, mapping = aes(x = exp_g_perturbation, y = value, col = Method)) +
facet_grid(. ~ metric_fct) + xlab(expression(exp(beta[g]))) + scale_color_manual(values = my_cols)
ggplot(data = to_plot_all, mapping = aes(x = exp_g_perturbation, y = value, col = Method)) +
facet_grid(. ~ metric_fct) + xlab(expression(exp(beta[g]))) + scale_color_manual(values = my_cols) +
geom_hline(data = dplyr::filter(to_plot_all, metric_fct == "Bias"), mapping = aes(yintercept = 0), colour = "black")
ggplot(data = to_plot_all, mapping = aes(x = exp_g_perturbation, y = value, col = Method)) +
facet_grid(. ~ metric_fct) + xlab(expression(exp(beta[g]))) + scale_color_manual(values = my_cols) +
geom_hline(data = dplyr::filter(to_plot_all, metric_fct == "Bias"), mapping = aes(yintercept = 0), colour = "black") +
geom_hline(data = dplyr::filter(to_plot_all, metric_fct == "MSE"), mapping = aes(yintercept = 0), colour = "black")
ggplot(data = to_plot_all, mapping = aes(x = exp_g_perturbation, y = value, col = Method)) +
facet_grid(. ~ metric_fct) + xlab(expression(exp(beta[g]))) + scale_color_manual(values = my_cols) +
geom_hline(data = dplyr::filter(to_plot_all, metric_fct == "Bias"), mapping = aes(yintercept = 0), colour = "black") +
geom_hline(data = dplyr::filter(to_plot_all, metric_fct == "MSE"), mapping = aes(yintercept = 0), colour = "black") +
geom_hline(data = dplyr::filter(to_plot_all, metric_fct == "Coverage"), mapping = aes(yintercept = 0.95), colour = "black")
ggplot(data = to_plot_all, mapping = aes(x = exp_g_perturbation, y = value, col = Method)) +
facet_grid(. ~ metric_fct) + xlab(expression(exp(beta[g]))) + scale_color_manual(values = my_cols) +
geom_hline(data = dplyr::filter(to_plot_all, metric_fct == "Bias"), mapping = aes(yintercept = 0), colour = "black") +
geom_hline(data = dplyr::filter(to_plot_all, metric_fct == "MSE"), mapping = aes(yintercept = 0), colour = "black") +
geom_hline(data = dplyr::filter(to_plot_all, metric_fct == "Coverage"), mapping = aes(yintercept = 0.95), colour = "black") +
geom_line()
p <- ggplot(data = to_plot_all, mapping = aes(x = g_perturbation, y = value, col = Method)) +
facet_grid(. ~ metric_fct) + xlab(expression(exp(beta[g]))) + scale_color_manual(values = my_cols) +
geom_hline(data = dplyr::filter(to_plot_all, metric_fct == "Bias"), mapping = aes(yintercept = 0), colour = "black") +
geom_hline(data = dplyr::filter(to_plot_all, metric_fct == "MSE"), mapping = aes(yintercept = 0), colour = "black") +
geom_hline(data = dplyr::filter(to_plot_all, metric_fct == "Coverage"), mapping = aes(yintercept = 0.95), colour = "black") +
geom_line() + geom_point() +
theme_bw() + theme(legend.position = "bottom", panel.grid.major = element_blank(), panel.grid.minor = element_blank()) + ylab("")
p
p <- ggplot(data = to_plot_all, mapping = aes(x = g_perturbation, y = value, col = Method)) +
facet_grid(. ~ metric_fct, scales = "free_y") + xlab(expression(exp(beta[g]))) + scale_color_manual(values = my_cols) +
geom_hline(data = dplyr::filter(to_plot_all, metric_fct == "Bias"), mapping = aes(yintercept = 0), colour = "black") +
geom_hline(data = dplyr::filter(to_plot_all, metric_fct == "MSE"), mapping = aes(yintercept = 0), colour = "black") +
geom_hline(data = dplyr::filter(to_plot_all, metric_fct == "Coverage"), mapping = aes(yintercept = 0.95), colour = "black") +
geom_line() + geom_point() +
theme_bw() + theme(legend.position = "bottom", panel.grid.major = element_blank(), panel.grid.minor = element_blank()) + ylab("")
p
p <- ggplot(data = to_plot_all, mapping = aes(x = g_perturbation, y = value, col = Method)) +
facet_grid(. ~ metric_fct, scales = "free") + xlab(expression(exp(beta[g]))) + scale_color_manual(values = my_cols) +
geom_hline(data = dplyr::filter(to_plot_all, metric_fct == "Bias"), mapping = aes(yintercept = 0), colour = "black") +
geom_hline(data = dplyr::filter(to_plot_all, metric_fct == "MSE"), mapping = aes(yintercept = 0), colour = "black") +
geom_hline(data = dplyr::filter(to_plot_all, metric_fct == "Coverage"), mapping = aes(yintercept = 0.95), colour = "black") +
geom_line() + geom_point() +
theme_bw() + theme(legend.position = "bottom", panel.grid.major = element_blank(), panel.grid.minor = element_blank()) + ylab("")
p
p <- ggplot(data = to_plot_all, mapping = aes(x = g_perturbation, y = value, col = Method)) +
facet_grid(. ~ metric_fct, scales = "free_y") + xlab(expression(beta[g])) + scale_color_manual(values = my_cols) +
geom_hline(data = dplyr::filter(to_plot_all, metric_fct == "Bias"), mapping = aes(yintercept = 0), colour = "black") +
geom_hline(data = dplyr::filter(to_plot_all, metric_fct == "MSE"), mapping = aes(yintercept = 0), colour = "black") +
geom_hline(data = dplyr::filter(to_plot_all, metric_fct == "Coverage"), mapping = aes(yintercept = 0.95), colour = "black") +
geom_line() + geom_point() +
theme_bw() + theme(legend.position = "bottom", panel.grid.major = element_blank(), panel.grid.minor = element_blank()) + ylab("")
p
p <- ggplot(data = to_plot_all, mapping = aes(x = g_perturbation, y = value, col = Method)) +
facet_grid(. ~ metric_fct, scales = "free_y", space = "free") + xlab(expression(beta[g])) + scale_color_manual(values = my_cols) +
geom_hline(data = dplyr::filter(to_plot_all, metric_fct == "Bias"), mapping = aes(yintercept = 0), colour = "black") +
geom_hline(data = dplyr::filter(to_plot_all, metric_fct == "MSE"), mapping = aes(yintercept = 0), colour = "black") +
geom_hline(data = dplyr::filter(to_plot_all, metric_fct == "Coverage"), mapping = aes(yintercept = 0.95), colour = "black") +
geom_line() + geom_point() +
theme_bw() + theme(legend.position = "bottom", panel.grid.major = element_blank(), panel.grid.minor = element_blank()) + ylab("")
p <- ggplot(data = to_plot_all, mapping = aes(x = g_perturbation, y = value, col = Method)) +
facet_grid(. ~ metric_fct, scales = "free_y") + xlab(expression(beta[g])) + scale_color_manual(values = my_cols) +
geom_hline(data = dplyr::filter(to_plot_all, metric_fct == "Bias"), mapping = aes(yintercept = 0), colour = "black") +
geom_hline(data = dplyr::filter(to_plot_all, metric_fct == "MSE"), mapping = aes(yintercept = 0), colour = "black") +
geom_hline(data = dplyr::filter(to_plot_all, metric_fct == "Coverage"), mapping = aes(yintercept = 0.95), colour = "black") +
geom_line() + geom_point() +
theme_bw() + theme(legend.position = "bottom", panel.grid.major = element_blank(), panel.grid.minor = element_blank()) + ylab("")
p
p <- ggplot(data = to_plot_all, mapping = aes(x = g_perturbation, y = value, col = Method)) +
facet_wrap(. ~ metric_fct, scales = "free_y") + xlab(expression(beta[g])) + scale_color_manual(values = my_cols) +
geom_hline(data = dplyr::filter(to_plot_all, metric_fct == "Bias"), mapping = aes(yintercept = 0), colour = "black") +
geom_hline(data = dplyr::filter(to_plot_all, metric_fct == "MSE"), mapping = aes(yintercept = 0), colour = "black") +
geom_hline(data = dplyr::filter(to_plot_all, metric_fct == "Coverage"), mapping = aes(yintercept = 0.95), colour = "black") +
geom_line() + geom_point() +
theme_bw() + theme(legend.position = "bottom", panel.grid.major = element_blank(), panel.grid.minor = element_blank()) + ylab("")
p
p <- ggplot(data = to_plot_all, mapping = aes(x = g_perturbation, y = value, col = Method)) +
facet_wrap(. ~ metric_fct, scales = "free_y", nrow = 1) + xlab(expression(beta[g])) + scale_color_manual(values = my_cols) +
geom_hline(data = dplyr::filter(to_plot_all, metric_fct == "Bias"), mapping = aes(yintercept = 0), colour = "black") +
geom_hline(data = dplyr::filter(to_plot_all, metric_fct == "MSE"), mapping = aes(yintercept = 0), colour = "black") +
geom_hline(data = dplyr::filter(to_plot_all, metric_fct == "Coverage"), mapping = aes(yintercept = 0.95), colour = "black") +
geom_line() + geom_point() +
theme_bw() + theme(legend.position = "bottom", panel.grid.major = element_blank(), panel.grid.minor = element_blank()) + ylab("")
p
library(dplyr)
library(ggplot2)
load_all("~/research_code/simulatr/")
my_cols <- c("dodgerblue3", "orchid4")
fig_dir <- paste0(.get_config_path("LOCAL_CODE_DIR"), "glmeiv-manuscript/figures/supplement_sim")
if (!dir.exists(fig_dir)) dir.create(fig_dir)
# load the results and specifier objects
sim_result_dir <- paste0(.get_config_path("LOCAL_GLMEIV_DATA_DIR"), "public/simulations/results")
sim_spec_dir <- paste0(.get_config_path("LOCAL_GLMEIV_DATA_DIR"), "public/simulations/spec_objects")
#############
# 1. Gaussian
#############
gaus_res <- readRDS(paste0(sim_result_dir, "/raw_result_2.rds")) %>% tibble()
gaus_res$target[gaus_res$target == "confint_higher"] <- "confint_upper"
gaus_spec <- readRDS(paste0(sim_spec_dir, "/sim_spec_2.rds"))
# summarize results
summarized_gaus_results <- summarize_results(sim_spec = gaus_spec, sim_res = gaus_res,
metrics = c("bias", "mse", "coverage", "ci_width"),
parameters = "m_perturbation")
to_plot_all <- summarized_gaus_results %>% filter(metric != "count") %>%
mutate(metric_fct = factor(metric, levels = c("bias", "mse", "coverage", "ci_width", "time"),
labels = c("Bias", "MSE", "Coverage", "CI width", "Time (s)")),
Method = factor(method, levels = c("glmeiv_slow", "glmeiv_fast", "thresholding"),
labels = c("GLM-EIV", "GLM-EIV (accelerated)", "Thresholding"))) %>%
arrange(Method)
p <- ggplot(data = to_plot_all, mapping = aes(x = g_perturbation, y = value, col = Method)) +
facet_wrap(. ~ metric_fct, scales = "free_y", nrow = 1) + xlab(expression(beta[g])) + scale_color_manual(values = my_cols) +
geom_hline(data = dplyr::filter(to_plot_all, metric_fct == "Bias"), mapping = aes(yintercept = 0), colour = "black") +
geom_hline(data = dplyr::filter(to_plot_all, metric_fct == "MSE"), mapping = aes(yintercept = 0), colour = "black") +
geom_hline(data = dplyr::filter(to_plot_all, metric_fct == "Coverage"), mapping = aes(yintercept = 0.95), colour = "black") +
geom_line() + geom_point() +
theme_bw() + theme(legend.position = "bottom", panel.grid.major = element_blank(), panel.grid.minor = element_blank()) + ylab("")
p
sim_spec_dir
fig_dir
fig_dir
fp <- paste0(fig_dir, "/gaussian.pdf")
fp
ggsave(filename = fp, plot = p, device = "pdf", scale = 1.1, width = 7, height = 3.5)
ggsave(filename = fp, plot = p, device = "pdf", scale = 1.1, width = 7, height = 2.5)
glmeiv::run_glmeiv_at_scale_simulatr
