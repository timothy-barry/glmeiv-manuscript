}
pair_ids <- as.character(unique(resampling_df$pair_id))
p3 <- f2(resampling_df, pair_ids[37], x_max = 0.4, pair_info) # good choices: 37
p4 <- f2(resampling_df, pair_ids[73], x_max = 0.4, pair_info) # good choices: 37
##############
# Save results
##############
p_final <- cowplot::plot_grid(NULL, p2, p3, p4, p5, p6, nrow = 3, labels = c("a", "b", "c", "d", "e", "f"), align = "v")
ggsave(filename = paste0(fig_dir, "/raw_plot.png"), plot = p_final, device = "png", dpi = 330, scale = 0.9, width = 7, height = 8)
p_final
ggsave(filename = paste0(fig_dir, "/raw_plot.png"), plot = p_final, device = "png", dpi = 330, scale = 0.9, width = 7, height = 8)
library(dplyr)
library(ggplot2)
library(ggpmisc)
library(tidyr)
library(cowplot)
gasp_res <- readr::read_tsv(paste0(file = .get_config_path("LOCAL_GASPERINI_2019_DATA_DIR"), "at-scale/raw/GSE120861_all_deg_results.at_scale.txt"))
pair_info <- gasp_res %>% select(pairs4merge, ENSG, gene_short_name, gRNA_group, target_site.chr, target_site.start, target_site.stop)
my_theme <- theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"), panel.background = element_rect("white"))
my_cols <- c("firebrick3", "dodgerblue3", "orchid4")
fig_dir <- paste0(.get_config_path("LOCAL_CODE_DIR"), "glmeiv-manuscript/figures/data_analysis")
if (!dir.exists(fig_dir)) dir.create(fig_dir)
result_dir_gasp <- paste0(.get_config_path("LOCAL_GLMEIV_DATA_DIR"), "public/gasperini/results")
########################
# 1. Resampling analysis
########################
n_pairs <- resampling_df$pair_id %>% unique() %>% length()
resampling_df <- readRDS(paste0(result_dir_gasp, "/resampling_result.rds"))
# a function that plots the result given a given pair on the same plot
f2 <- function(resampling_df, pair_id, x_max = 0.4, pair_info) {
split_pair <- strsplit(pair_id, ":")[[1]]
my_info <- pair_info %>% filter(ENSG == split_pair[1], gRNA_group == split_pair[2])
title <- paste0("Gene ", my_info$gene_short_name)
df <- dplyr::filter(resampling_df, pair_id == !!pair_id, contam_level <= x_max) %>%
dplyr::filter(parameter == "m_perturbation", target %in% c("estimate", "confint_lower", "confint_upper")) %>%
dplyr::select(-parameter, -pair_id) %>%
tidyr::pivot_wider(data = ., names_from = "target", values_from = "value") %>%
dplyr::mutate(method = factor(method, c("glmeiv", "thresholding"), c("GLM-EIV", "Thresholding")))
df_synth <- df %>% dplyr::filter(contam_level >= 0) %>% dplyr::group_by(method, contam_level) %>%
dplyr::summarize(m_est = mean(estimate, na.rm = TRUE), m_ci_upper = mean(confint_upper, na.rm = TRUE), m_ci_lower = mean(confint_lower, na.rm = TRUE))
df_gt <- df %>% dplyr::filter(contam_level == -1)
p <- ggplot(data = df_synth, mapping = aes(x = contam_level, y = m_est, col = method)) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), legend.position = "blank", legend.title=element_blank(), plot.title = element_text(hjust = 0.5, size = 11)) +
scale_color_manual(values = c(my_cols[1], my_cols[3])) + geom_hline(yintercept = mean(df_gt$estimate), col = "black", lwd = 0.85) +
xlab("Excess background contamination") + scale_x_continuous(expand = expansion(mult = c(0.05, 0.03))) +  geom_ribbon(aes(ymin = m_ci_lower, ymax = m_ci_upper), fill = "grey60", alpha = 0.8, linetype = 0) + geom_line(lwd = 0.85) +
ylab("Estimate") + scale_fill_manual(values = c(my_cols[1], my_cols[3])) + my_theme +
ggtitle(label = title)
return(p)
}
pair_ids <- as.character(unique(resampling_df$pair_id))
p3 <- f2(resampling_df, pair_ids[37], x_max = 0.4, pair_info) # good choices: 37
p4 <- f2(resampling_df, pair_ids[73], x_max = 0.4, pair_info) # good choices: 37
# an "aggregate" version of the above analysis
aggregate_df <- resampling_df %>% filter(contam_level >= 0, parameter == "m_perturbation", target %in% c("estimate", "confint_lower", "confint_upper")) %>%
select(-parameter) %>% tidyr::pivot_wider(names_from = "target", values_from = "value") %>% group_by(method, pair_id, contam_level) %>%
summarize(m = mean(estimate), m_lower_ci = mean(confint_lower, na.rm = TRUE), m_upper_ci = mean(confint_upper, na.rm = TRUE)) %>% ungroup() %>% group_by(method, pair_id) %>%
group_modify(.f = function(tbl, key) {
baseline_est <- tbl$m[tbl$contam_level == 0]
p_change <- abs(tbl$m - baseline_est)/baseline_est
ci_cover <- (tbl$m_lower_ci < baseline_est) & (tbl$m_upper_ci > baseline_est)
mutate(tbl, p_change = p_change, ci_cover = ci_cover)
}) %>% ungroup() %>% group_by(contam_level, method) %>% summarize(median_p_change = median(p_change),
lower_median_ci = sort(p_change)[qbinom(.025, length(p_change), 0.5)],
upper_median_ci = sort(p_change)[qbinom(.975, length(p_change), 0.5)],
mean_coverage = mean(ci_cover),
lower_cover_ci = mean_coverage - 1.96 * sqrt((1/n_pairs) * mean_coverage * (1 - mean_coverage)),
upper_cover_ci = mean_coverage + 1.96 * sqrt((1/n_pairs) * mean_coverage * (1 - mean_coverage))) %>%
mutate(method = factor(method, c("glmeiv", "thresholding"), c("GLM-EIV", "Thresholding")))
p5 <- ggplot(data = aggregate_df %>% filter(contam_level <= 0.4),
mapping = aes(x = contam_level, y = median_p_change, col = method)) +
geom_hline(yintercept = 0, col = "black", lwd = 0.5) + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), legend.position = c(0.25, 0.88), legend.title=element_blank()) +
scale_color_manual(values = c(my_cols[1], my_cols[3])) +
xlab("Excess background contamination") + scale_x_continuous(expand = expansion(mult = c(0, 0.01))) + geom_ribbon(aes(ymin = lower_median_ci, ymax = upper_median_ci, fill = method), alpha = 0.5) + geom_line(lwd = 0.85) +
ylab("Median REC") + scale_fill_manual(values = c(my_cols[1], my_cols[3])) + my_theme
p6 <- ggplot(data = aggregate_df %>% filter(contam_level <= 0.4),
mapping = aes(x = contam_level, y = mean_coverage, col = method)) +
theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), legend.position = "blank", legend.title=element_blank()) +
scale_color_manual(values = c(my_cols[1], my_cols[3])) +
xlab("Excess background contamination") + scale_x_continuous(expand = expansion(mult = c(0, 0.01))) + geom_ribbon(aes(ymin = lower_cover_ci, ymax = upper_cover_ci, fill = method), alpha = 0.5) + geom_line(lwd = 0.85) +
ylab("CI stability") + scale_fill_manual(values = c(my_cols[1], my_cols[3])) + my_theme
# difference between resampled 0 and fitted 0.
raw_est_vs_fitted_model_est <- resampling_df %>% filter(contam_level %in% c(-1, 0), parameter == "m_perturbation", target == "estimate") %>%
select(-parameter, -target) %>% group_by(method, pair_id, contam_level) %>%
dplyr::summarize(m_est = mean(value)) %>% group_modify(.f = function(tbl, key) {
raw_est <- tbl$m_est[tbl$contam_level < 0]
resampled_est <- tbl$m_est[tbl$contam_level == 0]
delta <- abs(raw_est - resampled_est)/raw_est
tbl %>% mutate(delta = delta)
}) %>% ungroup() %>% group_by(method) %>% summarize(median_delta = median(delta))
raw_est_vs_fitted_model_est
####################
# Raw data analyses
####################
# Define functions
# 1. join data frames for comparison
join_results <- function(glmeiv_res, thresh_res, site_type) {
left_join(x = filter(.data = glmeiv_res, target == "estimate", parameter == "m_perturbation", type == !!site_type) %>% select(pair_id, value),
y = filter(thresh_res, target == "estimate", parameter == "m_perturbation", type == !!site_type) %>% select(pair_id, value),
by = "pair_id", suffix = c("_glmeiv", "_thresh"))
}
# 2. Compute CI coverage rate (assuming ground truth of 1) and width
get_ci_coverage_rate <- function(df, site_type = NULL) {
df %>% dplyr::filter(parameter == "m_perturbation",
target %in% c("confint_lower", "confint_upper", "estimate"),
type %in% if (is.null(site_type)) as.character(unique(df$type)) else site_type) %>%
dplyr::select(target, value, pair_id, type) %>%
tidyr::pivot_wider(id_cols = c("pair_id", "type"),
names_from = "target", values_from = "value") %>%
dplyr::mutate(covered = confint_upper > 1 & confint_lower < 1,
width = confint_upper - confint_lower) %>%
dplyr::summarize(coverage_rate = mean(covered, na.rm = TRUE) * 100,
mean_width = mean(width, na.rm = TRUE))
}
####################
# Gasperini analysis
####################
if (FALSE) {
#  1. load the results
glmeiv_res <- paste0(result_dir_gasp, "/result_glmeiv.rds") %>% readRDS() %>% mutate(type = site_type)
thresh_res <- paste0(result_dir_gasp, "/result_thresholding.rds") %>% readRDS() %>% mutate(type = site_type)
# 2. Ensure we are examining the same pairs (Gasp missing ~100 due to probable node failure)
glmeiv_pairs <- glmeiv_res %>% filter(parameter == "m_perturbation", target == "estimate") %>% pull(pair_id) %>% as.character() %>% sort()
thresh_pairs <- thresh_res %>% filter(parameter == "m_perturbation", target == "estimate") %>% pull(pair_id) %>% as.character() %>% sort()
glmeiv_res <- glmeiv_res %>% filter(pair_id %in% ok_glmeiv_pairs)
thresh_res <- thresh_res %>% filter(pair_id %in% ok_glmeiv_pairs)
# 4. get CI coverage for NTCs
get_ci_coverage_rate(glmeiv_res, "NTC")
get_ci_coverage_rate(thresh_res, "NTC")
# 5. Plot results on NTC pairs
comparison_df <- join_results(glmeiv_res, thresh_res, "NTC")
p3 <- ggplot(data = comparison_df, mapping = aes(x = value_glmeiv, y = value_thresh)) + geom_point(alpha = 0.5) +
geom_abline(slope = 1, intercept = 0, col = my_cols[2], lwd = 1) + xlab("GLM-EIV estimate") + ylab("Thresholding estimate") + my_theme
# Plot positive control pairs
comparison_df <- join_results(glmeiv_res, thresh_res, "selfTSS")
p4 <- ggplot(data = comparison_df, mapping = aes(x = value_glmeiv, y = value_thresh)) + geom_point(alpha = 0.5) +
geom_abline(slope = 1, intercept = 0, col = my_cols[2], lwd = 1) + xlab("GLM-EIV estimate") + ylab("Thresholding estimate") + my_theme
}
##############
# Xie analysis
##############
# 1. load the results
result_dir_xie <- paste0(.get_config_path("LOCAL_GLMEIV_DATA_DIR"), "public/xie/results")
glmeiv_res <- paste0(result_dir_xie, "/glmeiv_result.rds") %>% readRDS()
thresh_res <- paste0(result_dir_xie, "/result_thresholding.rds") %>% readRDS()
# 2. confirm that the results are on the same pairs
glmeiv_pairs <- glmeiv_res %>% filter(parameter == "m_perturbation", target == "estimate") %>% pull(pair_id) %>% as.character() %>% sort()
thresh_pairs <- thresh_res %>% filter(parameter == "m_perturbation", target == "estimate") %>% pull(pair_id) %>% as.character() %>% sort()
identical(glmeiv_pairs, thresh_pairs)
# 3. Comipute mean g_perturbation
glmeiv_res %>% filter(parameter == "g_perturbation") %>% pivot_wider(id_cols = "pair_id", names_from = "target") %>%
summarize(m_est = mean(estimate), m_confint_lower = mean(confint_lower, na.rm = TRUE), m_confint_upper = mean(confint_upper, na.rm = TRUE)) # g perturbation fairly large
# 4. get the CI coverage table
ci_info <- rbind(get_ci_coverage_rate(glmeiv_res, "neg_control"),
get_ci_coverage_rate(thresh_res, "neg_control")) %>%
mutate(Method = c("GLM-EIV", "Thresh."), coverage_rate = round(coverage_rate, 1), mean_width = round(mean_width, 3)) %>%
select(Method, "Cov. rate" = coverage_rate, "Width" = mean_width)
# 5. Plot results
comparison_df <- join_results(glmeiv_res, thresh_res, "neg_control") %>% mutate(glmeiv_ok = value_glmeiv < 1.25 & value_glmeiv > 0.75)
comparison_df_sub <- comparison_df %>% filter(glmeiv_ok)
p2 <- ggplot(data = comparison_df_sub, mapping = aes(x = value_glmeiv, y = value_thresh)) + geom_point(alpha = 0.25, color = my_cols[2], cex = 0.9) +
geom_abline(slope = 1, intercept = 0, lwd = 0.85) + xlab("GLM-EIV estimate") + ylab("Thresholding estimate") + my_theme +
annotate(geom = "table", x = min(comparison_df_sub$value_thresh), y = max(comparison_df_sub$value_thresh) + 0.05, label = list(ci_info), vjust = 1, hjust = 0, fill = "white")
##############
# Save results
##############
p_final <- cowplot::plot_grid(NULL, p2, p3, p4, p5, p6, nrow = 3, labels = c("a", "b", "c", "d", "e", "f"), align = "v")
ggsave(filename = paste0(fig_dir, "/raw_plot.png"), plot = p_final, device = "png", dpi = 330, scale = 0.9, width = 7, height = 8)
load_all("~/research_code/glmeiv/")
my_cols <- c("firebrick3", "dodgerblue4", "orchid4")
my_theme <- theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"))
my_lwd <- 0.65
library(magrittr)
library(ggplot2)
library(cowplot)
load_all("~/research_code/glmeiv/")
my_cols <- c("firebrick3", "dodgerblue4", "orchid4")
my_theme <- theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"))
my_lwd <- 0.65
library(magrittr)
library(ggplot2)
library(cowplot)
fig_dir <- paste0(.get_config_path("LOCAL_CODE_DIR"), "glmeiv-manuscript/figures/thresholding_theoretical")
if (!dir.exists(fig_dir)) dir.create(fig_dir)
# subplot c) bias-variance tradeoff
xgrid <- seq(1, 3.9, length.out = 1001)
g_beta <- 1
pi <- 0.1
m_beta <- 1
n <- 10000
bias_sq <- (1 - get_thresholding_estimator_est_no_int(c = xgrid, g_beta = g_beta, pi = pi, m_beta = m_beta))^2
var <- get_thresholding_estimator_var_no_int(c = xgrid, g_beta = g_beta, pi = pi, m_beta = m_beta, n = n)
to_plot_c <- data.frame(Metric = rep(c("Bias^2", "Variance", "MSE"), each = length(xgrid)),
value = c(bias_sq, var, bias_sq + var),
threshold = rep(xgrid, times = 3))
p_c <- ggplot(data = to_plot_c %>% dplyr::mutate(Metric = factor(Metric, levels = c("Bias^2", "Variance", "MSE"),
labels = c("Bias^2", "Variance", "MSE"))),
mapping = aes(x = threshold, y = value, col = Metric)) +
geom_line(lwd = my_lwd) + theme_bw(base_size = 10) + xlab("Threshold") + ylab("") +
scale_color_manual(values = c(my_cols[3], my_cols[1], my_cols[2]),
labels = c("MSE", expression(Bias^2), "Variance"),
breaks = c("MSE", expression(Bias^2), "Variance")) + scale_x_continuous(expand = c(0.005, 0.005)) +
scale_y_continuous(expand = c(0.005, 0.005)) + theme(legend.position = c(0.14, 0.34), legend.title = element_blank(),
panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"))
p_c
fig_dir
# save
ggsave(filename = paste0(fig_dir, "/plot.jpeg"), plot = p, device = "jpeg", scale = 1.05, width = 4, height = 3, dpi = 320)
# save
ggsave(filename = paste0(fig_dir, "/plot.jpeg"), plot = p_c, device = "jpeg", scale = 1.05, width = 4, height = 3, dpi = 320)
# save
ggsave(filename = paste0(fig_dir, "/plot.jpeg"), plot = p_c, device = "jpeg", scale = 1.05, width = 3, height = 2.5, dpi = 320)
# save
ggsave(filename = paste0(fig_dir, "/plot.jpeg"), plot = p_c, device = "jpeg", scale = 1.0, width = 5, height = 3, dpi = 320)
# save
ggsave(filename = paste0(fig_dir, "/plot.jpeg"), plot = p_c, device = "jpeg", scale = 1.0, width = 4.5, height = 2.5, dpi = 320)
load_all("~/research_code/glmeiv/")
my_cols <- c("firebrick3", "dodgerblue4", "orchid4")
my_theme <- theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"))
my_lwd <- 0.65
library(magrittr)
library(ggplot2)
library(cowplot)
fig_dir <- paste0(.get_config_path("LOCAL_CODE_DIR"), "glmeiv-manuscript/figures/thresholding_theoretical")
if (!dir.exists(fig_dir)) dir.create(fig_dir)
# a) estimate vs. threshold for different values of beta_g
x_grid <- seq(0, 7, length.out = 501)
beta_gs <- c(1, qnorm(0.75) * 2, 1.5)
to_plot_a <- lapply(X = beta_gs, function(curr_beta_g) {
y <- get_tresholding_estimator_bias(m_perturbation = 1,
g_perturbation = curr_beta_g,
g_intercept = 0,
pi = 0.5,
c = x_grid,
return_bias = TRUE)
data.frame(Bias = y, Threshold = x_grid, beta_g = curr_beta_g)
}) %>% do.call(what = "rbind", args = .) %>%
dplyr::mutate(beta_g_disp = paste0("beta[1]^g == ", round(beta_g, 2)) %>% factor())
# subplot a) bias in pi = 1/2 model
p_a <- ggplot(data = to_plot_a, mapping = aes(x = Threshold, y = Bias)) +
geom_hline(yintercept = 0.5, col = "darkred", lwd = my_lwd) +
facet_wrap(.~beta_g_disp, labeller = label_parsed, scales = "free_y") +
theme_bw(base_size = 10) + scale_x_continuous(expand = c(NA, 0)) +
geom_vline(data = dplyr::filter(to_plot_a, beta_g_disp == "beta[1]^g == 1"),
mapping = aes(xintercept = beta_gs[1]/2), col = my_cols[2], lwd = my_lwd) +
geom_vline(data = dplyr::filter(to_plot_a, beta_g_disp == "beta[1]^g == 1.35"),
mapping = aes(xintercept = beta_gs[2]/2), col = my_cols[2], lwd = my_lwd) +
geom_vline(data = dplyr::filter(to_plot_a, beta_g_disp == "beta[1]^g == 1.5"),
mapping = aes(xintercept = beta_gs[3]/2), col = my_cols[2], lwd = my_lwd) +
geom_line(lwd = my_lwd) + my_theme
# subplot b) bias as c -> infinity for pi in [0,1/2]
pi <- seq(0.0, 0.5, length.out = 11)
to_plot_b <- data.frame(pi = pi, Bias = pi)
p_b <- ggplot(data = to_plot_b, mapping = aes(x = pi, y = Bias)) + geom_line(lwd = my_lwd) + theme_bw(base_size = 10) +
xlab(expression(pi)) + scale_x_continuous(expand = c(0.005, 0.005)) + scale_y_continuous(expand = c(0.005, 0.005)) +
theme(axis.title.y = element_text(margin = margin(t = 0, r = 10, b = 0, l = 0)), panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"))
p_a
p_b
p_a
ggsave(filename = paste0(fig_dir, "/app_plot.jpef"), plot = p_a, device = "jpeg", scale = 1.0, width = 4.5, height = 2, dpi = 320)
ggsave(filename = paste0(fig_dir, "/app_plot.jpeg"), plot = p_a, device = "jpeg", scale = 1.0, width = 4.5, height = 2, dpi = 320)
ggsave(filename = paste0(fig_dir, "/app_plot.jpeg"), plot = p_a, device = "jpeg", scale = 0.9, width = 4.5, height = 1.5, dpi = 320)
ggsave(filename = paste0(fig_dir, "/app_plot.jpeg"), plot = p_a, device = "jpeg", scale = 0.5, width = 4.5, height = 1.5, dpi = 320)
ggsave(filename = paste0(fig_dir, "/app_plot.jpeg"), plot = p_a, device = "jpeg", scale = 1.5, width = 4.5, height = 1.5, dpi = 320)
library(dplyr)
library(ggplot2)
library(ggpmisc)
library(tidyr)
library(cowplot)
gasp_res <- readr::read_tsv(paste0(file = .get_config_path("LOCAL_GASPERINI_2019_DATA_DIR"), "at-scale/raw/GSE120861_all_deg_results.at_scale.txt"))
pair_info <- gasp_res %>% select(pairs4merge, ENSG, gene_short_name, gRNA_group, target_site.chr, target_site.start, target_site.stop)
my_theme <- theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"), panel.background = element_rect("white"))
my_cols <- c("firebrick3", "dodgerblue3", "orchid4")
fig_dir <- paste0(.get_config_path("LOCAL_CODE_DIR"), "glmeiv-manuscript/figures/data_analysis")
if (!dir.exists(fig_dir)) dir.create(fig_dir)
result_dir_gasp <- paste0(.get_config_path("LOCAL_GLMEIV_DATA_DIR"), "public/gasperini/results")
########################
# 1. Resampling analysis
########################
resampling_df <- readRDS(paste0(result_dir_gasp, "/resampling_result.rds"))
n_pairs <- resampling_df$pair_id %>% unique() %>% length()
# a function that plots the result given a given pair on the same plot
f2 <- function(resampling_df, pair_id, x_max = 0.4, pair_info) {
split_pair <- strsplit(pair_id, ":")[[1]]
my_info <- pair_info %>% filter(ENSG == split_pair[1], gRNA_group == split_pair[2])
title <- paste0("Gene ", my_info$gene_short_name)
df <- dplyr::filter(resampling_df, pair_id == !!pair_id, contam_level <= x_max) %>%
dplyr::filter(parameter == "m_perturbation", target %in% c("estimate", "confint_lower", "confint_upper")) %>%
dplyr::select(-parameter, -pair_id) %>%
tidyr::pivot_wider(data = ., names_from = "target", values_from = "value") %>%
dplyr::mutate(method = factor(method, c("glmeiv", "thresholding"), c("GLM-EIV", "Thresholding")))
df_synth <- df %>% dplyr::filter(contam_level >= 0) %>% dplyr::group_by(method, contam_level) %>%
dplyr::summarize(m_est = mean(estimate, na.rm = TRUE), m_ci_upper = mean(confint_upper, na.rm = TRUE), m_ci_lower = mean(confint_lower, na.rm = TRUE))
df_gt <- df %>% dplyr::filter(contam_level == -1)
p <- ggplot(data = df_synth, mapping = aes(x = contam_level, y = m_est, col = method)) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), legend.position = "blank", legend.title=element_blank(), plot.title = element_text(hjust = 0.5, size = 11)) +
scale_color_manual(values = c(my_cols[1], my_cols[3])) + geom_hline(yintercept = mean(df_gt$estimate), col = "black", lwd = 0.85) +
xlab("Excess background contamination") + scale_x_continuous(expand = expansion(mult = c(0.05, 0.03))) +  geom_ribbon(aes(ymin = m_ci_lower, ymax = m_ci_upper), fill = "grey60", alpha = 0.8, linetype = 0) + geom_line(lwd = 0.85) +
ylab("Estimate") + scale_fill_manual(values = c(my_cols[1], my_cols[3])) + my_theme +
ggtitle(label = title)
return(p)
}
pair_ids <- as.character(unique(resampling_df$pair_id))
p3 <- f2(resampling_df, pair_ids[37], x_max = 0.4, pair_info) # good choices: 37
p4 <- f2(resampling_df, pair_ids[73], x_max = 0.4, pair_info) # good choices: 37
# an "aggregate" version of the above analysis
aggregate_df <- resampling_df %>% filter(contam_level >= 0, parameter == "m_perturbation", target %in% c("estimate", "confint_lower", "confint_upper")) %>%
select(-parameter) %>% tidyr::pivot_wider(names_from = "target", values_from = "value") %>% group_by(method, pair_id, contam_level) %>%
summarize(m = mean(estimate), m_lower_ci = mean(confint_lower, na.rm = TRUE), m_upper_ci = mean(confint_upper, na.rm = TRUE)) %>% ungroup() %>% group_by(method, pair_id) %>%
group_modify(.f = function(tbl, key) {
baseline_est <- tbl$m[tbl$contam_level == 0]
p_change <- (tbl$m - baseline_est)/baseline_est
ci_cover <- (tbl$m_lower_ci < baseline_est) & (tbl$m_upper_ci > baseline_est)
mutate(tbl, p_change = p_change, ci_cover = ci_cover)
}) %>% ungroup() %>% group_by(contam_level, method) %>% summarize(median_p_change = median(p_change),
p_change_15 =  quantile(p_change, 0.25)[[1]],
p_change_85 =  quantile(p_change, 0.75)[[1]],
lower_median_ci = sort(p_change)[qbinom(.025, length(p_change), 0.5)],
upper_median_ci = sort(p_change)[qbinom(.975, length(p_change), 0.5)],
mean_coverage = mean(ci_cover),
lower_cover_ci = mean_coverage - 1.96 * sqrt((1/n_pairs) * mean_coverage * (1 - mean_coverage)),
upper_cover_ci = mean_coverage + 1.96 * sqrt((1/n_pairs) * mean_coverage * (1 - mean_coverage))) %>%
mutate(method = factor(method, c("glmeiv", "thresholding"), c("GLM-EIV", "Thresh.")))
p5 <- ggplot(data = aggregate_df %>% filter(contam_level <= 0.4),
mapping = aes(x = contam_level, y = median_p_change, col = method)) +
geom_hline(yintercept = 0, col = "black", lwd = 0.5) + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), legend.position = c(0.25, 0.88), legend.title=element_blank()) +
scale_color_manual(values = c(my_cols[1], my_cols[3])) +
xlab("Excess background contamination") + scale_x_continuous(expand = expansion(mult = c(0, 0.01))) + geom_ribbon(aes(ymin = p_change_15, ymax = p_change_85, fill = method), alpha = 0.5) + geom_line(lwd = 0.85) +
ylab("Median REC") + scale_fill_manual(values = c(my_cols[1], my_cols[3])) + my_theme
p6 <- ggplot(data = aggregate_df %>% filter(contam_level <= 0.4),
mapping = aes(x = contam_level, y = mean_coverage, col = method)) +
theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), legend.position = "blank", legend.title=element_blank()) +
scale_color_manual(values = c(my_cols[1], my_cols[3])) +
xlab("Excess background contamination") + scale_x_continuous(expand = expansion(mult = c(0, 0.01))) + geom_ribbon(aes(ymin = lower_cover_ci, ymax = upper_cover_ci, fill = method), alpha = 0.5) + geom_line(lwd = 0.85) +
ylab("CI coverage") + scale_fill_manual(values = c(my_cols[1], my_cols[3])) + my_theme
# difference between resampled 0 and fitted 0.
raw_est_vs_fitted_model_est <- resampling_df %>% filter(contam_level %in% c(-1, 0), parameter == "m_perturbation", target == "estimate") %>%
select(-parameter, -target) %>% group_by(method, pair_id, contam_level) %>%
dplyr::summarize(m_est = mean(value)) %>% group_modify(.f = function(tbl, key) {
raw_est <- tbl$m_est[tbl$contam_level < 0]
resampled_est <- tbl$m_est[tbl$contam_level == 0]
delta <- abs(raw_est - resampled_est)/raw_est
tbl %>% mutate(delta = delta)
}) %>% ungroup() %>% group_by(method) %>% summarize(median_delta = median(delta))
raw_est_vs_fitted_model_est
####################
# Raw data analyses
####################
# Define functions
# 1. join data frames for comparison
join_results <- function(glmeiv_res, thresh_res, site_type) {
left_join(x = filter(.data = glmeiv_res, target == "estimate", parameter == "m_perturbation", type == !!site_type) %>% select(pair_id, value),
y = filter(thresh_res, target == "estimate", parameter == "m_perturbation", type == !!site_type) %>% select(pair_id, value),
by = "pair_id", suffix = c("_glmeiv", "_thresh"))
}
# 2. Compute CI coverage rate (assuming ground truth of 1) and width
get_ci_coverage_rate <- function(df, site_type = NULL) {
df %>% dplyr::filter(parameter == "m_perturbation",
target %in% c("confint_lower", "confint_upper", "estimate"),
type %in% if (is.null(site_type)) as.character(unique(df$type)) else site_type) %>%
dplyr::select(target, value, pair_id, type) %>%
tidyr::pivot_wider(id_cols = c("pair_id", "type"),
names_from = "target", values_from = "value") %>%
dplyr::mutate(covered = confint_upper > 1 & confint_lower < 1,
width = confint_upper - confint_lower) %>%
dplyr::summarize(coverage_rate = mean(covered, na.rm = TRUE) * 100,
mean_width = mean(width, na.rm = TRUE))
}
####################
# Gasperini analysis
####################
#  1. load the results
glmeiv_res <- paste0(result_dir_gasp, "/result_glmeiv.rds") %>% readRDS() %>% mutate(type = site_type)
thresh_res <- paste0(result_dir_gasp, "/result_thresholding.rds") %>% readRDS() %>% mutate(type = site_type)
# 2. Ensure we are examining the same pairs
glmeiv_pairs <- glmeiv_res %>% filter(parameter == "m_perturbation", target == "estimate") %>% pull(pair_id) %>% as.character() %>% sort()
thresh_pairs <- thresh_res %>% filter(parameter == "m_perturbation", target == "estimate") %>% pull(pair_id) %>% as.character() %>% sort()
identical(glmeiv_pairs, thresh_pairs) # pairs are the same across glmeiv and thresholding
# 3. mean g_perturbation
glmeiv_res %>% filter(parameter == "g_perturbation") %>% pivot_wider(id_cols = "pair_id", names_from = "target") %>%
summarize(m_est = mean(estimate), m_confint_lower = mean(confint_lower, na.rm = TRUE), m_confint_upper = mean(confint_upper[confint_upper < 10000], na.rm = TRUE))
# 4. get CI coverage for NTCs
ci_info <- rbind(get_ci_coverage_rate(glmeiv_res, "NTC"),
get_ci_coverage_rate(thresh_res, "NTC")) %>%
mutate(Method = c("GLM-EIV", "Thresh."), coverage_rate = round(coverage_rate, 1), mean_width = round(mean_width, 3)) %>%
select(Method, "Cov. rate" = coverage_rate, "Width" = mean_width)
# 5. Plot results on NTC pairs
comparison_df <- join_results(glmeiv_res, thresh_res, "NTC") %>% mutate(glmeiv_ok = value_glmeiv < 1.25 & value_glmeiv > 0.75)
comparison_df_sub <- comparison_df %>% filter(glmeiv_ok)
p1 <- ggplot(data = comparison_df_sub %>% filter(value_glmeiv >= 0.8), mapping = aes(x = value_glmeiv, y = value_thresh)) + geom_point(alpha = 0.25, color = my_cols[2], cex = 0.9) +
geom_abline(slope = 1, intercept = 0, lwd = 0.85) + xlab("GLM-EIV estimate") + ylab("Thresholding estimate") + my_theme +
annotate(geom = "table", x = min(comparison_df_sub$value_glmeiv), y = max(comparison_df_sub$value_thresh) + 0.15, label = list(ci_info), vjust = 1, hjust = 0, fill = "white") + xlim(c(NA, 1.25)) + ylim(c(NA, 1.4))
##############
# Xie analysis
##############
# 1. load the results
result_dir_xie <- paste0(.get_config_path("LOCAL_GLMEIV_DATA_DIR"), "public/xie/results")
glmeiv_res <- paste0(result_dir_xie, "/glmeiv_result.rds") %>% readRDS()
thresh_res <- paste0(result_dir_xie, "/result_thresholding.rds") %>% readRDS()
# 2. confirm that the results are on the same pairs
glmeiv_pairs <- glmeiv_res %>% filter(parameter == "m_perturbation", target == "estimate") %>% pull(pair_id) %>% as.character() %>% sort()
thresh_pairs <- thresh_res %>% filter(parameter == "m_perturbation", target == "estimate") %>% pull(pair_id) %>% as.character() %>% sort()
identical(glmeiv_pairs, thresh_pairs)
# 3. Comipute mean g_perturbation
glmeiv_res %>% filter(parameter == "g_perturbation") %>% pivot_wider(id_cols = "pair_id", names_from = "target") %>%
summarize(m_est = mean(estimate), m_confint_lower = mean(confint_lower, na.rm = TRUE), m_confint_upper = mean(confint_upper, na.rm = TRUE)) # g perturbation fairly large
# 4. get the CI coverage table
ci_info <- rbind(get_ci_coverage_rate(glmeiv_res, "neg_control"),
get_ci_coverage_rate(thresh_res, "neg_control")) %>%
mutate(Method = c("GLM-EIV", "Thresh."), coverage_rate = round(coverage_rate, 1), mean_width = round(mean_width, 3)) %>%
select(Method, "Cov. rate" = coverage_rate, "Width" = mean_width)
# 5. Plot results
comparison_df <- join_results(glmeiv_res, thresh_res, "neg_control") %>% mutate(glmeiv_ok = value_glmeiv < 1.25 & value_glmeiv > 0.75)
comparison_df_sub <- comparison_df %>% filter(glmeiv_ok)
p2 <- ggplot(data = comparison_df_sub, mapping = aes(x = value_glmeiv, y = value_thresh)) + geom_point(alpha = 0.25, color = my_cols[2], cex = 0.9) +
geom_abline(slope = 1, intercept = 0, lwd = 0.85) + xlab("GLM-EIV estimate") + ylab("Thresholding estimate") + my_theme +
annotate(geom = "table", x = min(comparison_df_sub$value_glmeiv), y = max(comparison_df_sub$value_thresh) + 0.05, label = list(ci_info), vjust = 1, hjust = 0, fill = "white")
##############
# Save results
##############
p_final <- cowplot::plot_grid(p1, p2, p3, p4, p5, p6, nrow = 3, labels = c("a", "b", "c", "d", "e", "f"), align = "v")
ggsave(filename = paste0(fig_dir, "/raw_plot.png"), plot = p_final, device = "png", dpi = 330, scale = 0.9, width = 7, height = 8)
resampling_df
resampling_df %>% filter(contam_level >= 0, parameter == "m_perturbation", target %in% c("estimate", "confint_lower", "confint_upper"))
resampling_df %>% filter(contam_level >= 0, parameter == "m_perturbation", target %in% c("estimate", "confint_lower", "confint_upper")) %>%
select(-parameter)
resampling_df %>% filter(contam_level >= 0, parameter == "m_perturbation", target %in% c("estimate", "confint_lower", "confint_upper")) %>%
select(-parameter) %>% tidyr::pivot_wider(names_from = "target", values_from = "value") %>% group_by(method, pair_id, contam_level)
resampling_df %>% filter(contam_level >= 0, parameter == "m_perturbation", target %in% c("estimate", "confint_lower", "confint_upper")) %>%
select(-parameter) %>% tidyr::pivot_wider(names_from = "target", values_from = "value") %>% group_by(method, pair_id, contam_level)
resampling_df %>% filter(contam_level >= 0, parameter == "m_perturbation", target %in% c("estimate", "confint_lower", "confint_upper")) %>%
select(-parameter) %>% tidyr::pivot_wider(names_from = "target", values_from = "value") %>% group_by(method, pair_id, contam_level)
resampling_df %>% filter(contam_level >= 0, parameter == "m_perturbation", target %in% c("estimate", "confint_lower", "confint_upper")) %>%
select(-parameter) %>% tidyr::pivot_wider(names_from = "target", values_from = "value") %>% group_by(method, pair_id, contam_level) %>%
summarize(m = mean(estimate), m_lower_ci = mean(confint_lower, na.rm = TRUE), m_upper_ci = mean(confint_upper, na.rm = TRUE)) %>% ungroup() %>% group_by(method, pair_id)
resampling_df %>% filter(contam_level >= 0, parameter == "m_perturbation", target %in% c("estimate", "confint_lower", "confint_upper")) %>%
select(-parameter) %>% tidyr::pivot_wider(names_from = "target", values_from = "value") %>% group_by(method, pair_id,)
resampling_df %>% filter(contam_level >= 0, parameter == "m_perturbation", target %in% c("estimate", "confint_lower", "confint_upper")) %>%
select(-parameter) %>% tidyr::pivot_wider(names_from = "target", values_from = "value") %>% group_by(method, pair_id)
resampling_df %>% filter(contam_level >= 0, parameter == "m_perturbation", target %in% c("estimate", "confint_lower", "confint_upper")) %>%
select(-parameter) %>% tidyr::pivot_wider(names_from = "target", values_from = "value") %>% group_by(method, pair_id) %>%
mutate(baseline = estimate[contam_level == 0][1])
temp <- resampling_df %>% filter(contam_level >= 0, parameter == "m_perturbation", target %in% c("estimate", "confint_lower", "confint_upper")) %>%
select(-parameter) %>% tidyr::pivot_wider(names_from = "target", values_from = "value") %>% group_by(method, pair_id) %>%
mutate(baseline = estimate[contam_level == 0][1])
temp
tail(temp)
temp
temp %>% filter(contam_level == 0)
temp %>% filter(contam_level == -1)
temp %>% filter(contam_level == 0)
temp <- resampling_df %>% filter(parameter == "m_perturbation", target %in% c("estimate", "confint_lower", "confint_upper")) %>%
select(-parameter) %>% tidyr::pivot_wider(names_from = "target", values_from = "value") %>% group_by(method, pair_id) %>%
mutate(baseline = estimate[contam_level == 0][1])
temp
temp <- resampling_df %>% filter(parameter == "m_perturbation", target %in% c("estimate", "confint_lower", "confint_upper")) %>%
select(-parameter) %>% tidyr::pivot_wider(names_from = "target", values_from = "value") %>% group_by(method, pair_id) %>%
mutate(baseline = estimate[contam_level == -1][1])
temp
temp <- resampling_df %>% filter(parameter == "m_perturbation", target %in% c("estimate", "confint_lower", "confint_upper")) %>%
select(-parameter) %>% tidyr::pivot_wider(names_from = "target", values_from = "value") %>% group_by(method, pair_id) %>%
mutate(baseline = estimate[contam_level == -1][1]) %>% filter(pair_id == "ENSG00000131143:COX4I1_TSS")
temp
temp <- resampling_df %>% filter(parameter == "m_perturbation", target %in% c("estimate", "confint_lower", "confint_upper")) %>%
select(-parameter) %>% tidyr::pivot_wider(names_from = "target", values_from = "value") %>% group_by(method, pair_id) %>%
mutate(baseline = estimate[contam_level == -1][1]) %>% filter(pair_id == "ENSG00000131143:COX4I1_TSS") %>%
filter(contam_level >= 0)
temp
temp <- resampling_df %>% filter(parameter == "m_perturbation", target %in% c("estimate", "confint_lower", "confint_upper")) %>%
select(-parameter) %>% tidyr::pivot_wider(names_from = "target", values_from = "value") %>% group_by(method, pair_id) %>%
mutate(baseline = estimate[contam_level == -1][1]) %>% filter(pair_id == "ENSG00000131143:COX4I1_TSS") %>%
filter(contam_level >= 0) %>% mutate(cover = confint_lower < baseline & confint_upper > baseline)
temp
temp <- resampling_df %>% filter(parameter == "m_perturbation", target %in% c("estimate", "confint_lower", "confint_upper")) %>%
select(-parameter) %>% tidyr::pivot_wider(names_from = "target", values_from = "value") %>% group_by(method, pair_id) %>%
mutate(baseline = estimate[contam_level == -1][1]) %>% filter(contam_level >= 0) %>%
mutate(cover = confint_lower < baseline & confint_upper > baseline)
temp
tail(temp)
temp$cover %>% mean()
mean(temp$cover, na.rm = TRUE)
temp %% filter(contam_level == 0.0)
temp %>% filter(contam_level ==)
temp <- resampling_df %>% filter(parameter == "m_perturbation", target %in% c("estimate", "confint_lower", "confint_upper")) %>%
select(-parameter) %>% tidyr::pivot_wider(names_from = "target", values_from = "value") %>% group_by(method, pair_id) %>%
mutate(baseline = estimate[contam_level == -1][1]) %>% filter(contam_level >= 0) %>%
mutate(cover = confint_lower < baseline & confint_upper > baseline) %>% filter(contam_level == 0)
resampling_df %>% filter(parameter == "m_perturbation", target %in% c("estimate", "confint_lower", "confint_upper")) %>%
select(-parameter) %>% tidyr::pivot_wider(names_from = "target", values_from = "value") %>% group_by(method, pair_id) %>%
mutate(baseline = estimate[contam_level == -1][1]) %>% filter(contam_level >= 0) %>%
mutate(cover = confint_lower < baseline & confint_upper > baseline) %>% filter(contam_level == 0)
resampling_df %>% filter(parameter == "m_perturbation", target %in% c("estimate", "confint_lower", "confint_upper")) %>%
select(-parameter) %>% tidyr::pivot_wider(names_from = "target", values_from = "value") %>% group_by(method, pair_id) %>%
mutate(baseline = estimate[contam_level == -1][1]) %>% filter(contam_level >= 0) %>%
mutate(cover = confint_lower < baseline & confint_upper > baseline) %>% filter(contam_level == 0) %>%
summarize(m = mean(cover, na.rm = TRUE))
resampling_df %>% filter(parameter == "m_perturbation", target %in% c("estimate", "confint_lower", "confint_upper")) %>%
select(-parameter) %>% tidyr::pivot_wider(names_from = "target", values_from = "value") %>% group_by(method, pair_id) %>%
mutate(baseline = estimate[contam_level == -1][1]) %>% filter(contam_level >= 0) %>%
mutate(cover = confint_lower < baseline & confint_upper > baseline) %>% filter(contam_level == 0.05) %>%
summarize(m = mean(cover, na.rm = TRUE))
resampling_df %>% filter(parameter == "m_perturbation", target %in% c("estimate", "confint_lower", "confint_upper")) %>%
select(-parameter) %>% tidyr::pivot_wider(names_from = "target", values_from = "value") %>% group_by(method, pair_id) %>%
mutate(baseline = estimate[contam_level == -1][1]) %>% filter(contam_level >= 0) %>%
mutate(cover = confint_lower < baseline & confint_upper > baseline) %>% filter(contam_level == 0.05) %>%
summarize(m = mean(cover, na.rm = TRUE)) %>% print(n = 100)
