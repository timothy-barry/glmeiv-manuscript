}) %>% do.call(what = "rbind", args = .) %>%
dplyr::mutate(beta_g_disp = paste0("beta[g] == ", round(beta_g, 2)) %>% factor())
# subplot a) bias in pi = 1/2 model
p_a <- ggplot(data = to_plot_a, mapping = aes(x = Threshold, y = Estimate)) +
geom_hline(yintercept = 0.5, col = "darkred") +
facet_wrap(.~beta_g_disp, labeller = label_parsed, scales = "free_y") +
theme_cowplot(font_size = 11) + scale_x_continuous(expand = c(NA, 0)) +
geom_vline(data = dplyr::filter(to_plot_a, beta_g_disp == "beta[g] == 1"),
mapping = aes(xintercept = beta_gs[1]/2), col = my_cols[2]) +
geom_vline(data = dplyr::filter(to_plot_a, beta_g_disp == "beta[g] == 1.35"),
mapping = aes(xintercept = beta_gs[2]/2), col = my_cols[2]) +
geom_vline(data = dplyr::filter(to_plot_a, beta_g_disp == "beta[g] == 1.5"),
mapping = aes(xintercept = beta_gs[3]/2), col = my_cols[2]) +
geom_line()
# subplot b) bias as c -> infinity for pi in [0,1/2]
pi <- seq(0.0, 0.5, length.out = 11)
Estimate <- 1 - pi
to_plot_b <- data.frame(pi = pi, Estimate = Estimate)
load_all("~/research_code/glmeiv/")
load_all("~/research_code/glmeiv/")
load_all("~/research_code/glmeiv/")
my_cols <- c("firebrick3", "dodgerblue3")
library(magrittr)
library(ggplot2)
library(cowplot)
# a) estimate vs. threshold for different values of beta_g
x_grid <- seq(0, 7, length.out = 501)
beta_gs <- c(1, qnorm(0.75) * 2, 1.5)
to_plot_a <- lapply(X = beta_gs, function(curr_beta_g) {
y <- get_tresholding_estimator_bias(m_perturbation = 1,
g_perturbation = curr_beta_g,
pi = 0.5,
c = x_grid,
return_bias = FALSE)
data.frame(Estimate = y, Threshold = x_grid, beta_g = curr_beta_g)
}) %>% do.call(what = "rbind", args = .) %>%
dplyr::mutate(beta_g_disp = paste0("beta[g] == ", round(beta_g, 2)) %>% factor())
# subplot a) bias in pi = 1/2 model
p_a <- ggplot(data = to_plot_a, mapping = aes(x = Threshold, y = Estimate)) +
geom_hline(yintercept = 0.5, col = "darkred") +
facet_wrap(.~beta_g_disp, labeller = label_parsed, scales = "free_y") +
theme_cowplot(font_size = 11) + scale_x_continuous(expand = c(NA, 0)) +
geom_vline(data = dplyr::filter(to_plot_a, beta_g_disp == "beta[g] == 1"),
mapping = aes(xintercept = beta_gs[1]/2), col = my_cols[2]) +
geom_vline(data = dplyr::filter(to_plot_a, beta_g_disp == "beta[g] == 1.35"),
mapping = aes(xintercept = beta_gs[2]/2), col = my_cols[2]) +
geom_vline(data = dplyr::filter(to_plot_a, beta_g_disp == "beta[g] == 1.5"),
mapping = aes(xintercept = beta_gs[3]/2), col = my_cols[2]) +
geom_line()
# subplot b) bias as c -> infinity for pi in [0,1/2]
pi <- seq(0.0, 0.5, length.out = 11)
Estimate <- 1 - pi
to_plot_b <- data.frame(pi = pi, Estimate = Estimate)
# subplot c) bias-variance tradeoff
ggplot(data = to_plot_b, mapping = aes(x = pi, y = Estimate)) + geom_line() +
scale_x_continuous(trans = "reverse", expand = c(NA, 0), limits = c(0.5, -0.02)) + theme_cowplot(font_size = 11) +
geom_segment(aes(x=0.0, xend=0.5, y=1, yend=1), lwd = 0.3) + scale_y_continuous(expand = c(0, NA), limits = c(0.5, 1.02)) +
xlab(expression(pi))
p_a
p_b
to_plot_b
# subplot c) bias-variance tradeoff
ggplot(data = to_plot_b, mapping = aes(x = pi, y = Estimate)) + geom_line() +
scale_x_continuous(trans = "reverse", expand = c(NA, 0), limits = c(0.5, -0.02)) + theme_cowplot(font_size = 11) +
geom_segment(aes(x=0.0, xend=0.5, y=1, yend=1), lwd = 0.3) + scale_y_continuous(expand = c(0, NA), limits = c(0.5, 1.02)) +
xlab(expression(pi))
p_b <- ggplot(data = to_plot_b, mapping = aes(x = pi, y = Estimate)) + geom_line() +
scale_x_continuous(trans = "reverse", expand = c(NA, 0), limits = c(0.5, -0.02)) + theme_cowplot(font_size = 11) +
geom_segment(aes(x=0.0, xend=0.5, y=1, yend=1), lwd = 0.3) + scale_y_continuous(expand = c(0, NA), limits = c(0.5, 1.02)) +
xlab(expression(pi))
p_b
p_a
get_thresholding_estimator_est_no_int(c = 0.1, g_beta = 1.0, pi = 0.1, m_beta = 1)
get_thresholding_estimator_est_no_int(c = 0.2, g_beta = 1.0, pi = 0.1, m_beta = 1)
get_thresholding_estimator_est_no_int(c = 0.10, g_beta = 1.0, pi = 0.1, m_beta = 1)
get_thresholding_estimator_est_no_int(c = 10, g_beta = 1.0, pi = 0.1, m_beta = 1)
get_thresholding_estimator_est_no_int(c = 5, g_beta = 1.0, pi = 0.1, m_beta = 1)
get_thresholding_estimator_est_no_int(c = 4, g_beta = 1.0, pi = 0.1, m_beta = 1)
get_thresholding_estimator_est_no_int(c = 6, g_beta = 1.0, pi = 0.1, m_beta = 1)
get_thresholding_estimator_est_no_int(c = 7, g_beta = 1.0, pi = 0.1, m_beta = 1)
get_thresholding_estimator_est_no_int(c = 8, g_beta = 1.0, pi = 0.1, m_beta = 1)
get_thresholding_estimator_est_no_int(c = 8, g_beta = 1.0, pi = 0.4, m_beta = 1)
get_thresholding_estimator_est_no_int(c = 8, g_beta = 1.0, pi = 0.5, m_beta = 1)
get_thresholding_estimator_est_no_int(c = 7, g_beta = 1.0, pi = 0.5, m_beta = 1)
get_thresholding_estimator_est_no_int(c = 1, g_beta = 1.0, pi = 0.5, m_beta = 1)
get_thresholding_estimator_est_no_int(c = 1, g_beta = 2.0, pi = 0.5, m_beta = 1)
get_thresholding_estimator_est_no_int(c = 4, g_beta = 2.0, pi = 0.5, m_beta = 1)
get_thresholding_estimator_est_no_int(c = 5, g_beta = 2.0, pi = 0.5, m_beta = 1)
get_thresholding_estimator_est_no_int(c = 5, g_beta = 4.0, pi = 0.5, m_beta = 1)
get_thresholding_estimator_est_no_int(c = 2, g_beta = 1.0, pi = 0.5, m_beta = 1)
get_thresholding_estimator_est_no_int(c = 1, g_beta = 1.0, pi = 0.5, m_beta = 1)
get_thresholding_estimator_est_no_int(c = .1, g_beta = 1.0, pi = 0.5, m_beta = 1)
get_thresholding_estimator_est_no_int(c = 2, g_beta = 1.0, pi = 0.5, m_beta = 1)
get_thresholding_estimator_est_no_int(c = 3, g_beta = 1.0, pi = 0.5, m_beta = 1)
get_thresholding_estimator_est_no_int(c = 4, g_beta = 1.0, pi = 0.5, m_beta = 1)
curve(expr = get_thresholding_estimator_est_no_int(c = x, g_beta = 1.0, pi = 0.5, m_beta = 1), from = 0, to = 4)
curve(expr = get_thresholding_estimator_est_no_int(c = x, g_beta = 1.0, pi = 0.5, m_beta = 1),from = 0, to = 4)
curve(expr = get_thresholding_estimator_est_no_int(c = x, g_beta = 5.0, pi = 0.5, m_beta = 1),from = 0, to = 4)
curve(expr = get_thresholding_estimator_est_no_int(c = x, g_beta = .5, pi = 0.5, m_beta = 1),from = 0, to = 4)
curve(expr = get_thresholding_estimator_est_no_int(c = x, g_beta = .5, pi = 0.2, m_beta = 1),from = 0, to = 4)
curve(expr = get_thresholding_estimator_est_no_int(c = x, g_beta = 1, pi = 0.2, m_beta = 1),from = 0, to = 4)
curve(expr = get_thresholding_estimator_est_no_int(c = x, g_beta = 1, pi = 0.1, m_beta = 1),from = 0, to = 4)
curve(expr = get_thresholding_estimator_est_no_int(c = x, g_beta = 1, pi = 0.1, m_beta = 1), from = 0, to = 5)
curve(expr = get_thresholding_estimator_est_no_int(c = x, g_beta = 1, pi = 0.1, m_beta = 1), from = 0, to = 6)
curve(expr = get_thresholding_estimator_var_no_int(c = x, g_beta = 1, pi = 0.1, m_beta = 1, n = 1000), from = 0, to = 6)
get_thresholding_estimator_var_no_int
load_all("~/research_code/glmeiv/")
my_cols <- c("firebrick3", "dodgerblue3")
library(magrittr)
library(ggplot2)
library(cowplot)
# a) estimate vs. threshold for different values of beta_g
x_grid <- seq(0, 7, length.out = 501)
beta_gs <- c(1, qnorm(0.75) * 2, 1.5)
to_plot_a <- lapply(X = beta_gs, function(curr_beta_g) {
y <- get_tresholding_estimator_bias(m_perturbation = 1,
g_perturbation = curr_beta_g,
pi = 0.5,
c = x_grid,
return_bias = FALSE)
data.frame(Estimate = y, Threshold = x_grid, beta_g = curr_beta_g)
}) %>% do.call(what = "rbind", args = .) %>%
dplyr::mutate(beta_g_disp = paste0("beta[g] == ", round(beta_g, 2)) %>% factor())
# subplot a) bias in pi = 1/2 model
p_a <- ggplot(data = to_plot_a, mapping = aes(x = Threshold, y = Estimate)) +
geom_hline(yintercept = 0.5, col = "darkred") +
facet_wrap(.~beta_g_disp, labeller = label_parsed, scales = "free_y") +
theme_cowplot(font_size = 11) + scale_x_continuous(expand = c(NA, 0)) +
geom_vline(data = dplyr::filter(to_plot_a, beta_g_disp == "beta[g] == 1"),
mapping = aes(xintercept = beta_gs[1]/2), col = my_cols[2]) +
geom_vline(data = dplyr::filter(to_plot_a, beta_g_disp == "beta[g] == 1.35"),
mapping = aes(xintercept = beta_gs[2]/2), col = my_cols[2]) +
geom_vline(data = dplyr::filter(to_plot_a, beta_g_disp == "beta[g] == 1.5"),
mapping = aes(xintercept = beta_gs[3]/2), col = my_cols[2]) +
geom_line()
# subplot b) bias as c -> infinity for pi in [0,1/2]
pi <- seq(0.0, 0.5, length.out = 11)
Estimate <- 1 - pi
to_plot_b <- data.frame(pi = pi, Estimate = Estimate)
p_b <- ggplot(data = to_plot_b, mapping = aes(x = pi, y = Estimate)) + geom_line() +
scale_x_continuous(trans = "reverse", expand = c(NA, 0), limits = c(0.5, -0.02)) + theme_cowplot(font_size = 11) +
geom_segment(aes(x=0.0, xend=0.5, y=1, yend=1), lwd = 0.3) + scale_y_continuous(expand = c(0, NA), limits = c(0.5, 1.02)) +
xlab(expression(pi))
curve(expr = get_thresholding_estimator_est_no_int(c = x, g_beta = 1, pi = 0.1, m_beta = 1), from = 0, to = 6)
curve(expr = get_thresholding_estimator_var_no_int(c = x, g_beta = 1, pi = 0.1, m_beta = 1, n = 1000), from = 0, to = 6)
curve(expr = get_thresholding_estimator_est_no_int(c = x, g_beta = 1, pi = 0.1, m_beta = 1), from = 0, to = 6)
curve(expr = get_thresholding_estimator_var_no_int(c = x, g_beta = 1, pi = 0.1, m_beta = 1, n = 1000), from = 0, to = 6)
curve(expr = get_thresholding_estimator_var_no_int(c = x, g_beta = 1, pi = 0.1, m_beta = 1, n = 1000), from = 0, to = 5)
curve(expr = get_thresholding_estimator_var_no_int(c = x, g_beta = 1, pi = 0.1, m_beta = 1, n = 1000), from = 0, to = 4)
curve(expr = get_thresholding_estimator_var_no_int(c = x, g_beta = 1, pi = 0.1, m_beta = 1, n = 1000), from = 0, to = 3)
curve(expr = get_thresholding_estimator_est_no_int(c = x, g_beta = 1, pi = 0.1, m_beta = 1), from = 0, to = 3)
curve(expr = get_thresholding_estimator_est_no_int(c = x, g_beta = 1, pi = 0.1, m_beta = 1), from = 0, to = 34)
curve(expr = get_thresholding_estimator_est_no_int(c = x, g_beta = 1, pi = 0.1, m_beta = 1), from = 0, to = 4)
curve(expr = get_thresholding_estimator_var_no_int(c = x, g_beta = 1, pi = 0.1, m_beta = 1, n = 1000), from = 0, to = 4)
curve(expr = get_thresholding_estimator_est_no_int(c = x, g_beta = 1, pi = 0.1, m_beta = 1) %>% log(), from = 0, to = 4)
curve(expr = get_thresholding_estimator_est_no_int(c = x, g_beta = 1, pi = 0.1, m_beta = 1), from = 0, to = 4)
curve(expr = get_thresholding_estimator_var_no_int(c = x, g_beta = 1, pi = 0.1, m_beta = 1, n = 1000), from = 0, to = 4)
curve(expr = 1 - get_thresholding_estimator_est_no_int(c = x, g_beta = 1, pi = 0.1, m_beta = 1), from = 0, to = 4)
curve(expr = get_thresholding_estimator_var_no_int(c = x, g_beta = 1, pi = 0.1, m_beta = 1, n = 1000), from = 0, to = 4)
curve(expr = 1 - get_thresholding_estimator_est_no_int(c = x, g_beta = 1, pi = 0.1, m_beta = 1), from = 0, to = 4)
curve(expr = get_thresholding_estimator_var_no_int(c = x, g_beta = 1, pi = 0.1, m_beta = 1, n = 1000), from = 0, to = 4)
curve(expr = 1 - get_thresholding_estimator_est_no_int(c = x, g_beta = 1, pi = 0.1, m_beta = 1), from = 0, to = 4)
# subplot c) bias-variance tradeoff
xgrid <- seq(0,4)
# subplot c) bias-variance tradeoff
xgrid <- seq(0, 4, length.out = 1000)
zxgrid
xgrid
# subplot c) bias-variance tradeoff
xgrid <- seq(0, 4, length.out = 1001)
xgrid
1 - get_thresholding_estimator_est_no_int(c = xgrid, g_beta = 1, pi = 0.1, m_beta = 1)
bias_sq <- (1 - get_thresholding_estimator_est_no_int(c = xgrid, g_beta = 1, pi = 0.1, m_beta = 1))^2
bias_sq
plot(bias_sq)
var <- get_thresholding_estimator_var_no_int(c = x, g_beta = 1, pi = 0.1, m_beta = 1, n = 1000)
var <- get_thresholding_estimator_var_no_int(c = xgrid, g_beta = 1, pi = 0.1, m_beta = 1, n = 1000)
var
plot(var)
rep(c("Bias", "Variance", "MSE"))
rep(c("Bias", "Variance", "MSE"), times = 10)
rep(c("Bias", "Variance", "MSE"), each = 10)
rep(c("Bias", "Variance", "MSE"), each = length(xgrid))
to_plot_c <- data.frame(metric = rep(c("Bias^2", "Variance", "MSE"), each = length(xgrid)),
value = c(bias_sq, var, bias_sq + var))
to_plot_c
rep(xgrid, times = 3)
to_plot_c <- data.frame(metric = rep(c("Bias^2", "Variance", "MSE"), each = length(xgrid)),
value = c(bias_sq, var, bias_sq + var),
threshold = rep(xgrid, times = 3))
head(to_plot_c)
ggplot(data = to_plot_c, mapping = aes(x = threshold, y = value))
ggplot(data = to_plot_c, mapping = aes(x = threshold, y = value)) + geom_line()
ggplot(data = to_plot_c, mapping = aes(x = threshold, y = value, col = metric)) + geom_line()
# subplot c) bias-variance tradeoff
xgrid <- seq(0, 4, length.out = 1001)
g_beta <- 1
pi <- 0.1
m_beta <- 1
bias_sq <- (1 - get_thresholding_estimator_est_no_int(c = xgrid, g_beta = g_beta, pi = pi, m_beta = m_beta))^2
var <- get_thresholding_estimator_var_no_int(c = xgrid, g_beta = g_beta, pi = pi, m_beta = m_beta, n = 1000)
to_plot_c <- data.frame(metric = rep(c("Bias^2", "Variance", "MSE"), each = length(xgrid)),
value = c(bias_sq, var, bias_sq + var),
threshold = rep(xgrid, times = 3))
ggplot(data = to_plot_c, mapping = aes(x = threshold, y = value, col = metric)) + geom_line()
ggplot(data = to_plot_c, mapping = aes(x = threshold, y = value, col = metric)) + geom_line() + theme_cowplot(font_size = 11)
# subplot c) bias-variance tradeoff
xgrid <- seq(0, 3, length.out = 1001)
g_beta <- 1
pi <- 0.1
m_beta <- 1
bias_sq <- (1 - get_thresholding_estimator_est_no_int(c = xgrid, g_beta = g_beta, pi = pi, m_beta = m_beta))^2
var <- get_thresholding_estimator_var_no_int(c = xgrid, g_beta = g_beta, pi = pi, m_beta = m_beta, n = 1000)
to_plot_c <- data.frame(metric = rep(c("Bias^2", "Variance", "MSE"), each = length(xgrid)),
value = c(bias_sq, var, bias_sq + var),
threshold = rep(xgrid, times = 3))
ggplot(data = to_plot_c, mapping = aes(x = threshold, y = value, col = metric)) + geom_line() + theme_cowplot(font_size = 11)
# subplot c) bias-variance tradeoff
xgrid <- seq(0, 3.25, length.out = 1001)
g_beta <- 1
pi <- 0.1
m_beta <- 1
bias_sq <- (1 - get_thresholding_estimator_est_no_int(c = xgrid, g_beta = g_beta, pi = pi, m_beta = m_beta))^2
var <- get_thresholding_estimator_var_no_int(c = xgrid, g_beta = g_beta, pi = pi, m_beta = m_beta, n = 1000)
to_plot_c <- data.frame(metric = rep(c("Bias^2", "Variance", "MSE"), each = length(xgrid)),
value = c(bias_sq, var, bias_sq + var),
threshold = rep(xgrid, times = 3))
ggplot(data = to_plot_c, mapping = aes(x = threshold, y = value, col = metric)) + geom_line() + theme_cowplot(font_size = 11)
ggplot(data = to_plot_c, mapping = aes(x = threshold, y = value, col = metric)) + geom_line() + theme_cowplot(font_size = 11) + xlab("Threshold")
ggplot(data = to_plot_c, mapping = aes(x = threshold, y = value, col = metric)) + geom_line() + theme_cowplot(font_size = 11) + xlab("Threshold") + ylab("Value")
# subplot c) bias-variance tradeoff
xgrid <- seq(0, 3.25, length.out = 1001)
g_beta <- 1
pi <- 0.25
m_beta <- 1
n <- 1000
bias_sq <- (1 - get_thresholding_estimator_est_no_int(c = xgrid, g_beta = g_beta, pi = pi, m_beta = m_beta))^2
var <- get_thresholding_estimator_var_no_int(c = xgrid, g_beta = g_beta, pi = pi, m_beta = m_beta, n = n)
to_plot_c <- data.frame(metric = rep(c("Bias^2", "Variance", "MSE"), each = length(xgrid)),
value = c(bias_sq, var, bias_sq + var),
threshold = rep(xgrid, times = 3))
ggplot(data = to_plot_c, mapping = aes(x = threshold, y = value, col = metric)) + geom_line() + theme_cowplot(font_size = 11) + xlab("Threshold") + ylab("Value")
# subplot c) bias-variance tradeoff
xgrid <- seq(0, 3.25, length.out = 1001)
g_beta <- 1
pi <- 0.25
m_beta <- 1
n <- 5000
bias_sq <- (1 - get_thresholding_estimator_est_no_int(c = xgrid, g_beta = g_beta, pi = pi, m_beta = m_beta))^2
var <- get_thresholding_estimator_var_no_int(c = xgrid, g_beta = g_beta, pi = pi, m_beta = m_beta, n = n)
to_plot_c <- data.frame(metric = rep(c("Bias^2", "Variance", "MSE"), each = length(xgrid)),
value = c(bias_sq, var, bias_sq + var),
threshold = rep(xgrid, times = 3))
ggplot(data = to_plot_c, mapping = aes(x = threshold, y = value, col = metric)) + geom_line() + theme_cowplot(font_size = 11) + xlab("Threshold") + ylab("Value")
# subplot c) bias-variance tradeoff
xgrid <- seq(0, 3.25, length.out = 1001)
g_beta <- 1
pi <- 0.25
m_beta <- 1
n <- 10000
bias_sq <- (1 - get_thresholding_estimator_est_no_int(c = xgrid, g_beta = g_beta, pi = pi, m_beta = m_beta))^2
var <- get_thresholding_estimator_var_no_int(c = xgrid, g_beta = g_beta, pi = pi, m_beta = m_beta, n = n)
to_plot_c <- data.frame(metric = rep(c("Bias^2", "Variance", "MSE"), each = length(xgrid)),
value = c(bias_sq, var, bias_sq + var),
threshold = rep(xgrid, times = 3))
ggplot(data = to_plot_c, mapping = aes(x = threshold, y = value, col = metric)) + geom_line() + theme_cowplot(font_size = 11) + xlab("Threshold") + ylab("Value")
# subplot c) bias-variance tradeoff
xgrid <- seq(1, 5, length.out = 1001)
g_beta <- 1
pi <- 0.25
m_beta <- 1
n <- 10000
bias_sq <- (1 - get_thresholding_estimator_est_no_int(c = xgrid, g_beta = g_beta, pi = pi, m_beta = m_beta))^2
var <- get_thresholding_estimator_var_no_int(c = xgrid, g_beta = g_beta, pi = pi, m_beta = m_beta, n = n)
to_plot_c <- data.frame(metric = rep(c("Bias^2", "Variance", "MSE"), each = length(xgrid)),
value = c(bias_sq, var, bias_sq + var),
threshold = rep(xgrid, times = 3))
ggplot(data = to_plot_c, mapping = aes(x = threshold, y = value, col = metric)) + geom_line() + theme_cowplot(font_size = 11) + xlab("Threshold") + ylab("Value")
# subplot c) bias-variance tradeoff
xgrid <- seq(1, 4, length.out = 1001)
g_beta <- 1
pi <- 0.25
m_beta <- 1
n <- 10000
bias_sq <- (1 - get_thresholding_estimator_est_no_int(c = xgrid, g_beta = g_beta, pi = pi, m_beta = m_beta))^2
var <- get_thresholding_estimator_var_no_int(c = xgrid, g_beta = g_beta, pi = pi, m_beta = m_beta, n = n)
to_plot_c <- data.frame(metric = rep(c("Bias^2", "Variance", "MSE"), each = length(xgrid)),
value = c(bias_sq, var, bias_sq + var),
threshold = rep(xgrid, times = 3))
ggplot(data = to_plot_c, mapping = aes(x = threshold, y = value, col = metric)) + geom_line() + theme_cowplot(font_size = 11) + xlab("Threshold") + ylab("Value")
# subplot c) bias-variance tradeoff
xgrid <- seq(1, 3.5, length.out = 1001)
g_beta <- 1
pi <- 0.25
m_beta <- 1
n <- 10000
bias_sq <- (1 - get_thresholding_estimator_est_no_int(c = xgrid, g_beta = g_beta, pi = pi, m_beta = m_beta))^2
var <- get_thresholding_estimator_var_no_int(c = xgrid, g_beta = g_beta, pi = pi, m_beta = m_beta, n = n)
to_plot_c <- data.frame(metric = rep(c("Bias^2", "Variance", "MSE"), each = length(xgrid)),
value = c(bias_sq, var, bias_sq + var),
threshold = rep(xgrid, times = 3))
ggplot(data = to_plot_c, mapping = aes(x = threshold, y = value, col = metric)) + geom_line() + theme_cowplot(font_size = 11) + xlab("Threshold") + ylab("Value")
# subplot c) bias-variance tradeoff
xgrid <- seq(1, 3.75, length.out = 1001)
g_beta <- 1
pi <- 0.25
m_beta <- 1
n <- 10000
bias_sq <- (1 - get_thresholding_estimator_est_no_int(c = xgrid, g_beta = g_beta, pi = pi, m_beta = m_beta))^2
var <- get_thresholding_estimator_var_no_int(c = xgrid, g_beta = g_beta, pi = pi, m_beta = m_beta, n = n)
to_plot_c <- data.frame(metric = rep(c("Bias^2", "Variance", "MSE"), each = length(xgrid)),
value = c(bias_sq, var, bias_sq + var),
threshold = rep(xgrid, times = 3))
ggplot(data = to_plot_c, mapping = aes(x = threshold, y = value, col = metric)) + geom_line() + theme_cowplot(font_size = 11) + xlab("Threshold") + ylab("Value")
10000
10000 * 0.25
ggplot(data = to_plot_c, mapping = aes(x = threshold, y = value, col = metric)) + geom_line() + theme_cowplot(font_size = 11) + xlab("Threshold") + ylab("")
# subplot c) bias-variance tradeoff
xgrid <- seq(1, 3.8, length.out = 1001)
g_beta <- 1
pi <- 0.25
m_beta <- 1
n <- 10000
bias_sq <- (1 - get_thresholding_estimator_est_no_int(c = xgrid, g_beta = g_beta, pi = pi, m_beta = m_beta))^2
var <- get_thresholding_estimator_var_no_int(c = xgrid, g_beta = g_beta, pi = pi, m_beta = m_beta, n = n)
to_plot_c <- data.frame(metric = rep(c("Bias^2", "Variance", "MSE"), each = length(xgrid)),
value = c(bias_sq, var, bias_sq + var),
threshold = rep(xgrid, times = 3))
ggplot(data = to_plot_c, mapping = aes(x = threshold, y = value, col = metric)) + geom_line() + theme_cowplot(font_size = 11) + xlab("Threshold") + ylab("")
# subplot c) bias-variance tradeoff
xgrid <- seq(1, 3.9, length.out = 1001)
g_beta <- 1
pi <- 0.25
m_beta <- 1
n <- 10000
bias_sq <- (1 - get_thresholding_estimator_est_no_int(c = xgrid, g_beta = g_beta, pi = pi, m_beta = m_beta))^2
var <- get_thresholding_estimator_var_no_int(c = xgrid, g_beta = g_beta, pi = pi, m_beta = m_beta, n = n)
to_plot_c <- data.frame(metric = rep(c("Bias^2", "Variance", "MSE"), each = length(xgrid)),
value = c(bias_sq, var, bias_sq + var),
threshold = rep(xgrid, times = 3))
ggplot(data = to_plot_c, mapping = aes(x = threshold, y = value, col = metric)) + geom_line() + theme_cowplot(font_size = 11) + xlab("Threshold") + ylab("")
# subplot c) bias-variance tradeoff
xgrid <- seq(1, 3.9, length.out = 1001)
g_beta <- 2
pi <- 0.25
m_beta <- 1
n <- 10000
bias_sq <- (1 - get_thresholding_estimator_est_no_int(c = xgrid, g_beta = g_beta, pi = pi, m_beta = m_beta))^2
var <- get_thresholding_estimator_var_no_int(c = xgrid, g_beta = g_beta, pi = pi, m_beta = m_beta, n = n)
to_plot_c <- data.frame(metric = rep(c("Bias^2", "Variance", "MSE"), each = length(xgrid)),
value = c(bias_sq, var, bias_sq + var),
threshold = rep(xgrid, times = 3))
ggplot(data = to_plot_c, mapping = aes(x = threshold, y = value, col = metric)) + geom_line() + theme_cowplot(font_size = 11) + xlab("Threshold") + ylab("")
# subplot c) bias-variance tradeoff
xgrid <- seq(1, 3.9, length.out = 1001)
g_beta <- 1
pi <- 0.25
m_beta <- 1
n <- 10000
bias_sq <- (1 - get_thresholding_estimator_est_no_int(c = xgrid, g_beta = g_beta, pi = pi, m_beta = m_beta))^2
var <- get_thresholding_estimator_var_no_int(c = xgrid, g_beta = g_beta, pi = pi, m_beta = m_beta, n = n)
to_plot_c <- data.frame(metric = rep(c("Bias^2", "Variance", "MSE"), each = length(xgrid)),
value = c(bias_sq, var, bias_sq + var),
threshold = rep(xgrid, times = 3))
ggplot(data = to_plot_c, mapping = aes(x = threshold, y = value, col = metric)) + geom_line() + theme_cowplot(font_size = 11) + xlab("Threshold") + ylab("")
ggplot(data = to_plot_c, mapping = aes(x = threshold, y = value, col = metric)) + geom_line() + theme_cowplot(font_size = 11) + xlab("Threshold") + ylab("") +
scale_x_discrete(labels = c(Bias = expression(paste0(Bias^2))))
ggplot(data = to_plot_c, mapping = aes(x = threshold, y = value, col = metric)) + geom_line() + theme_cowplot(font_size = 11) + xlab("Threshold") + ylab("") +
scale_color_discrete(labels = c(Bias = expression(paste0(Bias^2))))
ggplot(data = to_plot_c, mapping = aes(x = threshold, y = value, col = metric)) + geom_line() + theme_cowplot(font_size = 11) + xlab("Threshold") + ylab("") +
scale_color_discrete(labels = c(Bias = expression(paste0(Bias^2))))
ggplot(data = to_plot_c, mapping = aes(x = threshold, y = value, col = metric)) + geom_line() + theme_cowplot(font_size = 11) + xlab("Threshold") + ylab("")
unique(to_plot_c$metric)
ggplot(data = to_plot_c, mapping = aes(x = threshold, y = value, col = metric)) + geom_line() + theme_cowplot(font_size = 11) + xlab("Threshold") + ylab("") +
scale_color_manual(values = unique(to_plot_c$metric), labels = c( expression("Bias^2"), "Variance", "MSE" ))
ggplot(data = to_plot_c, mapping = aes(x = threshold, y = value, col = metric)) + geom_line() + theme_cowplot(font_size = 11) + xlab("Threshold") + ylab("") +
scale_color_manual(labels = c( expression("Bias^2"), "Variance", "MSE" ))
ggplot(data = to_plot_c, mapping = aes(x = threshold, y = value, col = metric)) + geom_line() + theme_cowplot(font_size = 11) + xlab("Threshold") + ylab("") +
scale_color_manual(values = c("red", "blue", "green"), labels = c( expression("Bias^2"), "Variance", "MSE"))
ggplot(data = to_plot_c, mapping = aes(x = threshold, y = value, col = metric)) + geom_line() + theme_cowplot(font_size = 11) + xlab("Threshold") + ylab("") +
scale_color_manual(values = c("red", "blue", "green"), labels = c(expression(Bias^2), "Variance", "MSE"))
ggplot(data = to_plot_c, mapping = aes(x = threshold, y = value, col = metric)) + geom_line() + theme_cowplot(font_size = 11) + xlab("Threshold") + ylab("") +
scale_color_manual(values = c(my_cols[1], my_cols[2], "black"), labels = c(expression(Bias^2), "Variance", "MSE"))
ggplot(data = to_plot_c, mapping = aes(x = threshold, y = value, col = metric)) + geom_line() + theme_cowplot(font_size = 11) + xlab("Threshold") + ylab("") +
scale_color_manual(values = c(my_cols[1], "black", my_cols[2]), labels = c(expression(Bias^2), "Variance", "MSE"))
ggplot(data = to_plot_c, mapping = aes(x = threshold, y = value, col = metric)) + geom_line() + theme_cowplot(font_size = 11) + xlab("Threshold") + ylab("") +
scale_color_manual(values = c(my_cols[1], "black", my_cols[2]), labels = c(expression(Bias^2), "Variance", "MSE"), breaks = c(expression(Bias^2), "Variance", "MSE"))
ggplot(data = to_plot_c, mapping = aes(x = threshold, y = value, col = metric)) + geom_line() + theme_cowplot(font_size = 11) + xlab("Threshold") + ylab("") +
scale_color_manual(values = c(my_cols[1], my_cols[2], "black"), labels = c(expression(Bias^2), "Variance", "MSE"), breaks = c(expression(Bias^2), "Variance", "MSE"))
p_c <- ggplot(data = to_plot_c, mapping = aes(x = threshold, y = value, col = metric)) + geom_line() + theme_cowplot(font_size = 11) + xlab("Threshold") + ylab("") +
scale_color_manual(values = c(my_cols[1], my_cols[2], "black"), labels = c(expression(Bias^2), "Variance", "MSE"), breaks = c(expression(Bias^2), "Variance", "MSE"))
p_C
p_C
p_c
p_c <- ggplot(data = to_plot_c, mapping = aes(x = threshold, y = value, col = metric)) + geom_line() + theme_cowplot(font_size = 11) + xlab("Threshold") + ylab("") +
scale_color_manual(values = c(my_cols[1], my_cols[2], "black"), labels = c("MSE", expression(Bias^2), "Variance"), breaks = c("MSE", expression(Bias^2), "Variance"))
p_c
p_c <- ggplot(data = to_plot_c, mapping = aes(x = threshold, y = value, col = metric)) + geom_line() + theme_cowplot(font_size = 11) + xlab("Threshold") + ylab("") +
scale_color_manual(values = c(my_cols[1], "black", my_cols[2]), labels = c("MSE", expression(Bias^2), "Variance"), breaks = c("MSE", expression(Bias^2), "Variance"))
p_c
p_c <- ggplot(data = to_plot_c, mapping = aes(x = threshold, y = value, col = metric)) + geom_line() + theme_cowplot(font_size = 11) + xlab("Threshold") + ylab("") +
scale_color_manual(values = c("black", my_cols[1], my_cols[2]), labels = c("MSE", expression(Bias^2), "Variance"), breaks = c("MSE", expression(Bias^2), "Variance"))
p_c
p_b
p_a
p_b
p_c
bias_sq <- (1 - get_thresholding_estimator_est_no_int(c = xgrid, g_beta = g_beta, pi = pi, m_beta = m_beta))^2
var <- get_thresholding_estimator_var_no_int(c = xgrid, g_beta = g_beta, pi = pi, m_beta = m_beta, n = n)
to_plot_c <- data.frame(Metric = rep(c("Bias^2", "Variance", "MSE"), each = length(xgrid)),
value = c(bias_sq, var, bias_sq + var),
threshold = rep(xgrid, times = 3))
p_c <- ggplot(data = to_plot_c, mapping = aes(x = threshold, y = value, col = Metric)) + geom_line() + theme_cowplot(font_size = 11) + xlab("Threshold") + ylab("") +
scale_color_manual(values = c("black", my_cols[1], my_cols[2]), labels = c("MSE", expression(Bias^2), "Variance"), breaks = c("MSE", expression(Bias^2), "Variance"))
p_c
# combine
plot_grid(p_b, p_c)
# combine
plot_grid(p_b, p_c, align = "v")
# combine
plot_grid(p_b, p_c, align = "h")
# combine
plot_grid(p_b, p_c, align = "h", rel_widths = c(1,2))
# combine
plot_grid(p_b, p_c, align = "h", rel_widths = c(1,2), labels = c("b", "c"))
p_bottom <- plot_grid(p_b, p_c, align = "h", rel_widths = c(1,2), labels = c("b", "c"))
p_bottom
# combine
p_bottom <- plot_grid(p_b, p_c, align = "h", ncol = 2, rel_widths = c(1,2), labels = c("b", "c"))
p_bottom
p <- plot_grid(p_a, p_bottom)
p
p <- plot_grid(p_a, p_bottomm nrow = 2)
p <- plot_grid(p_a, p_bottom, nrow = 2)
p
p <- plot_grid(p_a, p_bottom, nrow = 2, align = "vh")
p <- plot_grid(p_a, p_bottom, nrow = 2, align = "v")
p <- plot_grid(p_a, p_bottom, nrow = 2, align = "h")
p <- plot_grid(p_a, p_bottom, nrow = 2, labels = c("a", ""))
p
p <- plot_grid(p_a, p_bottom, nrow = 2, labels = c("a", ""), align = "v")
p <- plot_grid(p_a, p_bottom, nrow = 2, labels = c("a", ""), align = "v", axis = "l")
p
p <- plot_grid(p_a, p_bottom, nrow = 2, labels = c("a", ""), align = "h", axis = "l")
p
p <- plot_grid(p_a, p_bottom, nrow = 2, labels = c("a", ""), axis = "l")
p
p <- plot_grid(p_a, p_bottom, nrow = 2, labels = c("a", ""), axis = "tblr")
p
p <- plot_grid(p_a, p_bottom, nrow = 2, labels = c("a", ""), align = "vh", axis = "tblr")
p
p <- plot_grid(p_a, p_bottom, nrow = 2, labels = c("a", ""), align = "v", axis = "tblr")
p
p <- plot_grid(p_a, p_bottom, nrow = 2, labels = c("a", ""), align = "h", axis = "tblr")
p
p <- plot_grid(p_a, p_bottom, nrow = 2, labels = c("a", ""))
p
p_c <- ggplot(data = to_plot_c, mapping = aes(x = threshold, y = value, col = Metric)) + geom_line() + theme_cowplot(font_size = 11) + xlab("Threshold") + ylab("") +
scale_color_manual(values = c("black", my_cols[1], my_cols[2]), labels = c("MSE", expression(Bias^2), "Variance"), breaks = c("MSE", expression(Bias^2), "Variance")) +
theme(legend.position = "bottom")
# combine
p_bottom <- plot_grid(p_b, p_c, align = "h", ncol = 2, rel_widths = c(1,2), labels = c("b", "c"))
p_c <- ggplot(data = to_plot_c, mapping = aes(x = threshold, y = value, col = Metric)) + geom_line() + theme_cowplot(font_size = 11) + xlab("Threshold") + ylab("") +
scale_color_manual(values = c("black", my_cols[1], my_cols[2]), labels = c("MSE", expression(Bias^2), "Variance"), breaks = c("MSE", expression(Bias^2), "Variance")) +
theme(legend.position = "bottom")
p_c
p_c <- ggplot(data = to_plot_c, mapping = aes(x = threshold, y = value, col = Metric)) + geom_line() + theme_cowplot(font_size = 11) + xlab("Threshold") + ylab("") +
scale_color_manual(values = c("black", my_cols[1], my_cols[2]), labels = c("MSE", expression(Bias^2), "Variance"), breaks = c("MSE", expression(Bias^2), "Variance")) +
theme(legend.position = "bottom")
p_c
# combine
p_bottom <- plot_grid(p_b, p_c, align = "h", ncol = 2, rel_widths = c(1,2), labels = c("b", "c"))
p_bottom
p_c <- ggplot(data = to_plot_c, mapping = aes(x = threshold, y = value, col = Metric)) + geom_line() + theme_cowplot(font_size = 11) + xlab("Threshold") + ylab("") +
scale_color_manual(values = c("black", my_cols[1], my_cols[2]), labels = c("MSE", expression(Bias^2), "Variance"), breaks = c("MSE", expression(Bias^2), "Variance"))
# combine
p_bottom <- plot_grid(p_b, p_c, align = "h", ncol = 2, rel_widths = c(1,2), labels = c("b", "c"))
p <- plot_grid(p_a, p_bottom, nrow = 2, labels = c("a", ""))
p
p <- plot_grid(p_a, p_bottom, nrow = 2, labels = c("a", ""), align = "l")
p
p <- plot_grid(p_a, p_bottom, nrow = 2, labels = c("a", ""), align = "hv")
p
p <- plot_grid(p_a, p_bottom, nrow = 2, labels = c("a", ""), align = "v")
p
p <- plot_grid(p_a, p_bottom, nrow = 2, labels = c("a", ""), align = "h")
p
p <- plot_grid(p_a, p_bottom, nrow = 2, labels = c("a", ""), axis = "l")
p
p <- plot_grid(p_a, p_bottom, nrow = 2, labels = c("a", ""), axis = "l", align = "h")
p
p <- plot_grid(p_a, p_bottom, nrow = 2, labels = c("a", ""), axis = "l", align = "v")
p
p <- plot_grid(p_a, p_bottom, nrow = 2, labels = c("a", ""))
p
p
p <- plot_grid(p_a, p_bottom, ncol = 1, labels = c("a", ""))
p
p <- plot_grid(p_a, p_bottom, ncol = 1, labels = c("a", ""))
library(magrittr)
beta_0 <- 1
beta_1 <- 3
n <- 1000
x <- runif(n = n, min = 0, max = 10)
ep <- rnorm(n = n)
y <- beta_0 + beta_1 * x + ep
plot(x,y)
fit <- lm(y ~ x)
fit
out <- broom::tidy(fit) %>% dplyr::mutate(beta_0 = beta_0)
out
out
