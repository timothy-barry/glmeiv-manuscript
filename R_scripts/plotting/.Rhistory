plotting_objects <- paste0(.get_config_path("LOCAL_CODE_DIR"), "glmeiv-manuscript/figures/plotting_objects.R")
source(plotting_objects)
set.seed(2)
gRNA_ids_gasp <- sample(x = get_feature_ids(gRNA_odm_gasp), size = 1, replace = FALSE)
gRNA_ids_xie <- sample(x = get_feature_ids(gRNA_odm_xie), size = 1, replace = FALSE)
xie_gRNA <- gRNA_odm_xie[[gRNA_ids_xie,]] %>% as.numeric()
gasp_gRNA <- gRNA_odm_gasp[[gRNA_ids_gasp,]] %>% as.numeric()
# compute thresholds
gasp_thresh <- 5
xie_thresh <- sum(xie_gRNA)/sum(xie_gRNA >= 1)
# plot histograms
p5 <- ggplot(data = xie_gRNA %>% tibble::tibble(count = .) %>%
dplyr::filter(count >= 1, count <= 40),
mapping = aes(x = count)) +
geom_histogram(binwidth = 2, col = "black", fill = my_cols[4], alpha = 0.7) +
scale_y_continuous(trans='log10', expand = c(0, NA)) + xlab("gRNA count") + ylab("") +
geom_vline(xintercept = xie_thresh, col = my_cols[1], lwd = 0.8) + theme_bw(base_size = 10)
p6 <- ggplot(data = gasp_gRNA %>% tibble::tibble(count = .) %>%
dplyr::filter(count >= 1, count <= 40),
mapping = aes(x = count)) +
geom_histogram(binwidth = 2, col = "black", fill = my_cols[4], alpha = 0.7) +
scale_y_continuous(trans='log10', expand = c(0, NA)) + xlab("gRNA count") + ylab("") +
geom_vline(xintercept = xie_thresh, col = my_cols[1], lwd = 0.8) + theme_bw(base_size = 10)
# combine plots
p_out <- plot_grid(p1, p2, p3, p4, p5, p6, labels = c("a", "b", "c", "d", "e", "f"), ncol = 2, rel_heights = c(1,1,0.75))
ggsave(filename = , plot = p_out, device = "pdf", scale = 1, width = 6, height = 8, )
p_ot
p_out
fig_dir <- paste0(.get_config_path("LOCAL_CODE_DIR"), "glmeiv-manuscript/figures/thresholding_empirical")
if (!dir.exists(fig_dir)) dir.create(fig_dir)
ggsave(filename = fig_dir, plot = p_out, device = "pdf", scale = 1, width = 6, height = 8)
dir.exists(fig_dir)
fig_dir
?ggsave
ggsave(filename = paste0(fig_dir, "/plot.jpeg"), plot = p_out, device = "jpeg", scale = 1, width = 6, height = 8)
ggsave(filename = paste0(fig_dir, "/plot.jpeg"), plot = p_out, device = "jpeg", scale = 1, width = 6, height = 6)
# combine plots
p_out <- plot_grid(p1, p2, p3, p4, p5, p6, labels = c("a", "b", "c", "d", "e", "f"), ncol = 2, rel_heights = c(1,1,0.75), align = "vh")
ggsave(filename = paste0(fig_dir, "/plot.jpeg"), plot = p_out, device = "jpeg", scale = 1, width = 6, height = 6)
# combine plots
p_out <- plot_grid(p1, p2, p3, p4, p5, p6, labels = c("a", "b", "c", "d", "e", "f"), ncol = 2, rel_heights = c(1,1,0.75), align = "vh", hjust = -0.2)
# combine plots
p_out <- plot_grid(p1, p2, p3, p4, p5, p6, labels = c("a", "b", "c", "d", "e", "f"), ncol = 2, rel_heights = c(1,1,0.75), align = "vh", hjust = -2)
# combine plots
p_out <- plot_grid(p1, p2, p3, p4, p5, p6, labels = c("a", "b", "c", "d", "e", "f"), ncol = 2, rel_heights = c(1,1,0.75), align = "vh", hjust = -20)
ggsave(filename = paste0(fig_dir, "/plot.jpeg"), plot = p_out, device = "jpeg", scale = 1, width = 6, height = 6)
# combine plots
p_out <- plot_grid(p1, p2, p3, p4, p5, p6, labels = c("a", "b", "c", "d", "e", "f"), ncol = 2, rel_heights = c(1,1,0.75), align = "vh", hjust = 4)
ggsave(filename = paste0(fig_dir, "/plot.jpeg"), plot = p_out, device = "jpeg", scale = 1, width = 6, height = 6)
# combine plots
p_out <- plot_grid(p1, p2, p3, p4, p5, p6, labels = c("a", "b", "c", "d", "e", "f"), ncol = 2, rel_heights = c(1,1,0.75), align = "vh", hjust = 1)
ggsave(filename = paste0(fig_dir, "/plot.jpeg"), plot = p_out, device = "jpeg", scale = 1, width = 6, height = 6)
# combine plots
p_out <- plot_grid(p1, p2, p3, p4, p5, p6, labels = c("a", "b", "c", "d", "e", "f"), ncol = 2, rel_heights = c(1,1,0.75), align = "vh", hjust = 0.1)
ggsave(filename = paste0(fig_dir, "/plot.jpeg"), plot = p_out, device = "jpeg", scale = 1, width = 6, height = 6)
# combine plots
p_out <- plot_grid(p1, p2, p3, p4, p5, p6, labels = c("a", "b", "c", "d", "e", "f"), ncol = 2, rel_heights = c(1,1,0.75), align = "vh", hjust = -0.1)
ggsave(filename = paste0(fig_dir, "/plot.jpeg"), plot = p_out, device = "jpeg", scale = 1, width = 6, height = 6)
# combine plots
p_out <- plot_grid(p1, p2, p3, p4, p5, p6, labels = c("a", "b", "c", "d", "e", "f"), ncol = 2, rel_heights = c(1,1,0.75), align = "vh", hjust = -0.5)
ggsave(filename = paste0(fig_dir, "/plot.jpeg"), plot = p_out, device = "jpeg", scale = 1, width = 6, height = 6)
# combine plots
p_out <- plot_grid(p1, p2, p3, p4, p5, p6, labels = c("a", "b", "c", "d", "e", "f"), ncol = 2, rel_heights = c(1,1,0.75), align = "vh", hjust = -2)
ggsave(filename = paste0(fig_dir, "/plot.jpeg"), plot = p_out, device = "jpeg", scale = 1, width = 6, height = 6)
# combine plots
p_out <- plot_grid(p1, p2, p3, p4, p5, p6, labels = c("a", "b", "c", "d", "e", "f"), ncol = 2, rel_heights = c(1,1,0.75), align = "vh", hjust = -1.75)
ggsave(filename = paste0(fig_dir, "/plot.jpeg"), plot = p_out, device = "jpeg", scale = 1, width = 6, height = 6)
# combine plots
p_out <- plot_grid(p1, p2, p3, p4, p5, p6, labels = c("a", "b", "c", "d", "e", "f"), ncol = 2, rel_heights = c(1,1,0.75), align = "vh", hjust = -1.5)
ggsave(filename = paste0(fig_dir, "/plot.jpeg"), plot = p_out, device = "jpeg", scale = 1, width = 6, height = 6)
library(magrittr)
library(ggplot2)
library(cowplot)
my_cols <- c("firebrick3", "dodgerblue3", "orchid4", "lightskyblue3")
fig_dir <- paste0(.get_config_path("LOCAL_CODE_DIR"), "glmeiv-manuscript/figures/thresholding_empirical")
if (!dir.exists(fig_dir)) dir.create(fig_dir)
# load the results
gasp_result_dir <- paste0(.get_config_path("LOCAL_GLMEIV_DATA_DIR"), "public/gasperini/results/")
thresh_res <- readRDS(paste0(gasp_result_dir, "result_thresholding.rds"))
# study how choice of threshold influences results on Gasperini self TSS pairs
thresh_res_pc <- thresh_res %>% dplyr::filter(site_type == "selfTSS", parameter == "m_perturbation")
# Question 1. How do thresh = 1 and thresh = 5 compare on estimation?
thresh_res_pc_wide <- thresh_res_pc %>% dplyr::select(target, value, threshold, pair_id) %>%
tidyr::pivot_wider(id_cols = c("pair_id", "target"),
names_from = "threshold",
values_from = "value", names_prefix = "threshold_")
to_plot <- thresh_res_pc_wide %>% dplyr::filter(target == "estimate") %>% dplyr::select(threshold_1, threshold_5)
p1 <- ggplot(data = to_plot, mapping = aes(x = threshold_5, y = threshold_1)) + geom_point(alpha = 0.7, col = my_cols[2]) +
xlab("Thresh = 5 (est)") + ylab("Thresh = 1 (est)") + geom_abline(slope = 1, intercept = 0) + theme_bw(base_size = 10)
# threshold = 1 ests are bigger than (i.e., closer to one than) threshold = 5; this is attenuation bias due to the fact that excessively many unperturbed cells have been classified as perturbed.
# a) est. vs. est.
to_plot <- thresh_res_pc_wide %>% dplyr::filter(target == "estimate") %>% dplyr::select(threshold_5, threshold_20)
p2 <- ggplot(data = to_plot, mapping = aes(x = threshold_5, y = threshold_20)) + geom_point(alpha = 0.9, col = my_cols[2]) +
xlab("Thresh = 5 (est)") + ylab("Thresh = 20 (est)") + geom_abline(slope = 1, intercept = 0, lwd = 0.75) + theme_bw(base_size = 10)
# b) p-value vs. p-value
to_plot <- thresh_res_pc_wide %>% dplyr::filter(target == "p_value") %>% dplyr::select(threshold_5, threshold_20)
p3 <- ggplot(data = to_plot, mapping = aes(x = -log(threshold_5, base = 10), y = -log(threshold_20, base = 10))) + geom_point(alpha = 0.7, col = my_cols[3]) +
xlab("Thresh = 5 (-log p)") + ylab("Thresh = 20 (-log p)") + geom_abline(slope = 1, intercept = 0) + theme_bw(base_size = 10)
# c) CI width for threshold = 5 vs threshold = 20
to_plot <- thresh_res_pc_wide %>% dplyr::filter(target == c("confint_lower", "confint_upper")) %>% dplyr::select(-threshold_1, -threshold_3) %>%
tidyr::pivot_longer(cols = c("threshold_5", "threshold_20"), names_to = "threshold") %>% dplyr::group_by(threshold) %>%
dplyr::group_modify(function(tbl, key) {
tidyr::pivot_wider(data = tbl, id_cols = "pair_id", names_from = "target", values_from = "value")
}) %>% dplyr::mutate(ci_width = log(confint_upper) - log(confint_lower)) %>%
dplyr::mutate(threshold = factor(x = threshold, levels = c("threshold_5", "threshold_20"), labels = c("5", "20")))
mean_ci_width <- to_plot %>% dplyr::summarize(m_width = mean(ci_width))
(mean_ci_width %>% dplyr::filter(threshold == "20") %>% dplyr::pull(m_width))/(mean_ci_width %>% dplyr::filter(threshold == "5") %>% dplyr::pull(m_width))
# Threshold = 20 CI width is 1.5 times the threshold = 5 CI width.
p4 <- ggplot(data = to_plot, mapping = aes(x = threshold, y = ci_width)) + geom_violin(fill = my_cols[1], alpha = 0.7, draw_quantiles = 0.5) +
theme_bw(base_size = 10) + xlab("Threshold") + ylab("CI width") + geom_hline(yintercept = 0)
# e and f) gRNA count histograms
plotting_objects <- paste0(.get_config_path("LOCAL_CODE_DIR"), "glmeiv-manuscript/figures/plotting_objects.R")
source(plotting_objects)
set.seed(2)
gRNA_ids_gasp <- sample(x = get_feature_ids(gRNA_odm_gasp), size = 1, replace = FALSE)
gRNA_ids_xie <- sample(x = get_feature_ids(gRNA_odm_xie), size = 1, replace = FALSE)
xie_gRNA <- gRNA_odm_xie[[gRNA_ids_xie,]] %>% as.numeric()
gasp_gRNA <- gRNA_odm_gasp[[gRNA_ids_gasp,]] %>% as.numeric()
# compute thresholds
gasp_thresh <- 5
xie_thresh <- sum(xie_gRNA)/sum(xie_gRNA >= 1)
# plot histograms
p5 <- ggplot(data = xie_gRNA %>% tibble::tibble(count = .) %>%
dplyr::filter(count >= 1, count <= 40),
mapping = aes(x = count)) +
geom_histogram(binwidth = 2, col = "black", fill = my_cols[4], alpha = 0.7) +
scale_y_continuous(trans='log10', expand = c(0, NA)) + xlab("gRNA count") + ylab("") +
geom_vline(xintercept = xie_thresh, col = my_cols[1], lwd = 0.8) + theme_bw(base_size = 10)
p6 <- ggplot(data = gasp_gRNA %>% tibble::tibble(count = .) %>%
dplyr::filter(count >= 1, count <= 40),
mapping = aes(x = count)) +
geom_histogram(binwidth = 2, col = "black", fill = my_cols[4], alpha = 0.7) +
scale_y_continuous(trans='log10', expand = c(0, NA)) + xlab("gRNA count") + ylab("") +
geom_vline(xintercept = xie_thresh, col = my_cols[1], lwd = 0.8) + theme_bw(base_size = 10)
# combine plots
p_out <- plot_grid(p1, p2, p3, p4, p5, p6, labels = c("a", "b", "c", "d", "e", "f"), ncol = 2, rel_heights = c(1,1,0.75), align = "vh", hjust = -1.5)
ggsave(filename = paste0(fig_dir, "/plot.jpeg"), plot = p_out, device = "jpeg", scale = 1, width = 6, height = 6)
# combine plots
p_out <- plot_grid(p1, p2, p3, p4, p5, p6, labels = c("a", "b", "c", "d", "e", "f"), ncol = 2, rel_heights = c(1,1,0.75), align = "vh")
ggsave(filename = paste0(fig_dir, "/plot.jpeg"), plot = p_out, device = "jpeg", scale = 1, width = 6, height = 6)
# combine plots
p_out <- plot_grid(p1, p2, p3, p4, p5, p6, labels = c("a", "b", "c", "d", "e", "f"), ncol = 2, rel_heights = c(1,1,0.8), align = "vh")
ggsave(filename = paste0(fig_dir, "/plot.jpeg"), plot = p_out, device = "jpeg", scale = 1, width = 6, height = 6)
load_all("~/research_code/glmeiv/")
my_cols <- c("firebrick3", "dodgerblue3")
library(magrittr)
library(ggplot2)
library(cowplot)
# a) estimate vs. threshold for different values of beta_g
x_grid <- seq(0, 7, length.out = 501)
beta_gs <- c(1, qnorm(0.75) * 2, 1.5)
to_plot_a <- lapply(X = beta_gs, function(curr_beta_g) {
y <- get_tresholding_estimator_bias(m_perturbation = 1,
g_perturbation = curr_beta_g,
pi = 0.5,
c = x_grid,
return_bias = FALSE)
data.frame(Estimate = y, Threshold = x_grid, beta_g = curr_beta_g)
}) %>% do.call(what = "rbind", args = .) %>%
dplyr::mutate(beta_g_disp = paste0("beta[g] == ", round(beta_g, 2)) %>% factor())
# subplot a) bias in pi = 1/2 model
p_a <- ggplot(data = to_plot_a, mapping = aes(x = Threshold, y = Estimate)) +
geom_hline(yintercept = 0.5, col = "darkred") +
facet_wrap(.~beta_g_disp, labeller = label_parsed, scales = "free_y") +
theme_cowplot(font_size = 11) + scale_x_continuous(expand = c(NA, 0)) +
geom_vline(data = dplyr::filter(to_plot_a, beta_g_disp == "beta[g] == 1"),
mapping = aes(xintercept = beta_gs[1]/2), col = my_cols[2]) +
geom_vline(data = dplyr::filter(to_plot_a, beta_g_disp == "beta[g] == 1.35"),
mapping = aes(xintercept = beta_gs[2]/2), col = my_cols[2]) +
geom_vline(data = dplyr::filter(to_plot_a, beta_g_disp == "beta[g] == 1.5"),
mapping = aes(xintercept = beta_gs[3]/2), col = my_cols[2]) +
geom_line()
# subplot b) bias as c -> infinity for pi in [0,1/2]
pi <- seq(0.0, 0.5, length.out = 11)
Estimate <- 1 - pi
to_plot_b <- data.frame(pi = pi, Estimate = Estimate)
p_b <- ggplot(data = to_plot_b, mapping = aes(x = pi, y = Estimate)) + geom_line() +
scale_x_continuous(trans = "reverse", expand = c(NA, 0), limits = c(0.5, -0.02)) + theme_cowplot(font_size = 11) +
geom_segment(aes(x=0.0, xend=0.5, y=1, yend=1), lwd = 0.3) + scale_y_continuous(expand = c(0, NA), limits = c(0.5, 1.02)) +
xlab(expression(pi))
# subplot c) bias-variance tradeoff
xgrid <- seq(1, 3.9, length.out = 1001)
g_beta <- 1
pi <- 0.25
m_beta <- 1
n <- 10000
bias_sq <- (1 - get_thresholding_estimator_est_no_int(c = xgrid, g_beta = g_beta, pi = pi, m_beta = m_beta))^2
var <- get_thresholding_estimator_var_no_int(c = xgrid, g_beta = g_beta, pi = pi, m_beta = m_beta, n = n)
to_plot_c <- data.frame(Metric = rep(c("Bias^2", "Variance", "MSE"), each = length(xgrid)),
value = c(bias_sq, var, bias_sq + var),
threshold = rep(xgrid, times = 3))
p_c <- ggplot(data = to_plot_c, mapping = aes(x = threshold, y = value, col = Metric)) + geom_line() + theme_cowplot(font_size = 11) + xlab("Threshold") + ylab("") +
scale_color_manual(values = c("black", my_cols[1], my_cols[2]), labels = c("MSE", expression(Bias^2), "Variance"), breaks = c("MSE", expression(Bias^2), "Variance"))
# combine
p_bottom <- plot_grid(p_b, p_c, align = "h", ncol = 2, rel_widths = c(1,2), labels = c("b", "c"))
p <- plot_grid(p_a, p_bottom, ncol = 1, labels = c("a", ""))
p
p_c <- ggplot(data = to_plot_c, mapping = aes(x = threshold, y = value, col = Metric)) + geom_line() + theme_cowplot(font_size = 11) + xlab("Threshold") + ylab("") +
scale_color_manual(values = c("black", my_cols[1], my_cols[2]), labels = c("MSE", expression(Bias^2), "Variance"), breaks = c("MSE", expression(Bias^2), "Variance"))
p_c
p_c <- ggplot(data = to_plot_c, mapping = aes(x = threshold, y = value, col = Metric)) + geom_line() + theme_cowplot(font_size = 11) + xlab("Threshold") + ylab("") +
scale_color_manual(values = c(my_cols[1], my_cols[2], "black",), labels = c(expression(Bias^2), "Variance", "MSE"), breaks = c("MSE", expression(Bias^2), "Variance"))
p_c <- ggplot(data = to_plot_c, mapping = aes(x = threshold, y = value, col = Metric)) + geom_line() + theme_cowplot(font_size = 11) + xlab("Threshold") + ylab("") +
scale_color_manual(values = c(my_cols[1], my_cols[2], "black",), labels = c(expression(Bias^2), "Variance", "MSE"), breaks = c("MSE", expression(Bias^2), "Variance"))
p_c <- ggplot(data = to_plot_c, mapping = aes(x = threshold, y = value, col = Metric)) + geom_line() + theme_cowplot(font_size = 11) + xlab("Threshold") + ylab("") +
scale_color_manual(values = c(my_cols[1], my_cols[2], "black",), labels = c(expression(Bias^2), "Variance", "MSE"), breaks = c(expression(Bias^2), "Variance", "MSE"))
p_c <- ggplot(data = to_plot_c, mapping = aes(x = threshold, y = value, col = Metric)) + geom_line() + theme_cowplot(font_size = 11) + xlab("Threshold") + ylab("") +
scale_color_manual(values = c(my_cols[1], my_cols[2], "black"), labels = c(expression(Bias^2), "Variance", "MSE"), breaks = c(expression(Bias^2), "Variance", "MSE"))
p_c
to_plot_c
to_plot_c
to_plot_c$Metric
to_plot_c$Metric %>% factor
head(to_plot_c)
p_c <- ggplot(data = to_plot_c %>% dplyr::mutate(Metric = factor(Metric, levels = c("Bias^2", "Variance", "MSE"), labels = c("Bias^2", "Variance", "MSE"))) , mapping = aes(x = threshold, y = value, col = Metric)) + geom_line() + theme_cowplot(font_size = 11) + xlab("Threshold") + ylab("") +
scale_color_manual(values = c(my_cols[1], my_cols[2], "black"), labels = c(expression(Bias^2), "Variance", "MSE"), breaks = c(expression(Bias^2), "Variance", "MSE"))
p_c
to_plot_c %>% dplyr::mutate(Metric = factor(Metric, levels = c("Bias^2", "Variance", "MSE"),
labels = c("Bias^2", "Variance", "MSE")))
to_plot_c %>% dplyr::mutate(Metric = factor(Metric, levels = c("Bias^2", "Variance", "MSE"),
labels = c("Bias^2", "Variance", "MSE"))) %>% dplyr::pull(Metric)
p_c <- ggplot(data = to_plot_c %>% dplyr::mutate(Metric = factor(Metric, levels = c("Bias^2", "Variance", "MSE"),
labels = c("Bias^2", "Variance", "MSE"))), mapping = aes(x = threshold, y = value, col = Metric)) + geom_line() + theme_cowplot(font_size = 11) + xlab("Threshold") + ylab("") +
scale_color_manual(values = c(my_cols[1], my_cols[2], "black"), labels = c(expression(Bias^2), "Variance", "MSE"), breaks = c(expression(Bias^2), "Variance", "MSE"))
p_c
c(my_cols[1], my_cols[2], "black")
c(expression(Bias^2), "Variance", "MSE")
p_c <- ggplot(data = to_plot_c %>% dplyr::mutate(Metric = factor(Metric, levels = c("Bias^2", "Variance", "MSE"),
labels = c("Bias^2", "Variance", "MSE"))), mapping = aes(x = threshold, y = value, col = Metric)) + geom_line() + theme_cowplot(font_size = 11) + xlab("Threshold") + ylab("") +
scale_color_manual(values = c(my_cols[1], my_cols[2], "black"), labels = c(expression(Bias^2), "Variance", "MSE"), breaks = c(expression(Bias^2), "Variance", "MSE"))
p_c
p_c <- ggplot(data = to_plot_c %>% dplyr::mutate(Metric = factor(Metric, levels = c("Bias^2", "Variance", "MSE"),
labels = c("Bias^2", "Variance", "MSE"))), mapping = aes(x = threshold, y = value, col = Metric)) + geom_line() + theme_bw(font_size = 10) + xlab("Threshold") + ylab("") +
scale_color_manual(values = c(my_cols[1], my_cols[2], "black"), labels = c(expression(Bias^2), "Variance", "MSE"), breaks = c(expression(Bias^2), "Variance", "MSE"))
p_c <- ggplot(data = to_plot_c %>% dplyr::mutate(Metric = factor(Metric, levels = c("Bias^2", "Variance", "MSE"),
labels = c("Bias^2", "Variance", "MSE"))), mapping = aes(x = threshold, y = value, col = Metric)) + geom_line() + theme_bw(base_size = 10) + xlab("Threshold") + ylab("") +
scale_color_manual(values = c(my_cols[1], my_cols[2], "black"), labels = c(expression(Bias^2), "Variance", "MSE"), breaks = c(expression(Bias^2), "Variance", "MSE"))
p_c
load_all("~/research_code/glmeiv/")
my_cols <- c("firebrick3", "dodgerblue3")
library(magrittr)
library(ggplot2)
library(cowplot)
# a) estimate vs. threshold for different values of beta_g
x_grid <- seq(0, 7, length.out = 501)
beta_gs <- c(1, qnorm(0.75) * 2, 1.5)
to_plot_a <- lapply(X = beta_gs, function(curr_beta_g) {
y <- get_tresholding_estimator_bias(m_perturbation = 1,
g_perturbation = curr_beta_g,
pi = 0.5,
c = x_grid,
return_bias = FALSE)
data.frame(Estimate = y, Threshold = x_grid, beta_g = curr_beta_g)
}) %>% do.call(what = "rbind", args = .) %>%
dplyr::mutate(beta_g_disp = paste0("beta[g] == ", round(beta_g, 2)) %>% factor())
# subplot a) bias in pi = 1/2 model
p_a <- ggplot(data = to_plot_a, mapping = aes(x = Threshold, y = Estimate)) +
geom_hline(yintercept = 0.5, col = "darkred") +
facet_wrap(.~beta_g_disp, labeller = label_parsed, scales = "free_y") +
theme_bw(base_size = 10) + scale_x_continuous(expand = c(NA, 0)) +
geom_vline(data = dplyr::filter(to_plot_a, beta_g_disp == "beta[g] == 1"),
mapping = aes(xintercept = beta_gs[1]/2), col = my_cols[2]) +
geom_vline(data = dplyr::filter(to_plot_a, beta_g_disp == "beta[g] == 1.35"),
mapping = aes(xintercept = beta_gs[2]/2), col = my_cols[2]) +
geom_vline(data = dplyr::filter(to_plot_a, beta_g_disp == "beta[g] == 1.5"),
mapping = aes(xintercept = beta_gs[3]/2), col = my_cols[2]) +
geom_line()
# subplot b) bias as c -> infinity for pi in [0,1/2]
pi <- seq(0.0, 0.5, length.out = 11)
Estimate <- 1 - pi
to_plot_b <- data.frame(pi = pi, Estimate = Estimate)
p_b <- ggplot(data = to_plot_b, mapping = aes(x = pi, y = Estimate)) + geom_line() +
scale_x_continuous(trans = "reverse", expand = c(NA, 0), limits = c(0.5, -0.02)) + theme_bw(base_size = 10) +
geom_segment(aes(x=0.0, xend=0.5, y=1, yend=1), lwd = 0.3) + scale_y_continuous(expand = c(0, NA), limits = c(0.5, 1.02)) +
xlab(expression(pi))
# subplot c) bias-variance tradeoff
xgrid <- seq(1, 3.9, length.out = 1001)
g_beta <- 1
pi <- 0.25
m_beta <- 1
n <- 10000
bias_sq <- (1 - get_thresholding_estimator_est_no_int(c = xgrid, g_beta = g_beta, pi = pi, m_beta = m_beta))^2
var <- get_thresholding_estimator_var_no_int(c = xgrid, g_beta = g_beta, pi = pi, m_beta = m_beta, n = n)
to_plot_c <- data.frame(Metric = rep(c("Bias^2", "Variance", "MSE"), each = length(xgrid)),
value = c(bias_sq, var, bias_sq + var),
threshold = rep(xgrid, times = 3))
p_c <- ggplot(data = to_plot_c %>% dplyr::mutate(Metric = factor(Metric, levels = c("Bias^2", "Variance", "MSE"),
labels = c("Bias^2", "Variance", "MSE"))), mapping = aes(x = threshold, y = value, col = Metric)) + geom_line() + theme_bw(base_size = 10) + xlab("Threshold") + ylab("") +
scale_color_manual(values = c(my_cols[1], my_cols[2], "black"), labels = c(expression(Bias^2), "Variance", "MSE"), breaks = c(expression(Bias^2), "Variance", "MSE"))
# combine
p_bottom <- plot_grid(p_b, p_c, align = "h", ncol = 2, rel_widths = c(1,2), labels = c("b", "c"))
p <- plot_grid(p_a, p_bottom, ncol = 1, labels = c("a", ""))
p
p_c <- ggplot(data = to_plot_c %>% dplyr::mutate(Metric = factor(Metric, levels = c("Bias^2", "Variance", "MSE"),
labels = c("Bias^2", "Variance", "MSE"))), mapping = aes(x = threshold, y = value, col = Metric)) + geom_line() + theme_cowplot(font_size = 10) + xlab("Threshold") + ylab("") +
scale_color_manual(values = c(my_cols[1], my_cols[2], "black"), labels = c(expression(Bias^2), "Variance", "MSE"), breaks = c(expression(Bias^2), "Variance", "MSE"))
p_c
p_c <- ggplot(data = to_plot_c %>% dplyr::mutate(Metric = factor(Metric, levels = c("Bias^2", "Variance", "MSE"),
labels = c("Bias^2", "Variance", "MSE"))) %>% dplyr::arrange(Metric), mapping = aes(x = threshold, y = value, col = Metric)) + geom_line() + theme_cowplot(font_size = 10) + xlab("Threshold") + ylab("") +
scale_color_manual(values = c(my_cols[1], my_cols[2], "black"), labels = c(expression(Bias^2), "Variance", "MSE"), breaks = c(expression(Bias^2), "Variance", "MSE"))
p_c
p_c <- ggplot(data = to_plot_c %>% dplyr::mutate(Metric = factor(Metric, levels = c("Bias^2", "Variance", "MSE"),
labels = c("Bias^2", "Variance", "MSE"))), mapping = aes(x = threshold, y = value, col = Metric)) + geom_line() + theme_cowplot(font_size = 10) + xlab("Threshold") + ylab("") +
scale_color_manual(values = c(my_cols[1], my_cols[2], "black"), labels = c("MSE", expression(Bias^2), "Variance"), breaks = c("MSE", expression(Bias^2), "Variance"))
p_c
p_c <- ggplot(data = to_plot_c %>% dplyr::mutate(Metric = factor(Metric, levels = c("Bias^2", "Variance", "MSE"),
labels = c("Bias^2", "Variance", "MSE"))), mapping = aes(x = threshold, y = value, col = Metric)) + geom_line() + theme_cowplot(font_size = 10) + xlab("Threshold") + ylab("") +
scale_color_manual(values = c("black", my_cols[1], my_cols[2]), labels = c("MSE", expression(Bias^2), "Variance"), breaks = c("MSE", expression(Bias^2), "Variance"))
p_c
p_c <- ggplot(data = to_plot_c %>% dplyr::mutate(Metric = factor(Metric, levels = c("Bias^2", "Variance", "MSE"),
labels = c("Bias^2", "Variance", "MSE"))), mapping = aes(x = threshold, y = value, col = Metric)) + geom_line() + theme_cowplot(font_size = 10) + xlab("Threshold") + ylab("") +
scale_color_manual(values = c("black", my_cols[1], my_cols[2]), labels = c("MSE", expression(Bias^2), "Variance"))
p_C
p_c
p_c <- ggplot(data = to_plot_c %>% dplyr::mutate(Metric = factor(Metric, levels = c("Bias^2", "Variance", "MSE"),
labels = c("Bias^2", "Variance", "MSE"))), mapping = aes(x = threshold, y = value, col = Metric)) + geom_line() + theme_cowplot(font_size = 10) + xlab("Threshold") + ylab("") +
scale_color_manual(values = c("black", my_cols[1], my_cols[2]), labels = c("MSE", expression(Bias^2), "Variance"), breaks = c("MSE", expression(Bias^2), "Variance"))
p_c
# combine
p_bottom <- plot_grid(p_b, p_c, align = "h", ncol = 2, rel_widths = c(1,2), labels = c("b", "c"))
p <- plot_grid(p_a, p_bottom, ncol = 1, labels = c("a", ""))
p
load_all("~/research_code/glmeiv/")
my_cols <- c("firebrick3", "dodgerblue3")
library(magrittr)
library(ggplot2)
library(cowplot)
# a) estimate vs. threshold for different values of beta_g
x_grid <- seq(0, 7, length.out = 501)
beta_gs <- c(1, qnorm(0.75) * 2, 1.5)
to_plot_a <- lapply(X = beta_gs, function(curr_beta_g) {
y <- get_tresholding_estimator_bias(m_perturbation = 1,
g_perturbation = curr_beta_g,
pi = 0.5,
c = x_grid,
return_bias = FALSE)
data.frame(Estimate = y, Threshold = x_grid, beta_g = curr_beta_g)
}) %>% do.call(what = "rbind", args = .) %>%
dplyr::mutate(beta_g_disp = paste0("beta[g] == ", round(beta_g, 2)) %>% factor())
# subplot a) bias in pi = 1/2 model
p_a <- ggplot(data = to_plot_a, mapping = aes(x = Threshold, y = Estimate)) +
geom_hline(yintercept = 0.5, col = "darkred") +
facet_wrap(.~beta_g_disp, labeller = label_parsed, scales = "free_y") +
theme_cowplot(font_size = 11) + scale_x_continuous(expand = c(NA, 0)) +
geom_vline(data = dplyr::filter(to_plot_a, beta_g_disp == "beta[g] == 1"),
mapping = aes(xintercept = beta_gs[1]/2), col = my_cols[2]) +
geom_vline(data = dplyr::filter(to_plot_a, beta_g_disp == "beta[g] == 1.35"),
mapping = aes(xintercept = beta_gs[2]/2), col = my_cols[2]) +
geom_vline(data = dplyr::filter(to_plot_a, beta_g_disp == "beta[g] == 1.5"),
mapping = aes(xintercept = beta_gs[3]/2), col = my_cols[2]) +
geom_line()
# subplot b) bias as c -> infinity for pi in [0,1/2]
pi <- seq(0.0, 0.5, length.out = 11)
Estimate <- 1 - pi
to_plot_b <- data.frame(pi = pi, Estimate = Estimate)
p_b <- ggplot(data = to_plot_b, mapping = aes(x = pi, y = Estimate)) + geom_line() +
scale_x_continuous(trans = "reverse", expand = c(NA, 0), limits = c(0.5, -0.02)) + theme_cowplot(font_size = 11) +
geom_segment(aes(x=0.0, xend=0.5, y=1, yend=1), lwd = 0.3) + scale_y_continuous(expand = c(0, NA), limits = c(0.5, 1.02)) +
xlab(expression(pi))
# subplot c) bias-variance tradeoff
xgrid <- seq(1, 3.9, length.out = 1001)
g_beta <- 1
pi <- 0.25
m_beta <- 1
n <- 10000
bias_sq <- (1 - get_thresholding_estimator_est_no_int(c = xgrid, g_beta = g_beta, pi = pi, m_beta = m_beta))^2
var <- get_thresholding_estimator_var_no_int(c = xgrid, g_beta = g_beta, pi = pi, m_beta = m_beta, n = n)
to_plot_c <- data.frame(Metric = rep(c("Bias^2", "Variance", "MSE"), each = length(xgrid)),
value = c(bias_sq, var, bias_sq + var),
threshold = rep(xgrid, times = 3))
p_c <- ggplot(data = to_plot_c %>% dplyr::mutate(Metric = factor(Metric, levels = c("Bias^2", "Variance", "MSE"),
labels = c("Bias^2", "Variance", "MSE"))), mapping = aes(x = threshold, y = value, col = Metric)) + geom_line() + theme_cowplot(font_size = 10) + xlab("Threshold") + ylab("") +
scale_color_manual(values = c("black", my_cols[1], my_cols[2]), labels = c("MSE", expression(Bias^2), "Variance"), breaks = c("MSE", expression(Bias^2), "Variance"))
# combine
p_bottom <- plot_grid(p_b, p_c, align = "h", ncol = 2, rel_widths = c(1,2), labels = c("b", "c"))
p <- plot_grid(p_a, p_bottom, ncol = 1, labels = c("a", ""))
p
fig_dir <- paste0(.get_config_path("LOCAL_CODE_DIR"), "glmeiv-manuscript/figures/thresholding_theoretical")
if (!dir.exists(fig_dir)) dir.create(fig_dir)
fig_dir
# save
ggsave(filename = paste0(fig_dir, "/plot.jpeg"), plot = p, device = "jpeg", scale = 1, width = 6, height = 5)
# save
ggsave(filename = paste0(fig_dir, "/plot.jpeg"), plot = p, device = "jpeg", scale = 1, width = 6, height = 4)
# save
ggsave(filename = paste0(fig_dir, "/plot.jpeg"), plot = p, device = "jpeg", scale = 0.8, width = 6, height = 4)
# save
ggsave(filename = paste0(fig_dir, "/plot.jpeg"), plot = p, device = "jpeg", scale = 1.2, width = 6, height = 4)
# save
ggsave(filename = paste0(fig_dir, "/plot.jpeg"), plot = p, device = "jpeg", scale = 1.25, width = 6, height = 4)
library(magrittr)
library(ggplot2)
library(cowplot)
my_cols <- c("firebrick3", "dodgerblue3", "orchid4", "lightskyblue3")
fig_dir <- paste0(.get_config_path("LOCAL_CODE_DIR"), "glmeiv-manuscript/figures/thresholding_empirical")
if (!dir.exists(fig_dir)) dir.create(fig_dir)
# load the results
gasp_result_dir <- paste0(.get_config_path("LOCAL_GLMEIV_DATA_DIR"), "public/gasperini/results/")
thresh_res <- readRDS(paste0(gasp_result_dir, "result_thresholding.rds"))
# study how choice of threshold influences results on Gasperini self TSS pairs
thresh_res_pc <- thresh_res %>% dplyr::filter(site_type == "selfTSS", parameter == "m_perturbation")
# Question 1. How do thresh = 1 and thresh = 5 compare on estimation?
thresh_res_pc_wide <- thresh_res_pc %>% dplyr::select(target, value, threshold, pair_id) %>%
tidyr::pivot_wider(id_cols = c("pair_id", "target"),
names_from = "threshold",
values_from = "value", names_prefix = "threshold_")
to_plot <- thresh_res_pc_wide %>% dplyr::filter(target == "estimate") %>% dplyr::select(threshold_1, threshold_5)
p1 <- ggplot(data = to_plot, mapping = aes(x = threshold_5, y = threshold_1)) + geom_point(alpha = 0.7, col = my_cols[2]) +
xlab("Thresh = 5 (est)") + ylab("Thresh = 1 (est)") + geom_abline(slope = 1, intercept = 0) + theme_bw(base_size = 10)
# threshold = 1 ests are bigger than (i.e., closer to one than) threshold = 5; this is attenuation bias due to the fact that excessively many unperturbed cells have been classified as perturbed.
# a) est. vs. est.
to_plot <- thresh_res_pc_wide %>% dplyr::filter(target == "estimate") %>% dplyr::select(threshold_5, threshold_20)
p2 <- ggplot(data = to_plot, mapping = aes(x = threshold_5, y = threshold_20)) + geom_point(alpha = 0.9, col = my_cols[2]) +
xlab("Thresh = 5 (est)") + ylab("Thresh = 20 (est)") + geom_abline(slope = 1, intercept = 0, lwd = 0.75) + theme_bw(base_size = 10)
# b) p-value vs. p-value
to_plot <- thresh_res_pc_wide %>% dplyr::filter(target == "p_value") %>% dplyr::select(threshold_5, threshold_20)
p3 <- ggplot(data = to_plot, mapping = aes(x = -log(threshold_5, base = 10), y = -log(threshold_20, base = 10))) + geom_point(alpha = 0.7, col = my_cols[3]) +
xlab("Thresh = 5 (-log p)") + ylab("Thresh = 20 (-log p)") + geom_abline(slope = 1, intercept = 0) + theme_bw(base_size = 10)
# c) CI width for threshold = 5 vs threshold = 20
to_plot <- thresh_res_pc_wide %>% dplyr::filter(target == c("confint_lower", "confint_upper")) %>% dplyr::select(-threshold_1, -threshold_3) %>%
tidyr::pivot_longer(cols = c("threshold_5", "threshold_20"), names_to = "threshold") %>% dplyr::group_by(threshold) %>%
dplyr::group_modify(function(tbl, key) {
tidyr::pivot_wider(data = tbl, id_cols = "pair_id", names_from = "target", values_from = "value")
}) %>% dplyr::mutate(ci_width = log(confint_upper) - log(confint_lower)) %>%
dplyr::mutate(threshold = factor(x = threshold, levels = c("threshold_5", "threshold_20"), labels = c("5", "20")))
mean_ci_width <- to_plot %>% dplyr::summarize(m_width = mean(ci_width))
(mean_ci_width %>% dplyr::filter(threshold == "20") %>% dplyr::pull(m_width))/(mean_ci_width %>% dplyr::filter(threshold == "5") %>% dplyr::pull(m_width))
# Threshold = 20 CI width is 1.5 times the threshold = 5 CI width.
p4 <- ggplot(data = to_plot, mapping = aes(x = threshold, y = ci_width)) + geom_violin(fill = my_cols[1], alpha = 0.7, draw_quantiles = 0.5) +
theme_bw(base_size = 10) + xlab("Threshold") + ylab("CI width") + geom_hline(yintercept = 0)
# e and f) gRNA count histograms
plotting_objects <- paste0(.get_config_path("LOCAL_CODE_DIR"), "glmeiv-manuscript/figures/plotting_objects.R")
source(plotting_objects)
set.seed(2)
gRNA_ids_gasp <- sample(x = get_feature_ids(gRNA_odm_gasp), size = 1, replace = FALSE)
gRNA_ids_xie <- sample(x = get_feature_ids(gRNA_odm_xie), size = 1, replace = FALSE)
xie_gRNA <- gRNA_odm_xie[[gRNA_ids_xie,]] %>% as.numeric()
gasp_gRNA <- gRNA_odm_gasp[[gRNA_ids_gasp,]] %>% as.numeric()
# compute thresholds
gasp_thresh <- 5
xie_thresh <- sum(xie_gRNA)/sum(xie_gRNA >= 1)
# plot histograms
p5 <- ggplot(data = xie_gRNA %>% tibble::tibble(count = .) %>%
dplyr::filter(count >= 1, count <= 40),
mapping = aes(x = count)) +
geom_histogram(binwidth = 2, col = "black", fill = my_cols[4], alpha = 0.7) +
scale_y_continuous(trans='log10', expand = c(0, NA)) + xlab("gRNA count") + ylab("") + theme_bw(base_size = 10) +
# geom_vline(xintercept = xie_thresh, col = my_cols[1], lwd = 0.8)
p6 <- ggplot(data = gasp_gRNA %>% tibble::tibble(count = .) %>%
dplyr::filter(count >= 1, count <= 40),
mapping = aes(x = count)) +
geom_histogram(binwidth = 2, col = "black", fill = my_cols[4], alpha = 0.7) +
scale_y_continuous(trans='log10', expand = c(0, NA)) + xlab("gRNA count") + ylab("") + theme_bw(base_size = 10) +
# geom_vline(xintercept = xie_thresh, col = my_cols[1], lwd = 0.8)
# combine plots
p_out <- plot_grid(p1, p2, p3, p4, p5, p6, labels = c("a", "b", "c", "d", "e", "f"), ncol = 2, rel_heights = c(1,1,0.8), align = "vh")
# plot histograms
p5 <- ggplot(data = xie_gRNA %>% tibble::tibble(count = .) %>%
dplyr::filter(count >= 1, count <= 40),
mapping = aes(x = count)) +
geom_histogram(binwidth = 2, col = "black", fill = my_cols[4], alpha = 0.7) +
scale_y_continuous(trans='log10', expand = c(0, NA)) + xlab("gRNA count") + ylab("") + theme_bw(base_size = 10) +
# geom_vline(xintercept = xie_thresh, col = my_cols[1], lwd = 0.8)
p6 <- ggplot(data = gasp_gRNA %>% tibble::tibble(count = .) %>%
dplyr::filter(count >= 1, count <= 40),
mapping = aes(x = count)) +
geom_histogram(binwidth = 2, col = "black", fill = my_cols[4], alpha = 0.7) +
scale_y_continuous(trans='log10', expand = c(0, NA)) + xlab("gRNA count") + ylab("") + theme_bw(base_size = 10) +
# geom_vline(xintercept = xie_thresh, col = my_cols[1], lwd = 0.8)
# combine plots
p_out <- plot_grid(p1, p2, p3, p4, p5, p6, labels = c("a", "b", "c", "d", "e", "f"), ncol = 2, rel_heights = c(1,1,0.8), align = "vh")
# plot histograms
p5 <- ggplot(data = xie_gRNA %>% tibble::tibble(count = .) %>%
dplyr::filter(count >= 1, count <= 40),
mapping = aes(x = count)) +
geom_histogram(binwidth = 2, col = "black", fill = my_cols[4], alpha = 0.7) +
scale_y_continuous(trans='log10', expand = c(0, NA)) + xlab("gRNA count") + ylab("") + theme_bw(base_size = 10) +
# geom_vline(xintercept = xie_thresh, col = my_cols[1], lwd = 0.8)
p6 <- ggplot(data = gasp_gRNA %>% tibble::tibble(count = .) %>%
dplyr::filter(count >= 1, count <= 40),
mapping = aes(x = count)) +
geom_histogram(binwidth = 2, col = "black", fill = my_cols[4], alpha = 0.7) +
scale_y_continuous(trans='log10', expand = c(0, NA)) + xlab("gRNA count") + ylab("") + theme_bw(base_size = 10) +
# geom_vline(xintercept = xie_thresh, col = my_cols[1], lwd = 0.8)
# combine plots
p_out <- plot_grid(p1, p2, p3, p4, p5, p6, labels = c("a", "b", "c", "d", "e", "f"), ncol = 2, rel_heights = c(1,1,0.8), align = "vh")
# compute thresholds
gasp_thresh <- 5
xie_thresh <- sum(xie_gRNA)/sum(xie_gRNA >= 1)
# plot histograms
p5 <- ggplot(data = xie_gRNA %>% tibble::tibble(count = .) %>%
dplyr::filter(count >= 1, count <= 40),
mapping = aes(x = count)) +
geom_histogram(binwidth = 2, col = "black", fill = my_cols[4], alpha = 0.7) +
scale_y_continuous(trans='log10', expand = c(0, NA)) + xlab("gRNA count") + ylab("") + theme_bw(base_size = 10)
p6 <- ggplot(data = gasp_gRNA %>% tibble::tibble(count = .) %>%
dplyr::filter(count >= 1, count <= 40),
mapping = aes(x = count)) +
geom_histogram(binwidth = 2, col = "black", fill = my_cols[4], alpha = 0.7) +
scale_y_continuous(trans='log10', expand = c(0, NA)) + xlab("gRNA count") + ylab("") + theme_bw(base_size = 10) +
# geom_vline(xintercept = xie_thresh, col = my_cols[1], lwd = 0.8)
# combine plots
p_out <- plot_grid(p1, p2, p3, p4, p5, p6, labels = c("a", "b", "c", "d", "e", "f"), ncol = 2, rel_heights = c(1,1,0.8), align = "vh")
p6 <- ggplot(data = gasp_gRNA %>% tibble::tibble(count = .) %>%
dplyr::filter(count >= 1, count <= 40),
mapping = aes(x = count)) +
geom_histogram(binwidth = 2, col = "black", fill = my_cols[4], alpha = 0.7) +
scale_y_continuous(trans='log10', expand = c(0, NA)) + xlab("gRNA count") + ylab("") + theme_bw(base_size = 10)
# combine plots
p_out <- plot_grid(p1, p2, p3, p4, p5, p6, labels = c("a", "b", "c", "d", "e", "f"), ncol = 2, rel_heights = c(1,1,0.8), align = "vh")
p_out
ggsave(filename = paste0(fig_dir, "/plot.jpeg"), plot = p_out, device = "jpeg", scale = 1, width = 6, height = 6)
