mixture_assignment = mixture_assignments,
ground_truth_assignment = ground_truth_assignments)
p_a <- ggplot(data = df, mapping = aes(x = mixture_assignment, y = g, col = ground_truth_assignment)) +
geom_jitter(alpha = 0.8) +
scale_y_continuous(trans = "log1p", breaks = c(0, 1, 5, 20, 50, 200, 1000)) +
labs(color = "Ground truth\n assignment") +
xlab("Unimodal GLM-EIV assignment") +
ylab("gRNA count") +
ggtitle(paste0("Perturbation assignments\nfor gRNA ", grna_id)) +
sceptre:::get_my_theme() +
scale_color_manual(values = my_cols)
# p_b: get the confusion matrix and confusion matrix metrics for this gRNA
confusion_mat <- result[[grna_idx]]$confusion_mat
confusion_mat$byClass[["Sensitivity"]]
confusion_mat$byClass[["Specificity"]]
confusion_mat$overall[["Accuracy"]]
# p_c: plot the sensitivity, specificity, and accuracy across gRNAs
sensitivities <- sapply(X = result, FUN = function(l) l$confusion_mat$byClass[["Sensitivity"]]) |> unlist()
specificities <- sapply(X = result, FUN = function(l) l$confusion_mat$byClass[["Specificity"]]) |> unlist()
accuracies <- sapply(X = result, FUN = function(l) l$confusion_mat$overall[["Accuracy"]]) |> unlist()
df_2 <- data.frame(Sensitivity = sensitivities,
Specificity = specificities,
Accuracy = accuracies) |>
tidyr::pivot_longer(cols = c("Sensitivity", "Specificity", "Accuracy"),
names_to = "metric")
df_2 |> dplyr::group_by(metric) |> dplyr::summarize(m = mean(value))
p_c <- ggplot(data = df_2, mapping = aes(y = value)) +
geom_boxplot(fill = "dodgerblue", outlier.size = 0.8) + facet_wrap(metric ~ ., scales = "free_y") +
sceptre:::get_my_theme() +
theme(axis.ticks.x = element_blank(), axis.text.x = element_blank(),
axis.title.y = element_blank()) +
ggtitle("Classification metrics across all gRNAs")
# create cowplot
p <- plot_grid(p_a, NULL, p_c, NULL, labels = c("a", "b", "c", "d"), nrow = 2, rel_widths = c(0.6, 0.3), rel_heights = c(0.6, 0.4))
# save
fig_dir <- paste0(.get_config_path("LOCAL_CODE_DIR"), "glmeiv-manuscript/figures/unimodal_glmeiv_assignments")
if (!dir.exists(fig_dir)) dir.create(fig_dir)
ggsave(filename = paste0(fig_dir, "/r_plot.png"), plot = p, device = "png", dpi = 330, width = 6, height = 5, scale = 1.1)
library(dplyr)
library(ggplot2)
library(simulatr)
# load the results and specifier objects
sim_result_dir <- paste0(.get_config_path("LOCAL_GLMEIV_DATA_DIR"), "public/simulations/results")
sim_res_1 <- readRDS(paste0(sim_result_dir, "/sim_res_1.rds"))[["metrics"]]
source(paste0(.get_config_path("LOCAL_CODE_DIR"), "glmeiv-manuscript/R_scripts/plotting/simulation_plots/shared_plotting_code.R"))
to_plot <- sim_res_1|> transform_metric_df() |>
mutate(exp_g_perturbation = exp(g_perturbation))
p <- ggplot(data = to_plot, mapping = aes(x = exp_g_perturbation,
y = mean,
ymin = mean - 2 * se,
ymax = mean + 2 * se,
col = Method)) +
xlab(expression(exp(beta[g]))) + scale_color_manual(values = my_cols) +
facet_grid(metric_fct ~ fam_str, scales = "free") +
geom_hline(data = dplyr::filter(to_plot, metric_fct == "Bias"),
mapping = aes(yintercept = 0), colour = "black") +
geom_hline(data = dplyr::filter(to_plot, metric_fct == "MSE"),
mapping = aes(yintercept = 0), colour = "black") +
geom_hline(data = dplyr::filter(to_plot, metric_fct == "Coverage"),
mapping = aes(yintercept = 0.95), colour = "black") +
geom_line() + geom_errorbar(width = 0.05) + geom_point() +
theme_bw() + theme(legend.position = "bottom", panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) + ylab("")
p
library(dplyr)
library(ggplot2)
library(simulatr)
# load the results and specifier objects
sim_result_dir <- paste0(.get_config_path("LOCAL_GLMEIV_DATA_DIR"), "public/simulations/results")
sim_res_2 <- readRDS(paste0(sim_result_dir, "/sim_res_2.rds"))[["metrics"]]
source(paste0(.get_config_path("LOCAL_CODE_DIR"), "glmeiv-manuscript/R_scripts/plotting/simulation_plots/shared_plotting_code.R"))
to_plot <- sim_res_2 |> transform_metric_df()
p <- ggplot(data = to_plot, mapping = aes(x = g_perturbation, y = mean,
ymin = mean - 2 * se,
ymax = mean + 2 * se,
col = Method)) +
xlab(expression(exp(beta[g]))) + scale_color_manual(values = my_cols) +
facet_grid(metric_fct ~ ., scales = "free") +
geom_hline(data = dplyr::filter(to_plot, metric_fct == "Bias"),
mapping = aes(yintercept = 0), colour = "black") +
geom_hline(data = dplyr::filter(to_plot, metric_fct == "MSE"),
mapping = aes(yintercept = 0), colour = "black") +
geom_hline(data = dplyr::filter(to_plot, metric_fct == "Coverage"),
mapping = aes(yintercept = 0.95), colour = "black") +
geom_line() + geom_errorbar(width = 0.05) + geom_point() +
theme_bw() + theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) + ylab("")
p
library(dplyr)
library(ggplot2)
library(simulatr)
# load the results and specifier objects
sim_result_dir <- paste0(.get_config_path("LOCAL_GLMEIV_DATA_DIR"), "public/simulations/results")
sim_res_3 <- readRDS(paste0(sim_result_dir, "/sim_res_3.rds"))[["metrics"]]
source(paste0(.get_config_path("LOCAL_CODE_DIR"), "glmeiv-manuscript/R_scripts/plotting/simulation_plots/shared_plotting_code.R"))
to_plot <- sim_res_3 |>
mutate(fam_str = ifelse(run_mrna_unknown_theta_precomputation, "nb_theta_unknown", "nb_theta_known")) |>
transform_metric_df()
p <- ggplot(data = to_plot, mapping = aes(x = theta,
y = mean,
ymin = mean - 2 * se,
ymax = mean + 2 * se,
col = Method)) +
xlab(expression(theta)) + scale_color_manual(values = my_cols) +
scale_x_continuous(trans = "log10") +
facet_grid(metric_fct ~ fam_str, scales = "free") +
geom_hline(data = dplyr::filter(to_plot, metric_fct == "Bias"),
mapping = aes(yintercept = 0), colour = "black") +
geom_hline(data = dplyr::filter(to_plot, metric_fct == "MSE"),
mapping = aes(yintercept = 0), colour = "black") +
geom_hline(data = dplyr::filter(to_plot, metric_fct == "Coverage"),
mapping = aes(yintercept = 0.95), colour = "black") +
geom_line() + geom_errorbar(width = 0.05) + geom_point() +
theme_bw() + theme(legend.position = "bottom", panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) + ylab("") +
ggplot2::guides(color = ggplot2::guide_legend(
nrow = 3, byrow = TRUE,
keyheight = 0.01,
default.unit = "inch",
override.aes = list(size = 1.25)))
ggsave(filename = "~/Desktop/p3.pdf", plot = p, device = "pdf", scale = 1, width = 4, height = 6)
p
library(dplyr)
library(ggplot2)
library(simulatr)
# load the results and specifier objects
sim_result_dir <- paste0(.get_config_path("LOCAL_GLMEIV_DATA_DIR"), "public/simulations/results")
sim_res_4 <- readRDS(paste0(sim_result_dir, "/sim_res_4.rds"))[["metrics"]]
source(paste0(.get_config_path("LOCAL_CODE_DIR"), "glmeiv-manuscript/R_scripts/plotting/simulation_plots/shared_plotting_code.R"))
to_plot <- sim_res_4 |> transform_metric_df() |> mutate(exp_m_perturbation = exp(m_perturbation))
p <- ggplot(data = to_plot, mapping = aes(x = exp_m_perturbation,
y = mean,
ymin = mean - 2 * se,
ymax = mean + 2 * se,
col = Method)) +
xlab(expression(exp(beta[m]))) + scale_color_manual(values = my_cols) +
facet_grid(metric_fct ~ fam_str, scales = "free") +
geom_hline(data = dplyr::filter(to_plot, metric_fct == "Bias"),
mapping = aes(yintercept = 0), colour = "black") +
geom_hline(data = dplyr::filter(to_plot, metric_fct == "MSE"),
mapping = aes(yintercept = 0), colour = "black") +
geom_hline(data = dplyr::filter(to_plot, metric_fct == "Coverage"),
mapping = aes(yintercept = 0.95), colour = "black") +
geom_line() + geom_errorbar(width = 0.05) + geom_point() +
theme_bw() + theme(legend.position = "bottom", panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) + ylab("")
p
load_all("~/research_code/glmeiv")
library(caret)
# prepare the data
papalexi_dir <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"), "data/papalexi/eccite_screen/")
gene_odm_fp <- paste0(papalexi_dir, "gene/matrix.odm")
grna_odm_fp <- paste0(papalexi_dir, "grna_expression/matrix.odm")
mm_metadata_fp <- paste0(papalexi_dir, "multimodal_metadata.rds")
mm_odm <- ondisc::read_multimodal_odm(odm_fps = c(gene_odm_fp, grna_odm_fp),
multimodal_metadata_fp = mm_metadata_fp)
covariate_mat <- mm_odm |> ondisc::get_cell_covariates()
covariate_mat_trans <- covariate_mat |>
dplyr::select(gene_n_nonzero, gene_n_umis, grna_expression_n_nonzero, grna_expression_n_umis, bio_rep) |>
dplyr::mutate(gene_n_nonzero = log(gene_n_nonzero),
gene_n_umis = log(gene_n_umis),
grna_expression_n_nonzero = log(grna_expression_n_nonzero),
grna_expression_n_umis = log(grna_expression_n_umis))
odm <- mm_odm |> ondisc::get_modality("grna_expression")
grna_mat <- odm[[1:nrow(odm),]] |> as.matrix()
grna_ids <- ondisc::get_feature_ids(odm)
# 0. identify the top 95% most highly expressed gRNAs -- analyze these
n_nonzero_per_grna <- rowSums(grna_mat >= 1)
cutoff <- quantile(n_nonzero_per_grna, probs = 0.05)
grnas_to_keep <- which(n_nonzero_per_grna > cutoff)
cellwise_grna_counts <- colSums(grna_mat)
grna_id <- grnas_to_keep[1]
print(grna_id)
g <- grna_mat[grna_id,]
curr_grna_id <- grna_ids[grnas_to_keep[grna_id]]
heaD(g)
head(g)
curr_grna_id
# first, assign based on UMI counts; if g makes up more than 25% of the reads, assign
ratios <- g/cellwise_grna_counts
head(ratios)
ground_truth_assignments <- ratios >= 0.25
# second, assign based on the mixture model
res <- assign_grnas_unimodal_mixture(g = g, g_fam = poisson() |> augment_family_object(),
covariate_matrix = covariate_mat_trans, g_offset = NULL)
mixture_assignments <- res$phat
# compute the confusion matrix
ground_truth_assignments <- ifelse(ground_truth_assignments, "Perturbed", "Unperturbed") |> factor()
mixture_assignments <- ifelse(mixture_assignments == 0, "Unperturbed", "Perturbed") |> factor()
# third assign according to the simple two-component gaussian
log2(g)
# third assign according to the simple two-component gaussian
log2(g + 1)
log2(g + 1) |> hist()
# third assign according to the simple two-component gaussian
g_trans <- log2(g + 1)
fit <- flexmix::flexmix(g_trans ~ 1, k = 2)
fit
fit
fit
fit
fit
fit
clusters(fit)
fit@cluster
ifelse(fit@cluster == 1, "unperturbed", "perturbed")
simple_assignments <- ifelse(fit@cluster == 1, "unperturbed", "perturbed") |> factor()
simple_assignments
class(simple_assignments)
levels(simple_assignments)
simple_assignments
simple_assignments <- ifelse(fit@cluster == 1, "unperturbed", "perturbed") |> factor(levels = c("unperturbed", "perturbed"))
simple_assignments
confusion_mat_simple <- confusionMatrix(data = simple_assignments, reference = ground_truth_assignments)
head(simple_assignments)
simple_assignments
ground_truth_assignments
simple_assignments <- ifelse(fit@cluster == 1, "Unperturbed", "Perturbed") |> factor(levels = c("Unperturbed", "Perturbed"))
confusion_mat_simple <- confusionMatrix(data = simple_assignments, reference = ground_truth_assignments)
head(simple_assignments)
# compute the confusion matrix
ground_truth_assignments <- ifelse(ground_truth_assignments, "Perturbed", "Unperturbed") |> factor()
mixture_assignments <- ifelse(mixture_assignments == 0, "Unperturbed", "Perturbed") |> factor()
simple_assignments <- ifelse(fit@cluster == 2, "Perturbed", "Unperturbed") |> factor(levels = c("Unperturbed", "Perturbed"))
confusion_mat_simple <- confusionMatrix(data = simple_assignments, reference = ground_truth_assignments)
simple_assignments
ground_truth_assignments
# compute the confusion matrix
ground_truth_assignments <- ifelse(ground_truth_assignments, "Perturbed", "Unperturbed") |> factor(levels = c("Perturbed", "Unperturbed"))
mixture_assignments <- ifelse(mixture_assignments == 0, "Unperturbed", "Perturbed") |> factor(levels = c("Perturbed", "Unperturbed"))
# compute the confusion matrix
ground_truth_assignments <- ifelse(ground_truth_assignments, "Perturbed", "Unperturbed") |> factor(levels = c("Perturbed", "Unperturbed"))
ifelse(ground_truth_assignments, "Perturbed", "Unperturbed")
ground_truth_assignments
print(grna_id)
g <- grna_mat[grna_id,]
curr_grna_id <- grna_ids[grnas_to_keep[grna_id]]
# first, assign based on UMI counts; if g makes up more than 25% of the reads, assign
ratios <- g/cellwise_grna_counts
ground_truth_assignments <- ratios >= 0.25
# second, assign based on the mixture model
res <- assign_grnas_unimodal_mixture(g = g, g_fam = poisson() |> augment_family_object(),
covariate_matrix = covariate_mat_trans, g_offset = NULL)
mixture_assignments <- res$phat
# third assign according to the simple two-component gaussian
g_trans <- log2(g + 1)
fit <- flexmix::flexmix(g_trans ~ 1, k = 2)
# compute the confusion matrix
ground_truth_assignments <- ifelse(ground_truth_assignments, "Perturbed", "Unperturbed") |> factor(levels = c("Perturbed", "Unperturbed"))
ground_truth_assignments
mixture_assignments <- ifelse(mixture_assignments == 0, "Unperturbed", "Perturbed") |> factor(levels = c("Perturbed", "Unperturbed"))
mixture_assignments
simple_assignments <- ifelse(fit@cluster == 2, "Perturbed", "Unperturbed") |> factor(levels = c("Perturbed", "Unperturbed"))
simple_assignments
confusion_mat_simple <- confusionMatrix(data = simple_assignments, reference = ground_truth_assignments)
confusion_mat_simple
confusion_mat <- confusionMatrix(data = mixture_assignments, reference = ground_truth_assignments)
confusion_mat_simple <- confusionMatrix(data = simple_assignments, reference = ground_truth_assignments)
confusion_mat
confusion_mat_simple <- confusionMatrix(data = simple_assignments, reference = ground_truth_assignments)
confusion_mat_simple
load_all("~/research_code/glmeiv")
library(caret)
# prepare the data
papalexi_dir <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"), "data/papalexi/eccite_screen/")
gene_odm_fp <- paste0(papalexi_dir, "gene/matrix.odm")
grna_odm_fp <- paste0(papalexi_dir, "grna_expression/matrix.odm")
mm_metadata_fp <- paste0(papalexi_dir, "multimodal_metadata.rds")
mm_odm <- ondisc::read_multimodal_odm(odm_fps = c(gene_odm_fp, grna_odm_fp),
multimodal_metadata_fp = mm_metadata_fp)
covariate_mat <- mm_odm |> ondisc::get_cell_covariates()
covariate_mat_trans <- covariate_mat |>
dplyr::select(gene_n_nonzero, gene_n_umis, grna_expression_n_nonzero, grna_expression_n_umis, bio_rep) |>
dplyr::mutate(gene_n_nonzero = log(gene_n_nonzero),
gene_n_umis = log(gene_n_umis),
grna_expression_n_nonzero = log(grna_expression_n_nonzero),
grna_expression_n_umis = log(grna_expression_n_umis))
odm <- mm_odm |> ondisc::get_modality("grna_expression")
grna_mat <- odm[[1:nrow(odm),]] |> as.matrix()
grna_ids <- ondisc::get_feature_ids(odm)
# 0. identify the top 95% most highly expressed gRNAs -- analyze these
n_nonzero_per_grna <- rowSums(grna_mat >= 1)
cutoff <- quantile(n_nonzero_per_grna, probs = 0.05)
grnas_to_keep <- which(n_nonzero_per_grna > cutoff)
cellwise_grna_counts <- colSums(grna_mat)
# 1. loop over the grnas
output <- sapply(grnas_to_keep, function(grna_id) {
print(grna_id)
g <- grna_mat[grna_id,]
curr_grna_id <- grna_ids[grnas_to_keep[grna_id]]
# first, assign based on UMI counts; if g makes up more than 25% of the reads, assign
ratios <- g/cellwise_grna_counts
ground_truth_assignments <- ratios >= 0.25
# second, assign based on the mixture model
res <- assign_grnas_unimodal_mixture(g = g, g_fam = poisson() |> augment_family_object(),
covariate_matrix = covariate_mat_trans, g_offset = NULL)
mixture_assignments <- res$phat
# third assign according to the simple two-component gaussian
g_trans <- log2(g + 1)
fit <- flexmix::flexmix(g_trans ~ 1, k = 2)
# compute the confusion matrix
ground_truth_assignments <- ifelse(ground_truth_assignments, "Perturbed", "Unperturbed") |> factor(levels = c("Perturbed", "Unperturbed"))
mixture_assignments <- ifelse(mixture_assignments == 0, "Unperturbed", "Perturbed") |> factor(levels = c("Perturbed", "Unperturbed"))
simple_assignments <- ifelse(fit@cluster == 2, "Perturbed", "Unperturbed") |> factor(levels = c("Perturbed", "Unperturbed"))
confusion_mat <- confusionMatrix(data = mixture_assignments, reference = ground_truth_assignments)
confusion_mat_simple <- confusionMatrix(data = simple_assignments, reference = ground_truth_assignments)
return(list(confusion_mat = confusion_mat, confusion_mat_simple, g = g,
mixture_assignments = mixture_assignments,
ground_truth_assignments = ground_truth_assignments,
curr_grna_id = curr_grna_id))
}, simplify = FALSE)
load_all()
load_all("~/research_code/glmeiv")
library(caret)
# prepare the data
papalexi_dir <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"), "data/papalexi/eccite_screen/")
gene_odm_fp <- paste0(papalexi_dir, "gene/matrix.odm")
grna_odm_fp <- paste0(papalexi_dir, "grna_expression/matrix.odm")
mm_metadata_fp <- paste0(papalexi_dir, "multimodal_metadata.rds")
mm_odm <- ondisc::read_multimodal_odm(odm_fps = c(gene_odm_fp, grna_odm_fp),
multimodal_metadata_fp = mm_metadata_fp)
covariate_mat <- mm_odm |> ondisc::get_cell_covariates()
covariate_mat_trans <- covariate_mat |>
dplyr::select(gene_n_nonzero, gene_n_umis, grna_expression_n_nonzero, grna_expression_n_umis, bio_rep) |>
dplyr::mutate(gene_n_nonzero = log(gene_n_nonzero),
gene_n_umis = log(gene_n_umis),
grna_expression_n_nonzero = log(grna_expression_n_nonzero),
grna_expression_n_umis = log(grna_expression_n_umis))
odm <- mm_odm |> ondisc::get_modality("grna_expression")
grna_mat <- odm[[1:nrow(odm),]] |> as.matrix()
grna_ids <- ondisc::get_feature_ids(odm)
# 0. identify the top 95% most highly expressed gRNAs -- analyze these
n_nonzero_per_grna <- rowSums(grna_mat >= 1)
cutoff <- quantile(n_nonzero_per_grna, probs = 0.05)
grnas_to_keep <- which(n_nonzero_per_grna > cutoff)
cellwise_grna_counts <- colSums(grna_mat)
# 1. loop over the grnas
output <- sapply(grnas_to_keep, function(grna_id) {
print(grna_id)
g <- grna_mat[grna_id,]
curr_grna_id <- grna_ids[grnas_to_keep[grna_id]]
# first, assign based on UMI counts; if g makes up more than 25% of the reads, assign
ratios <- g/cellwise_grna_counts
ground_truth_assignments <- ratios >= 0.25
# second, assign based on the mixture model
res <- assign_grnas_unimodal_mixture(g = g, g_fam = poisson() |> augment_family_object(),
covariate_matrix = covariate_mat_trans, g_offset = NULL)
mixture_assignments <- res$phat
# third assign according to the simple two-component gaussian
g_trans <- log2(g + 1)
tryCatch({
fit <- flexmix::flexmix(g_trans ~ 1, k = 2)
simple_assignments <- ifelse(fit@cluster == 2, "Perturbed", "Unperturbed") |> factor(levels = c("Perturbed", "Unperturbed"))
}, error = function(e) {
simple_assignments <- rep("Unperturbed", length(g_trans)) |> factor(levels = c("Perturbed", "Unperturbed"))
})
# compute the confusion matrix
ground_truth_assignments <- ifelse(ground_truth_assignments, "Perturbed", "Unperturbed") |> factor(levels = c("Perturbed", "Unperturbed"))
mixture_assignments <- ifelse(mixture_assignments == 0, "Unperturbed", "Perturbed") |> factor(levels = c("Perturbed", "Unperturbed"))
confusion_mat <- confusionMatrix(data = mixture_assignments, reference = ground_truth_assignments)
confusion_mat_simple <- confusionMatrix(data = simple_assignments, reference = ground_truth_assignments)
return(list(confusion_mat = confusion_mat, confusion_mat_simple, g = g,
mixture_assignments = mixture_assignments,
ground_truth_assignments = ground_truth_assignments,
curr_grna_id = curr_grna_id))
}, simplify = FALSE)
grna_id
grna_id <- 4
print(grna_id)
g <- grna_mat[grna_id,]
curr_grna_id <- grna_ids[grnas_to_keep[grna_id]]
# first, assign based on UMI counts; if g makes up more than 25% of the reads, assign
ratios <- g/cellwise_grna_counts
ground_truth_assignments <- ratios >= 0.25
# second, assign based on the mixture model
res <- assign_grnas_unimodal_mixture(g = g, g_fam = poisson() |> augment_family_object(),
covariate_matrix = covariate_mat_trans, g_offset = NULL)
mixture_assignments <- res$phat
# third assign according to the simple two-component gaussian
g_trans <- log2(g + 1)
tryCatch({
fit <- flexmix::flexmix(g_trans ~ 1, k = 2)
simple_assignments <- ifelse(fit@cluster == 2, "Perturbed", "Unperturbed") |> factor(levels = c("Perturbed", "Unperturbed"))
}, error = function(e) {
simple_assignments <- rep("Unperturbed", length(g_trans)) |> factor(levels = c("Perturbed", "Unperturbed"))
})
simple_assignments
fit <- flexmix::flexmix(g_trans ~ 1, k = 2)
tryCatch({
fit <- flexmix::flexmix(g_trans ~ 1, k = 2)
simple_assignments <- ifelse(fit@cluster == 2, "Perturbed", "Unperturbed") |> factor(levels = c("Perturbed", "Unperturbed"))
}, error = function(e) {
print("catch")
simple_assignments <- rep("Unperturbed", length(g_trans)) |> factor(levels = c("Perturbed", "Unperturbed"))
})
simple_assignments <- tryCatch({
fit <- flexmix::flexmix(g_trans ~ 1, k = 2)
ifelse(fit@cluster == 2, "Perturbed", "Unperturbed") |> factor(levels = c("Perturbed", "Unperturbed"))
}, error = function(e) {
rep("Unperturbed", length(g_trans)) |> factor(levels = c("Perturbed", "Unperturbed"))
})
simple_assignments
load_all("~/research_code/glmeiv")
library(caret)
# prepare the data
papalexi_dir <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"), "data/papalexi/eccite_screen/")
gene_odm_fp <- paste0(papalexi_dir, "gene/matrix.odm")
grna_odm_fp <- paste0(papalexi_dir, "grna_expression/matrix.odm")
mm_metadata_fp <- paste0(papalexi_dir, "multimodal_metadata.rds")
mm_odm <- ondisc::read_multimodal_odm(odm_fps = c(gene_odm_fp, grna_odm_fp),
multimodal_metadata_fp = mm_metadata_fp)
covariate_mat <- mm_odm |> ondisc::get_cell_covariates()
covariate_mat_trans <- covariate_mat |>
dplyr::select(gene_n_nonzero, gene_n_umis, grna_expression_n_nonzero, grna_expression_n_umis, bio_rep) |>
dplyr::mutate(gene_n_nonzero = log(gene_n_nonzero),
gene_n_umis = log(gene_n_umis),
grna_expression_n_nonzero = log(grna_expression_n_nonzero),
grna_expression_n_umis = log(grna_expression_n_umis))
odm <- mm_odm |> ondisc::get_modality("grna_expression")
grna_mat <- odm[[1:nrow(odm),]] |> as.matrix()
grna_ids <- ondisc::get_feature_ids(odm)
# 0. identify the top 95% most highly expressed gRNAs -- analyze these
n_nonzero_per_grna <- rowSums(grna_mat >= 1)
cutoff <- quantile(n_nonzero_per_grna, probs = 0.05)
grnas_to_keep <- which(n_nonzero_per_grna > cutoff)
cellwise_grna_counts <- colSums(grna_mat)
# 1. loop over the grnas
output <- sapply(grnas_to_keep, function(grna_id) {
print(grna_id)
g <- grna_mat[grna_id,]
curr_grna_id <- grna_ids[grnas_to_keep[grna_id]]
# first, assign based on UMI counts; if g makes up more than 25% of the reads, assign
ratios <- g/cellwise_grna_counts
ground_truth_assignments <- ratios >= 0.25
# second, assign based on the mixture model
res <- assign_grnas_unimodal_mixture(g = g, g_fam = poisson() |> augment_family_object(),
covariate_matrix = covariate_mat_trans, g_offset = NULL)
mixture_assignments <- res$phat
# third assign according to the simple two-component gaussian
g_trans <- log2(g + 1)
simple_assignments <- tryCatch({
fit <- flexmix::flexmix(g_trans ~ 1, k = 2)
ifelse(fit@cluster == 2, "Perturbed", "Unperturbed") |> factor(levels = c("Perturbed", "Unperturbed"))
}, error = function(e) {
rep("Unperturbed", length(g_trans)) |> factor(levels = c("Perturbed", "Unperturbed"))
})
# compute the confusion matrix
ground_truth_assignments <- ifelse(ground_truth_assignments, "Perturbed", "Unperturbed") |> factor(levels = c("Perturbed", "Unperturbed"))
mixture_assignments <- ifelse(mixture_assignments == 0, "Unperturbed", "Perturbed") |> factor(levels = c("Perturbed", "Unperturbed"))
confusion_mat <- confusionMatrix(data = mixture_assignments, reference = ground_truth_assignments)
confusion_mat_simple <- confusionMatrix(data = simple_assignments, reference = ground_truth_assignments)
return(list(confusion_mat = confusion_mat, confusion_mat_simple, g = g,
mixture_assignments = mixture_assignments,
ground_truth_assignments = ground_truth_assignments,
curr_grna_id = curr_grna_id))
}, simplify = FALSE)
# save the output
to_save_dir <- paste0(.get_config_path("LOCAL_GLMEIV_DATA_DIR"), "public/aux/")
to_save_dir
saveRDS(object = output, file = paste0(to_save_dir, "papalexi_unimodal_grna_assignments.rds"))
library(ggplot2)
library(cowplot)
# create plots related to unimodal gRNA assignments
to_read_dir <- paste0(.get_config_path("LOCAL_GLMEIV_DATA_DIR"), "public/aux/")
result <- readRDS(file = paste0(to_read_dir, "papalexi_unimodal_grna_assignments.rds"))
my_cols <- c("darkorchid1", "firebrick2")
# p_a: a plot of gRNA count vs. assignment (for both mixture model and ground truth)
grna_idx <- 2
grna_id <- result[[grna_idx]]$curr_grna_id
g <- result[[grna_idx]]$g
mixture_assignments <- result[[grna_idx]]$mixture_assignments
ground_truth_assignments <- result[[grna_idx]]$ground_truth_assignments
df <- data.frame(g = g,
mixture_assignment = mixture_assignments,
ground_truth_assignment = ground_truth_assignments)
p_a <- ggplot(data = df, mapping = aes(x = mixture_assignment, y = g, col = ground_truth_assignment)) +
geom_jitter(alpha = 0.8) +
scale_y_continuous(trans = "log1p", breaks = c(0, 1, 5, 20, 50, 200, 1000)) +
labs(color = "Ground truth\n assignment") +
xlab("Unimodal GLM-EIV assignment") +
ylab("gRNA count") +
ggtitle(paste0("Perturbation assignments\nfor gRNA ", grna_id)) +
sceptre:::get_my_theme() +
scale_color_manual(values = my_cols)
result
library(ggplot2)
library(cowplot)
# create plots related to unimodal gRNA assignments
to_read_dir <- paste0(.get_config_path("LOCAL_GLMEIV_DATA_DIR"), "public/aux/")
result <- readRDS(file = paste0(to_read_dir, "papalexi_unimodal_grna_assignments.rds"))
my_cols <- c("darkorchid1", "firebrick2")
# p_a: a plot of gRNA count vs. assignment (for both mixture model and ground truth)
grna_idx <- 2
grna_id <- result[[grna_idx]]$curr_grna_id
g <- result[[grna_idx]]$g
mixture_assignments <- result[[grna_idx]]$mixture_assignments
ground_truth_assignments <- result[[grna_idx]]$ground_truth_assignments
df <- data.frame(g = g,
mixture_assignment = mixture_assignments,
ground_truth_assignment = ground_truth_assignments)
p_a <- ggplot(data = df, mapping = aes(x = mixture_assignment, y = g, col = ground_truth_assignment)) +
geom_jitter(alpha = 0.8) +
scale_y_continuous(trans = "log1p", breaks = c(0, 1, 5, 20, 50, 200, 1000)) +
labs(color = "Ground truth\n assignment") +
xlab("Unimodal GLM-EIV assignment") +
ylab("gRNA count") +
ggtitle(paste0("Perturbation assignments\nfor gRNA ", grna_id)) +
sceptre:::get_my_theme() +
scale_color_manual(values = my_cols)
sensitivities_simple <- sapply(X = result, FUN = function(l) l$confusion_mat_simple$byClass[["Sensitivity"]]) |> unlist()
sensitivities_simple
result[[1]]$``
