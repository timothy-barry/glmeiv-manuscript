source(paste0(.get_config_path("LOCAL_CODE_DIR"), "glmeiv-manuscript/R_scripts/plotting/simulation_plots/shared_plotting_code.R"))
to_plot <- sim_res |> transform_metric_df() |>
mutate(exp_g_perturbation = exp(g_perturbation),
exp_m_perturbation = exp(m_perturbation))
p <- ggplot(data = to_plot, mapping = aes(x = exp_g_perturbation,
y = mean,
ymin = mean - 2 * se,
ymax = mean + 2 * se,
col = Method)) +
xlab(expression(exp(beta[g]))) + scale_color_manual(values = my_cols) +
facet_grid(metric_fct ~ exp_m_perturbation, scales = "free") +
geom_hline(data = dplyr::filter(to_plot, metric_fct == "Bias"),
mapping = aes(yintercept = 0), colour = "black") +
geom_hline(data = dplyr::filter(to_plot, metric_fct == "MSE"),
mapping = aes(yintercept = 0), colour = "black") +
geom_hline(data = dplyr::filter(to_plot, metric_fct == "Coverage"),
mapping = aes(yintercept = 0.95), colour = "black") +
geom_line() + geom_errorbar(width = 0.05) + geom_point() +
theme_bw() + theme(legend.position = "bottom", panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) + ylab("")
p
theta <- 20
n <- 50000
g_perturbation_grid <- log(seq(1, 4, 0.5))
m_perturbation_grid <- log(seq(1, 0.25, by = -0.25))
param_grid <- expand.grid(g_perturbation = g_perturbation_grid,
m_perturbation = m_perturbation_grid)
param_grid$grid_id <- seq(1, nrow(param_grid))
param_grid$ground_truth <- param_grid$m_perturbation
fixed_params <- list(
g_fam = poisson() |> augment_family_object(),
m_fam = MASS::negative.binomial(20) |> augment_family_object(),
run_grna_unknown_theta_precomputation = FALSE,
run_mrna_unknown_theta_precomputation = FALSE,
seed = 4,
n = n,
B = 500,
m_intercept = log(0.01),
g_intercept = log(0.005),
covariate_matrix = data.frame(batch = rbinom(n = n, size = 1, prob = 0.5),
cell_cycle = runif(n = n, min = 0, max = 1)),
grna_duplet_rate = 0.0,
mrna_duplet_rate = 0.00,
rm_covariate = "cell_cycle",
m_covariate_coefs = log(c(0.9, 1.25)),
g_covariate_coefs = log(c(0.8, 1.0)),
alpha = 0.95,
n_em_rep = 15,
save_membership_probs_mult = 1000L,
pi = 0.02,
m_offset = log(rpois(n = n, lambda = 10000)),
g_offset = log(rpois(n = n, lambda = 5000)),
pi_guess_range = c(1e-5, 0.03),
m_perturbation_guess_range = log(c(0.1, 1.5)),
g_perturbation_guess_range = log(c(0.5, 10)),
m_intercept_guess_range = log(c(1e-4, 1e-1)),
g_intercept_guess_range = log(c(1e-4, 1e-1)),
m_covariate_coefs_guess_range = log(c(0.25, 2)),
g_covariate_coefs_guess_range = log(c(0.25, 2)),
exponentiate_coefs = FALSE,
ep_tol = 1e-4)
sim_spec_6 <- create_simulatr_specifier_object(param_grid = param_grid,
fixed_params = fixed_params,
methods = c("glmeiv_fast", "thresholding", "unimodal_mixture"))
check <- simulatr::check_simulatr_specifier_object(simulatr_spec = sim_spec_6, B_in = 2, parallel = TRUE)
sim_res <- check$metrics
# load the results and specifier objects
# sim_result_dir <- paste0(.get_config_path("LOCAL_GLMEIV_DATA_DIR"), "public/simulations/results")
# sim_res <- readRDS(paste0(sim_result_dir, "/sim_res_6.rds"))[["metrics"]]
source(paste0(.get_config_path("LOCAL_CODE_DIR"), "glmeiv-manuscript/R_scripts/plotting/simulation_plots/shared_plotting_code.R"))
to_plot <- sim_res |> transform_metric_df() |>
mutate(exp_g_perturbation = exp(g_perturbation),
exp_m_perturbation = exp(m_perturbation))
p <- ggplot(data = to_plot, mapping = aes(x = exp_g_perturbation,
y = mean,
ymin = mean - 2 * se,
ymax = mean + 2 * se,
col = Method)) +
xlab(expression(exp(beta[g]))) + scale_color_manual(values = my_cols) +
facet_grid(metric_fct ~ exp_m_perturbation, scales = "free") +
geom_hline(data = dplyr::filter(to_plot, metric_fct == "Bias"),
mapping = aes(yintercept = 0), colour = "black") +
geom_hline(data = dplyr::filter(to_plot, metric_fct == "MSE"),
mapping = aes(yintercept = 0), colour = "black") +
geom_hline(data = dplyr::filter(to_plot, metric_fct == "Coverage"),
mapping = aes(yintercept = 0.95), colour = "black") +
geom_line() + geom_errorbar(width = 0.05) + geom_point() +
theme_bw() + theme(legend.position = "bottom", panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) + ylab("")
p
fixed_params <- list(
g_fam = poisson() |> augment_family_object(),
m_fam = MASS::negative.binomial(20) |> augment_family_object(),
run_grna_unknown_theta_precomputation = FALSE,
run_mrna_unknown_theta_precomputation = FALSE,
seed = 4,
n = n,
B = 500,
m_intercept = log(0.01),
g_intercept = log(0.005),
covariate_matrix = data.frame(batch = rbinom(n = n, size = 1, prob = 0.5),
cell_cycle = runif(n = n, min = 0, max = 1)),
grna_duplet_rate = 0.00,
mrna_duplet_rate = 0.03,
rm_covariate = "cell_cycle",
m_covariate_coefs = log(c(0.9, 1.25)),
g_covariate_coefs = log(c(0.8, 1.0)),
alpha = 0.95,
n_em_rep = 15,
save_membership_probs_mult = 1000L,
pi = 0.02,
m_offset = log(rpois(n = n, lambda = 10000)),
g_offset = log(rpois(n = n, lambda = 5000)),
pi_guess_range = c(1e-5, 0.03),
m_perturbation_guess_range = log(c(0.1, 1.5)),
g_perturbation_guess_range = log(c(0.5, 10)),
m_intercept_guess_range = log(c(1e-4, 1e-1)),
g_intercept_guess_range = log(c(1e-4, 1e-1)),
m_covariate_coefs_guess_range = log(c(0.25, 2)),
g_covariate_coefs_guess_range = log(c(0.25, 2)),
exponentiate_coefs = FALSE,
ep_tol = 1e-4)
sim_spec_6 <- create_simulatr_specifier_object(param_grid = param_grid,
fixed_params = fixed_params,
methods = c("glmeiv_fast", "thresholding", "unimodal_mixture"))
check <- simulatr::check_simulatr_specifier_object(simulatr_spec = sim_spec_6, B_in = 2, parallel = TRUE)
sim_res <- check$metrics
to_plot <- sim_res |> transform_metric_df() |>
mutate(exp_g_perturbation = exp(g_perturbation),
exp_m_perturbation = exp(m_perturbation))
p <- ggplot(data = to_plot, mapping = aes(x = exp_g_perturbation,
y = mean,
ymin = mean - 2 * se,
ymax = mean + 2 * se,
col = Method)) +
xlab(expression(exp(beta[g]))) + scale_color_manual(values = my_cols) +
facet_grid(metric_fct ~ exp_m_perturbation, scales = "free") +
geom_hline(data = dplyr::filter(to_plot, metric_fct == "Bias"),
mapping = aes(yintercept = 0), colour = "black") +
geom_hline(data = dplyr::filter(to_plot, metric_fct == "MSE"),
mapping = aes(yintercept = 0), colour = "black") +
geom_hline(data = dplyr::filter(to_plot, metric_fct == "Coverage"),
mapping = aes(yintercept = 0.95), colour = "black") +
geom_line() + geom_errorbar(width = 0.05) + geom_point() +
theme_bw() + theme(legend.position = "bottom", panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) + ylab("")
p
fixed_params <- list(
g_fam = poisson() |> augment_family_object(),
m_fam = MASS::negative.binomial(20) |> augment_family_object(),
run_grna_unknown_theta_precomputation = FALSE,
run_mrna_unknown_theta_precomputation = FALSE,
seed = 4,
n = n,
B = 500,
m_intercept = log(0.01),
g_intercept = log(0.005),
covariate_matrix = data.frame(batch = rbinom(n = n, size = 1, prob = 0.5),
cell_cycle = runif(n = n, min = 0, max = 1)),
grna_duplet_rate = 0.00,
mrna_duplet_rate = 0.01,
rm_covariate = "cell_cycle",
m_covariate_coefs = log(c(0.9, 0.75)),
g_covariate_coefs = log(c(0.8, 1.0)),
alpha = 0.95,
n_em_rep = 15,
save_membership_probs_mult = 1000L,
pi = 0.02,
m_offset = log(rpois(n = n, lambda = 10000)),
g_offset = log(rpois(n = n, lambda = 5000)),
pi_guess_range = c(1e-5, 0.03),
m_perturbation_guess_range = log(c(0.1, 1.5)),
g_perturbation_guess_range = log(c(0.5, 10)),
m_intercept_guess_range = log(c(1e-4, 1e-1)),
g_intercept_guess_range = log(c(1e-4, 1e-1)),
m_covariate_coefs_guess_range = log(c(0.25, 2)),
g_covariate_coefs_guess_range = log(c(0.25, 2)),
exponentiate_coefs = FALSE,
ep_tol = 1e-4)
sim_spec_6 <- create_simulatr_specifier_object(param_grid = param_grid,
fixed_params = fixed_params,
methods = c("glmeiv_fast", "thresholding", "unimodal_mixture"))
check <- simulatr::check_simulatr_specifier_object(simulatr_spec = sim_spec_6, B_in = 2, parallel = TRUE)
check$metrics
check$metrics -> sim_res
# load the results and specifier objects
# sim_result_dir <- paste0(.get_config_path("LOCAL_GLMEIV_DATA_DIR"), "public/simulations/results")
# sim_res <- readRDS(paste0(sim_result_dir, "/sim_res_6.rds"))[["metrics"]]
source(paste0(.get_config_path("LOCAL_CODE_DIR"), "glmeiv-manuscript/R_scripts/plotting/simulation_plots/shared_plotting_code.R"))
to_plot <- sim_res |> transform_metric_df() |>
mutate(exp_g_perturbation = exp(g_perturbation),
exp_m_perturbation = exp(m_perturbation))
p <- ggplot(data = to_plot, mapping = aes(x = exp_g_perturbation,
y = mean,
ymin = mean - 2 * se,
ymax = mean + 2 * se,
col = Method)) +
xlab(expression(exp(beta[g]))) + scale_color_manual(values = my_cols) +
facet_grid(metric_fct ~ exp_m_perturbation, scales = "free") +
geom_hline(data = dplyr::filter(to_plot, metric_fct == "Bias"),
mapping = aes(yintercept = 0), colour = "black") +
geom_hline(data = dplyr::filter(to_plot, metric_fct == "MSE"),
mapping = aes(yintercept = 0), colour = "black") +
geom_hline(data = dplyr::filter(to_plot, metric_fct == "Coverage"),
mapping = aes(yintercept = 0.95), colour = "black") +
geom_line() + geom_errorbar(width = 0.05) + geom_point() +
theme_bw() + theme(legend.position = "bottom", panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) + ylab("")
p
fixed_params <- list(
g_fam = poisson() |> augment_family_object(),
m_fam = MASS::negative.binomial(20) |> augment_family_object(),
run_grna_unknown_theta_precomputation = FALSE,
run_mrna_unknown_theta_precomputation = FALSE,
seed = 4,
n = n,
B = 500,
m_intercept = log(0.01),
g_intercept = log(0.005),
covariate_matrix = data.frame(batch = rbinom(n = n, size = 1, prob = 0.5),
cell_cycle = runif(n = n, min = 0, max = 1)),
grna_duplet_rate = 0.00,
mrna_duplet_rate = 0.05,
rm_covariate = "cell_cycle",
m_covariate_coefs = log(c(0.9, 1.25)),
g_covariate_coefs = log(c(0.8, 1.0)),
alpha = 0.95,
n_em_rep = 15,
save_membership_probs_mult = 1000L,
pi = 0.02,
m_offset = log(rpois(n = n, lambda = 10000)),
g_offset = log(rpois(n = n, lambda = 5000)),
pi_guess_range = c(1e-5, 0.03),
m_perturbation_guess_range = log(c(0.1, 1.5)),
g_perturbation_guess_range = log(c(0.5, 10)),
m_intercept_guess_range = log(c(1e-4, 1e-1)),
g_intercept_guess_range = log(c(1e-4, 1e-1)),
m_covariate_coefs_guess_range = log(c(0.25, 2)),
g_covariate_coefs_guess_range = log(c(0.25, 2)),
exponentiate_coefs = FALSE,
ep_tol = 1e-4)
sim_spec_6 <- create_simulatr_specifier_object(param_grid = param_grid,
fixed_params = fixed_params,
methods = c("glmeiv_fast", "thresholding", "unimodal_mixture"))
check <- simulatr::check_simulatr_specifier_object(simulatr_spec = sim_spec_6, B_in = 2, parallel = TRUE)
check$metrics -> sim_res
# load the results and specifier objects
# sim_result_dir <- paste0(.get_config_path("LOCAL_GLMEIV_DATA_DIR"), "public/simulations/results")
# sim_res <- readRDS(paste0(sim_result_dir, "/sim_res_6.rds"))[["metrics"]]
source(paste0(.get_config_path("LOCAL_CODE_DIR"), "glmeiv-manuscript/R_scripts/plotting/simulation_plots/shared_plotting_code.R"))
to_plot <- sim_res |> transform_metric_df() |>
mutate(exp_g_perturbation = exp(g_perturbation),
exp_m_perturbation = exp(m_perturbation))
p <- ggplot(data = to_plot, mapping = aes(x = exp_g_perturbation,
y = mean,
ymin = mean - 2 * se,
ymax = mean + 2 * se,
col = Method)) +
xlab(expression(exp(beta[g]))) + scale_color_manual(values = my_cols) +
facet_grid(metric_fct ~ exp_m_perturbation, scales = "free") +
geom_hline(data = dplyr::filter(to_plot, metric_fct == "Bias"),
mapping = aes(yintercept = 0), colour = "black") +
geom_hline(data = dplyr::filter(to_plot, metric_fct == "MSE"),
mapping = aes(yintercept = 0), colour = "black") +
geom_hline(data = dplyr::filter(to_plot, metric_fct == "Coverage"),
mapping = aes(yintercept = 0.95), colour = "black") +
geom_line() + geom_errorbar(width = 0.05) + geom_point() +
theme_bw() + theme(legend.position = "bottom", panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) + ylab("")
p
res
sim_res
# load the results and specifier objects
# sim_result_dir <- paste0(.get_config_path("LOCAL_GLMEIV_DATA_DIR"), "public/simulations/results")
# sim_res <- readRDS(paste0(sim_result_dir, "/sim_res_6.rds"))[["metrics"]]
source(paste0(.get_config_path("LOCAL_CODE_DIR"), "glmeiv-manuscript/R_scripts/plotting/simulation_plots/shared_plotting_code.R"))
to_plot <- sim_res |> transform_metric_df() |>
mutate(exp_g_perturbation = exp(g_perturbation),
exp_m_perturbation = exp(m_perturbation))
to_plot
to_plot |> dplyr::filter(method == "glmeiv_fast", metric == "bias", exp_m_perturbation == 0.75)
to_plot |> dplyr::filter(method == "glmeiv_fast", metric == "bias", exp_m_perturbation == 1)
to_plot |> dplyr::filter(method == "thresholding", metric == "bias", exp_m_perturbation == 1)
to_plot |> dplyr::filter(method == "thresholding", metric == "ci_width", exp_m_perturbation == 1)
to_plot |> dplyr::filter(method == "glmeiv_fast", metric == "ci_width", exp_m_perturbation == 1)
seq(1, 4, 0.5)
library(magrittr)
library(glmeiv)
library(simulatr)
print("Running create sim_spec objects")
args <- commandArgs(trailingOnly = TRUE)
overwrite <- TRUE # if (is.na(args[1])) TRUE else as.logical(args[1])
save_obj <- function(obj, file_path, overwrite) {
if (!file.exists(file_path)) { # if file does not exist, save
saveRDS(obj, file_path)
} else { # if file does exist, save only if overwrite true
if (overwrite) {
saveRDS(obj, file_path)
}
}
}
sim_dir <- paste0(.get_config_path("LOCAL_GLMEIV_DATA_DIR"), "public/simulations/spec_objects")
library(magrittr)
library(glmeiv)
library(simulatr)
print("Running create sim_spec objects")
args <- commandArgs(trailingOnly = TRUE)
overwrite <- TRUE # if (is.na(args[1])) TRUE else as.logical(args[1])
save_obj <- function(obj, file_path, overwrite) {
if (!file.exists(file_path)) { # if file does not exist, save
saveRDS(obj, file_path)
} else { # if file does exist, save only if overwrite true
if (overwrite) {
saveRDS(obj, file_path)
}
}
}
sim_dir <- paste0(.get_config_path("LOCAL_GLMEIV_DATA_DIR"), "public/simulations/spec_objects")
####################################################################
# Experiment 1 (main text simulation)
# Vary g_pert, fix all other parameters
# Vary distribution: Poisson, NB (known theta), NB (estimated theta)
# One covariate: batch (bernoulli variable)
####################################################################
set.seed(4)
m_perturbation <- log(0.25)
theta <- 20
n <- 50000
g_perturbation_grid <- log(seq(1, 4, 0.5))
param_grid <- expand.grid(g_perturbation = g_perturbation_grid,
fam_str = c("nb_theta_unknown", "nb_theta_known", "poisson"))
param_grid$grid_id <- seq(1, nrow(param_grid))
param_grid$ground_truth <- m_perturbation
fam_obj <- lapply(as.character(param_grid$fam_str), function(str) {
switch(EXPR = str,
"nb_theta_unknown" = MASS::negative.binomial(theta) |> glmeiv::augment_family_object(),
"nb_theta_known" = MASS::negative.binomial(theta) |> glmeiv::augment_family_object(),
"poisson" = poisson() |> glmeiv::augment_family_object())
})
param_grid$m_fam <- fam_obj
param_grid$run_mrna_unknown_theta_precomputation <- as.character(param_grid$fam_str) == "nb_theta_unknown"
fixed_params <- list(
g_fam = poisson() |> augment_family_object(),
run_grna_unknown_theta_precomputation = FALSE,
seed = 4,
n = n,
B = 500,
m_intercept = log(0.01),
m_perturbation = log(0.25),
g_intercept = log(0.005),
covariate_matrix = data.frame(batch = rbinom(n = n, size = 1, prob = 0.5)),
rm_covariate = "",
m_covariate_coefs = log(0.9),
g_covariate_coefs = log(1.1),
alpha = 0.95,
n_em_rep = 15,
save_membership_probs_mult = 1000L,
pi = 0.02,
m_offset = log(rpois(n = n, lambda = 10000)),
g_offset = log(rpois(n = n, lambda = 5000)),
pi_guess_range = c(1e-5, 0.03),
m_perturbation_guess_range = log(c(0.1, 1.5)),
g_perturbation_guess_range = log(c(0.5, 10)),
m_intercept_guess_range = log(c(1e-4, 1e-1)),
g_intercept_guess_range = log(c(1e-4, 1e-1)),
m_covariate_coefs_guess_range = log(c(0.25, 2)),
g_covariate_coefs_guess_range = log(c(0.25, 2)),
exponentiate_coefs = FALSE,
ep_tol = 1e-4)
glmeiv::replogle_method
library(magrittr)
library(glmeiv)
library(simulatr)
print("Running create sim_spec objects")
args <- commandArgs(trailingOnly = TRUE)
overwrite <- TRUE # if (is.na(args[1])) TRUE else as.logical(args[1])
save_obj <- function(obj, file_path, overwrite) {
if (!file.exists(file_path)) { # if file does not exist, save
saveRDS(obj, file_path)
} else { # if file does exist, save only if overwrite true
if (overwrite) {
saveRDS(obj, file_path)
}
}
}
sim_dir <- paste0(.get_config_path("LOCAL_GLMEIV_DATA_DIR"), "public/simulations/spec_objects")
####################################################################
# Experiment 1 (main text simulation)
# Vary g_pert, fix all other parameters
# Vary distribution: Poisson, NB (known theta), NB (estimated theta)
# One covariate: batch (bernoulli variable)
####################################################################
set.seed(4)
m_perturbation <- log(0.25)
theta <- 20
n <- 50000
g_perturbation_grid <- log(seq(1, 4, 0.5))
param_grid <- expand.grid(g_perturbation = g_perturbation_grid,
fam_str = c("nb_theta_unknown", "nb_theta_known", "poisson"))
param_grid$grid_id <- seq(1, nrow(param_grid))
param_grid$ground_truth <- m_perturbation
fam_obj <- lapply(as.character(param_grid$fam_str), function(str) {
switch(EXPR = str,
"nb_theta_unknown" = MASS::negative.binomial(theta) |> glmeiv::augment_family_object(),
"nb_theta_known" = MASS::negative.binomial(theta) |> glmeiv::augment_family_object(),
"poisson" = poisson() |> glmeiv::augment_family_object())
})
param_grid$m_fam <- fam_obj
param_grid$run_mrna_unknown_theta_precomputation <- as.character(param_grid$fam_str) == "nb_theta_unknown"
fixed_params <- list(
g_fam = poisson() |> augment_family_object(),
run_grna_unknown_theta_precomputation = FALSE,
seed = 4,
n = n,
B = 500,
m_intercept = log(0.01),
m_perturbation = log(0.25),
g_intercept = log(0.005),
covariate_matrix = data.frame(batch = rbinom(n = n, size = 1, prob = 0.5)),
rm_covariate = "",
m_covariate_coefs = log(0.9),
g_covariate_coefs = log(1.1),
alpha = 0.95,
n_em_rep = 15,
save_membership_probs_mult = 1000L,
pi = 0.02,
m_offset = log(rpois(n = n, lambda = 10000)),
g_offset = log(rpois(n = n, lambda = 5000)),
pi_guess_range = c(1e-5, 0.03),
m_perturbation_guess_range = log(c(0.1, 1.5)),
g_perturbation_guess_range = log(c(0.5, 10)),
m_intercept_guess_range = log(c(1e-4, 1e-1)),
g_intercept_guess_range = log(c(1e-4, 1e-1)),
m_covariate_coefs_guess_range = log(c(0.25, 2)),
g_covariate_coefs_guess_range = log(c(0.25, 2)),
exponentiate_coefs = FALSE,
ep_tol = 1e-4)
sim_spec_1 <- create_simulatr_specifier_object(param_grid = param_grid,
fixed_params = fixed_params,
methods = "run_replogle_method_simulatr")
print("Running create sim_spec objects")
args <- commandArgs(trailingOnly = TRUE)
overwrite <- TRUE # if (is.na(args[1])) TRUE else as.logical(args[1])
save_obj <- function(obj, file_path, overwrite) {
if (!file.exists(file_path)) { # if file does not exist, save
saveRDS(obj, file_path)
} else { # if file does exist, save only if overwrite true
if (overwrite) {
saveRDS(obj, file_path)
}
}
}
sim_dir <- paste0(.get_config_path("LOCAL_GLMEIV_DATA_DIR"), "public/simulations/spec_objects")
####################################################################
# Experiment 1 (main text simulation)
# Vary g_pert, fix all other parameters
# Vary distribution: Poisson, NB (known theta), NB (estimated theta)
# One covariate: batch (bernoulli variable)
####################################################################
set.seed(4)
m_perturbation <- log(0.25)
theta <- 20
n <- 50000
g_perturbation_grid <- log(seq(1, 4, 0.5))
param_grid <- expand.grid(g_perturbation = g_perturbation_grid,
fam_str = c("nb_theta_unknown", "nb_theta_known", "poisson"))
param_grid$grid_id <- seq(1, nrow(param_grid))
param_grid$ground_truth <- m_perturbation
fam_obj <- lapply(as.character(param_grid$fam_str), function(str) {
switch(EXPR = str,
"nb_theta_unknown" = MASS::negative.binomial(theta) |> glmeiv::augment_family_object(),
"nb_theta_known" = MASS::negative.binomial(theta) |> glmeiv::augment_family_object(),
"poisson" = poisson() |> glmeiv::augment_family_object())
})
param_grid$m_fam <- fam_obj
param_grid$run_mrna_unknown_theta_precomputation <- as.character(param_grid$fam_str) == "nb_theta_unknown"
fixed_params <- list(
g_fam = poisson() |> augment_family_object(),
run_grna_unknown_theta_precomputation = FALSE,
seed = 4,
n = n,
B = 500,
m_intercept = log(0.01),
m_perturbation = log(0.25),
g_intercept = log(0.005),
covariate_matrix = data.frame(batch = rbinom(n = n, size = 1, prob = 0.5)),
rm_covariate = "",
m_covariate_coefs = log(0.9),
g_covariate_coefs = log(1.1),
alpha = 0.95,
n_em_rep = 15,
save_membership_probs_mult = 1000L,
pi = 0.02,
m_offset = log(rpois(n = n, lambda = 10000)),
g_offset = log(rpois(n = n, lambda = 5000)),
pi_guess_range = c(1e-5, 0.03),
m_perturbation_guess_range = log(c(0.1, 1.5)),
g_perturbation_guess_range = log(c(0.5, 10)),
m_intercept_guess_range = log(c(1e-4, 1e-1)),
g_intercept_guess_range = log(c(1e-4, 1e-1)),
m_covariate_coefs_guess_range = log(c(0.25, 2)),
g_covariate_coefs_guess_range = log(c(0.25, 2)),
exponentiate_coefs = FALSE,
ep_tol = 1e-4)
sim_spec_1 <- create_simulatr_specifier_object(param_grid = param_grid,
fixed_params = fixed_params,
methods = "run_replogle_method_simulatr")
sim_spec_1 <- create_simulatr_specifier_object(param_grid = param_grid,
fixed_params = fixed_params,
methods = c("run_replogle_method_simulatr", "thresholding"))
param_grid
fixed_params
