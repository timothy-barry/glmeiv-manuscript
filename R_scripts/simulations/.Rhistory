method_seconds <- vector(mode = "numeric", length = B_check)
for (b in 1:B_check) {
curr_df <- data_list[[b]]
ordered_args_method[[1]] <- curr_df
method_seconds[b] <- system.time(
out <- do.call(method_object@f, ordered_args_method)
)[["elapsed"]]
out$run_id <- b
result_list[[b]] <- out
}
out
result_list
method_seconds
result_df <- do.call(rbind, result_list)
method_seconds_per_rep <- max(method_seconds)
method_seconds_per_rep
method_bytes
method_bytes_per_rep <- method_bytes / B_check
method_bytes_per_rep
B_in != 0
# compute the number of processors needed
B <- if (B_in != 0) B_in else simulatr_spec@fixed_parameters$B
B
gb_per_rep <- (data_bytes_per_rep + method_bytes_per_rep) / 1e9
gb_per_rep
hrs_per_rep <- (data_seconds_per_rep + method_seconds_per_rep) / (60 * 60)
hrs_per_rep
B
n_processors <- max(ceiling(B * hrs_per_rep / (1.0 * max_hours)),
ceiling(B * gb_per_rep / (1.0 * max_gb)))
n_processors
max(ceiling(B * hrs_per_rep / (1.25 * max_hours)),
ceiling(B * gb_per_rep / (1.25 * max_gb)))
# write benchmarking information
benchmarking_info <- data.frame(method = method,
grid_id = row_idx,
gb_per_rep = method_bytes_per_rep / 1e9,
hrs_per_rep = method_seconds_per_rep / (60*60),
n_processors = n_processors)
benchmarking_info
# write processors information
proc_id_info <- data.frame(method = method,
grid_id = row_idx,
proc_id = 1:n_processors,
n_processors = n_processors)
proc_id_info
proc_id_info
"/Users/timbarry/research_offsite/projects/glmeiv/public/simulations/spec_objects/sim_spec_1.rds glmeiv_slow 1 1 2 0" |> .split_args() -> args
simulatr_spec <- readRDS(args[1])
method <- args[2]
row_idx <- as.integer(args[3])
proc_id <- as.integer(args[4])
n_processors <- as.integer(args[5])
B_in <- as.integer(args[6])
# extract data generator and its ordered arguments
data_generator <- simulatr_spec@generate_data_function
# extract the method object and its ordered arguments
method_object <- simulatr_spec@run_method_functions[[method]]
ordered_args_method <- c(list(NA), get_ordered_args(method_object, simulatr_spec, row_idx))
# set the parallel seed
seed <- simulatr_spec@fixed_parameters$seed
.lec.SetPackageSeed(4) |> invisible()
#!/usr/bin/env Rscript
library(simulatr)
library(rlecuyer)
simulatr_spec <- readRDS(args[1])
method <- args[2]
row_idx <- as.integer(args[3])
proc_id <- as.integer(args[4])
n_processors <- as.integer(args[5])
B_in <- as.integer(args[6])
n_processors
proc_id
# extract data generator and its ordered arguments
data_generator <- simulatr_spec@generate_data_function
# extract the method object and its ordered arguments
method_object <- simulatr_spec@run_method_functions[[method]]
ordered_args_method <- c(list(NA), get_ordered_args(method_object, simulatr_spec, row_idx))
# set the parallel seed
seed <- simulatr_spec@fixed_parameters$seed
.lec.SetPackageSeed(4) |> invisible()
snames <- as.character(seq(1, n_processors))
.lec.CreateStream(snames) |> invisible()
.lec.CurrentStream(snames[proc_id]) |> invisible()
# determine the number of datasets to generate
B <- if (B_in != 0) B_in else simulatr_spec@fixed_parameters$B
B
n_datasets_to_generate <- ceiling(B/n_processors)
n_datasets_to_generate
data_generator@loop
library(magrittr)
library(glmeiv)
library(simulatr)
overwrite <- TRUE # if (is.na(args[1])) TRUE else as.logical(args[1])
save_obj <- function(obj, file_path, overwrite) {
if (!file.exists(file_path)) { # if file does not exist, save
saveRDS(obj, file_path)
} else { # if file does exist, save only if overwrite true
if (overwrite) {
saveRDS(obj, file_path)
}
}
}
sim_dir <- paste0(.get_config_path("LOCAL_GLMEIV_DATA_DIR"), "public/simulations/spec_objects")
sim_dir
set.seed(4)
n <- 20000
g_perturbation_grid <- seq(0, 7)
param_grid <- data.frame(g_perturbation = g_perturbation_grid,
grid_id = seq(1, length(g_perturbation_grid)))
m_perturbation <- -4
param_grid$ground_truth <- m_perturbation
fixed_params <- list(
m_fam = gaussian() |> augment_family_object(),
g_fam = gaussian() |> augment_family_object(),
seed = 4,
n = n,
B = 500,
m_intercept = 3,
g_intercept = 1,
m_perturbation = m_perturbation,
covariate_matrix = data.frame(lib_size = rpois(n = n, lambda = 10000),
batch = rbinom(n = n, size = 1, prob = 0.5)),
m_covariate_coefs = c(0.0025, 0.1),
g_covariate_coefs = c(-0.005, 0.2),
n_processors = 20,
alpha = 0.95,
n_em_rep = 25,
save_membership_probs_mult = 1000L,
pi = 0.05,
m_offset = NULL,
g_offset = NULL,
pi_guess_range = c(0.0, 0.1),
m_perturbation_guess_range = c(-6, -2),
g_perturbation_guess_range = c(0, 8),
m_intercept_guess_range = c(3, 3),
g_intercept_guess_range = c(1, 1),
m_covariate_coefs_guess_range = c(0.0025, 0.0025),
g_covariate_coefs_guess_range = c(-0.005, -0.005),
run_unknown_theta_precomputation = FALSE,
exponentiate_coefs = FALSE,
ep_tol = 1e-7)
sim_spec_2 <- create_simulatr_specifier_object(param_grid = param_grid,
fixed_params = fixed_params,
methods = c("glmeiv_fast", "thresholding"))
sim_spec_2 <- create_simulatr_specifier_object(param_grid = param_grid,
fixed_params = fixed_params,
methods = c("glmeiv_fast", "thresholding"))
check <- check_simulatr_specifier_object(simulatr_spec = sim_spec_2, B_in = 2)
save_obj(obj = sim_spec_2, file_path = paste0(sim_dir, "/sim_spec_2.rds"), overwrite = overwrite)
########################################
# Experiment 2
# Gaussian response distribution
# Vary g_perturbation
# Two covariates: batch, library size
########################################
set.seed(4)
n <- 20000
g_perturbation_grid <- seq(0, 7)
param_grid <- data.frame(g_perturbation = g_perturbation_grid,
grid_id = seq(1, length(g_perturbation_grid)))
m_perturbation <- -4
param_grid$ground_truth <- m_perturbation
########################################
# Experiment 2
# Gaussian response distribution
# Vary g_perturbation
# Two covariates: batch, library size
########################################
set.seed(4)
n <- 20000
g_perturbation_grid <- seq(0, 7)
param_grid <- data.frame(g_perturbation = g_perturbation_grid,
grid_id = seq(1, length(g_perturbation_grid)))
m_perturbation <- -4
param_grid$ground_truth <- m_perturbation
fixed_params <- list(
m_fam = gaussian() |> augment_family_object(),
g_fam = gaussian() |> augment_family_object(),
seed = 4,
n = n,
B = 500,
m_intercept = 3,
g_intercept = 1,
m_perturbation = m_perturbation,
covariate_matrix = data.frame(lib_size = rpois(n = n, lambda = 10000),
batch = rbinom(n = n, size = 1, prob = 0.5)),
m_covariate_coefs = c(0.0025, 0.1),
g_covariate_coefs = c(-0.005, 0.2),
alpha = 0.95,
n_em_rep = 25,
save_membership_probs_mult = 1000L,
pi = 0.05,
m_offset = NULL,
g_offset = NULL,
pi_guess_range = c(0.0, 0.1),
m_perturbation_guess_range = c(-6, -2),
g_perturbation_guess_range = c(0, 8),
run_unknown_theta_precomputation = FALSE,
exponentiate_coefs = FALSE,
ep_tol = 1e-7)
fixed_params <- list(
m_fam = gaussian() |> augment_family_object(),
g_fam = gaussian() |> augment_family_object(),
seed = 4,
n = n,
B = 500,
m_intercept = 3,
g_intercept = 1,
m_perturbation = m_perturbation,
covariate_matrix = data.frame(lib_size = rpois(n = n, lambda = 10000),
batch = rbinom(n = n, size = 1, prob = 0.5)),
m_covariate_coefs = c(0.0025, 0.1),
g_covariate_coefs = c(-0.005, 0.2),
alpha = 0.95,
n_em_rep = 25,
save_membership_probs_mult = 1000L,
pi = 0.05,
m_offset = NULL,
g_offset = NULL,
pi_guess_range = c(0.0, 0.1),
m_perturbation_guess_range = c(-6, -2),
g_perturbation_guess_range = c(0, 8),
run_unknown_theta_precomputation = FALSE,
exponentiate_coefs = FALSE,
ep_tol = 1e-7)
sim_spec_2 <- create_simulatr_specifier_object(param_grid = param_grid,
fixed_params = fixed_params,
methods = c("glmeiv_fast", "thresholding"))
check <- check_simulatr_specifier_object(simulatr_spec = sim_spec_2, B_in = 2)
check$metrics
n <- 20000
m_perturbation <- log(0.5)
thetas <- c(1, 3, 5, 10, 20, 50, 100)
m_fams <- lapply(thetas, function(theta) MASS::negative.binomial(theta) |> augment_family_object())
library(magrittr)
library(glmeiv)
library(simulatr)
n <- 20000
m_perturbation <- log(0.5)
thetas <- c(1, 3, 5, 10, 20, 50, 100)
m_fams <- lapply(thetas, function(theta) MASS::negative.binomial(theta) |> augment_family_object())
param_grid <- expand.grid(m_fam = m_fams,
run_unknown_theta_precomputation = c(TRUE, FALSE))
param_grid$ground_truth <- m_perturbation
param_grid$grid_id <- seq(1L, nrow(param_grid))
param_grid
n <- 20000
m_perturbation <- log(0.25)
thetas <- c(1, 3, 5, 10, 20, 50, 100)
m_fams <- lapply(thetas, function(theta) MASS::negative.binomial(theta) |> augment_family_object())
param_grid <- expand.grid(m_fam = m_fams,
run_unknown_theta_precomputation = c(TRUE, FALSE))
param_grid$ground_truth <- m_perturbation
param_grid$grid_id <- seq(1L, nrow(param_grid))
fixed_params <- list(
g_fam = poisson() |> augment_family_object(),
seed = 4,
n = n,
B = 500,
g_perturbation = log(2),
m_intercept = log(0.01),
g_intercept = log(0.005),
m_perturbation = m_perturbation,
covariate_matrix = data.frame(batch = rbinom(n = n, size = 1, prob = 0.5)),
m_covariate_coefs = log(0.9),
g_covariate_coefs = log(1.1),
alpha = 0.95,
n_em_rep = 25,
save_membership_probs_mult = 1000L,
pi = 0.05,
m_offset = log(rpois(n = n, lambda = 10000)),
g_offset = log(rpois(n = n, lambda = 5000)),
pi_guess_range = c(1e-5, 0.1),
m_perturbation_guess_range = log(c(0.1, 1.5)),
g_perturbation_guess_range = log(c(0.5, 10)),
m_intercept_guess_range = log(c(1e-4, 1e-1)),
g_intercept_guess_range = log(c(1e-4, 1e-1)),
m_covariate_coefs_guess_range = log(c(0.25, 2)),
g_covariate_coefs_guess_range = log(c(0.25, 2)),
exponentiate_coefs = FALSE,
ep_tol = 1e-4)
m_perturbation
m_pereturbation
log(0.25)
log(0.1)
n <- 20000
m_perturbation <- log(0.25)
thetas <- c(1, 3, 5, 10, 20, 50, 100)
m_fams <- lapply(thetas, function(theta) MASS::negative.binomial(theta) |> augment_family_object())
param_grid <- expand.grid(m_fam = m_fams,
run_unknown_theta_precomputation = c(TRUE, FALSE))
param_grid$ground_truth <- m_perturbation
param_grid$grid_id <- seq(1L, nrow(param_grid))
n <- 20000
m_perturbation <- log(0.25)
thetas <- c(1, 3, 5, 10, 20, 50, 100)
m_fams <- lapply(thetas, function(theta) MASS::negative.binomial(theta) |> augment_family_object())
param_grid <- expand.grid(m_fam = m_fams,
run_unknown_theta_precomputation = c(TRUE, FALSE))
param_grid$ground_truth <- m_perturbation
param_grid$grid_id <- seq(1L, nrow(param_grid))
fixed_params <- list(
g_fam = poisson() |> augment_family_object(),
seed = 4,
n = n,
B = 500,
g_perturbation = log(2),
m_intercept = log(0.01),
g_intercept = log(0.005),
m_perturbation = m_perturbation,
covariate_matrix = data.frame(batch = rbinom(n = n, size = 1, prob = 0.5)),
m_covariate_coefs = log(0.9),
g_covariate_coefs = log(1.1),
alpha = 0.95,
n_em_rep = 25,
save_membership_probs_mult = 1000L,
pi = 0.05,
m_offset = log(rpois(n = n, lambda = 10000)),
g_offset = log(rpois(n = n, lambda = 5000)),
pi_guess_range = c(1e-5, 0.1),
m_perturbation_guess_range = log(c(0.1, 1.5)),
g_perturbation_guess_range = log(c(0.5, 10)),
exponentiate_coefs = FALSE,
ep_tol = 1e-4)
sim_spec_3 <- create_simulatr_specifier_object(param_grid = param_grid,
fixed_params = fixed_params,
methods = c("glmeiv_fast", "thresholding"))
check <- check_simulatr_specifier_object(simulatr_spec = sim_spec_3, B_in = 2)
check$metrics |> heaD()
check$metrics |> head()
check$metrics |> print(n = 100)
load_all()
#####################################################################################
# Experiment 3: varying the size parameter
# We vary the size parameter over the grid 1, 3, 5, 10, 20, 50, 100
# We hold fixed other parameters. We apply NB regression (known theta)
# and NB regression (estimated theta) using both thresholding method and GLM-EIV fast
#####################################################################################
n <- 20000
#####################################################################################
# Experiment 3: varying the size parameter
# We vary the size parameter over the grid 1, 3, 5, 10, 20, 50, 100
# We hold fixed other parameters. We apply NB regression (known theta)
# and NB regression (estimated theta) using both thresholding method and GLM-EIV fast
#####################################################################################
n <- 20000
m_perturbation <- log(0.25)
thetas <- c(1, 3, 5, 10, 20, 50, 100)
m_fams <- lapply(thetas, function(theta) MASS::negative.binomial(theta) |> augment_family_object())
#####################################################################################
# Experiment 3: varying the size parameter
# We vary the size parameter over the grid 1, 3, 5, 10, 20, 50, 100
# We hold fixed other parameters. We apply NB regression (known theta)
# and NB regression (estimated theta) using both thresholding method and GLM-EIV fast
#####################################################################################
n <- 20000
m_perturbation <- log(0.25)
thetas <- c(1, 3, 5, 10, 20, 50, 100)
m_fams <- lapply(thetas, function(theta) MASS::negative.binomial(theta) |> augment_family_object())
param_grid <- expand.grid(m_fam = m_fams,
run_unknown_theta_precomputation = c(TRUE, FALSE))
param_grid$ground_truth <- m_perturbation
param_grid$grid_id <- seq(1L, nrow(param_grid))
fixed_params <- list(
g_fam = poisson() |> augment_family_object(),
seed = 4,
n = n,
B = 500,
g_perturbation = log(2),
m_intercept = log(0.01),
g_intercept = log(0.005),
m_perturbation = m_perturbation,
covariate_matrix = data.frame(batch = rbinom(n = n, size = 1, prob = 0.5)),
m_covariate_coefs = log(0.9),
g_covariate_coefs = log(1.1),
alpha = 0.95,
n_em_rep = 25,
save_membership_probs_mult = 1000L,
pi = 0.05,
m_offset = log(rpois(n = n, lambda = 10000)),
g_offset = log(rpois(n = n, lambda = 5000)),
pi_guess_range = c(1e-5, 0.1),
m_perturbation_guess_range = log(c(0.1, 1.5)),
g_perturbation_guess_range = log(c(0.5, 10)),
exponentiate_coefs = FALSE,
ep_tol = 1e-4)
n <- 20000
m_perturbation <- log(0.25)
thetas <- c(1, 3, 5, 10, 20, 50, 100)
m_fams <- lapply(thetas, function(theta) MASS::negative.binomial(theta) |> augment_family_object())
param_grid <- expand.grid(m_fam = m_fams,
run_unknown_theta_precomputation = c(TRUE, FALSE))
param_grid$ground_truth <- m_perturbation
param_grid$grid_id <- seq(1L, nrow(param_grid))
fixed_params <- list(
g_fam = poisson() |> augment_family_object(),
seed = 4,
n = n,
B = 500,
g_perturbation = log(3),
m_intercept = log(0.01),
g_intercept = log(0.005),
m_perturbation = m_perturbation,
covariate_matrix = data.frame(batch = rbinom(n = n, size = 1, prob = 0.5)),
m_covariate_coefs = log(0.9),
g_covariate_coefs = log(1.1),
alpha = 0.95,
n_em_rep = 25,
save_membership_probs_mult = 1000L,
pi = 0.05,
m_offset = log(rpois(n = n, lambda = 10000)),
g_offset = log(rpois(n = n, lambda = 5000)),
pi_guess_range = c(1e-5, 0.1),
m_perturbation_guess_range = log(c(0.1, 1.5)),
g_perturbation_guess_range = log(c(0.5, 10)),
exponentiate_coefs = FALSE,
ep_tol = 1e-4)
sim_spec_3 <- create_simulatr_specifier_object(param_grid = param_grid,
fixed_params = fixed_params,
methods = c("glmeiv_fast", "thresholding"))
check <- check_simulatr_specifier_object(simulatr_spec = sim_spec_3, B_in = 2)
check$metrics |> heaD)()
check$metrics |> head()
m_fams
#####################################################################################
# Experiment 3: varying the size parameter
# We vary the size parameter over the grid 1, 3, 5, 10, 20, 50, 100
# We hold fixed other parameters. We apply NB regression (known theta)
# and NB regression (estimated theta) using both thresholding method and GLM-EIV fast
#####################################################################################
n <- 20000
m_perturbation <- log(0.25)
thetas <- c(1, 3, 5, 10, 20, 50, 100)
m_fams <- lapply(thetas, function(theta) MASS::negative.binomial(theta) |> augment_family_object())
param_grid <- expand.grid(m_fam = m_fams,
theta = thetas,
run_unknown_theta_precomputation = c(TRUE, FALSE))
head(param_grid)
thetas
#####################################################################################
# Experiment 3: varying the size parameter
# We vary the size parameter over the grid 1, 3, 5, 10, 20, 50, 100
# We hold fixed other parameters. We apply NB regression (known theta)
# and NB regression (estimated theta) using both thresholding method and GLM-EIV fast
#####################################################################################
n <- 20000
m_perturbation <- log(0.25)
thetas <- c(1, 3, 5, 10, 20, 50, 100)
m_fams <- lapply(thetas, function(theta) MASS::negative.binomial(theta) |> augment_family_object())
param_grid <- expand.grid(m_fam = m_fams,
run_unknown_theta_precomputation = c(TRUE, FALSE)) |>
dplyr::mutate(ground_truth = m_perturbation, theta = thetas)
#####################################################################################
# Experiment 3: varying the size parameter
# We vary the size parameter over the grid 1, 3, 5, 10, 20, 50, 100
# We hold fixed other parameters. We apply NB regression (known theta)
# and NB regression (estimated theta) using both thresholding method and GLM-EIV fast
#####################################################################################
n <- 20000
m_perturbation <- log(0.25)
thetas <- c(1, 3, 5, 10, 20, 50, 100)
m_fams <- lapply(thetas, function(theta) MASS::negative.binomial(theta) |> augment_family_object())
param_grid <- expand.grid(m_fam = m_fams,
run_unknown_theta_precomputation = c(TRUE, FALSE))
param_grid$m_fam |> length()
param_grid$m_fam[[1]]
param_grid$m_fam[[1]]$theta
param_grid$m_fam[[3]]$theta
#####################################################################################
# Experiment 3: varying the size parameter
# We vary the size parameter over the grid 1, 3, 5, 10, 20, 50, 100
# We hold fixed other parameters. We apply NB regression (known theta)
# and NB regression (estimated theta) using both thresholding method and GLM-EIV fast
#####################################################################################
n <- 20000
m_perturbation <- log(0.25)
thetas <- c(1, 3, 5, 10, 20, 50, 100)
m_fams <- lapply(thetas, function(theta) MASS::negative.binomial(theta) |> augment_family_object())
param_grid <- expand.grid(m_fam = m_fams,
run_unknown_theta_precomputation = c(TRUE, FALSE))
head(param_grid)
sapply(param_grid$m_fam, function(fam) fam$theta)
param_grid$theta <- sapply(param_grid$m_fam, function(fam) fam$theta)
param_grid$ground_truth <- m_perturbation
param_grid$grid_id <- seq(1L, nrow(param_grid))
param_grid
head(param_grid)
param_grid
fixed_params <- list(
g_fam = poisson() |> augment_family_object(),
seed = 4,
n = n,
B = 500,
g_perturbation = log(3),
m_intercept = log(0.01),
g_intercept = log(0.005),
m_perturbation = m_perturbation,
covariate_matrix = data.frame(batch = rbinom(n = n, size = 1, prob = 0.5)),
m_covariate_coefs = log(0.9),
g_covariate_coefs = log(1.1),
alpha = 0.95,
n_em_rep = 25,
save_membership_probs_mult = 1000L,
pi = 0.05,
m_offset = log(rpois(n = n, lambda = 10000)),
g_offset = log(rpois(n = n, lambda = 5000)),
pi_guess_range = c(1e-5, 0.1),
m_perturbation_guess_range = log(c(0.1, 1.5)),
g_perturbation_guess_range = log(c(0.5, 10)),
exponentiate_coefs = FALSE,
ep_tol = 1e-4)
