theme_bw() + theme(legend.position = "bottom", panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) + ylab("") +
guides(fill = guide_legend(nrow = 3, byrow = TRUE))
p
p <- ggplot(data = to_plot, mapping = aes(x = theta,
y = mean,
ymin = mean - 2 * se,
ymax = mean + 2 * se,
col = Method)) +
xlab(expression(theta)) + scale_color_manual(values = my_cols) +
scale_x_continuous(trans = "log10") +
facet_grid(metric_fct ~ fam_str, scales = "free") +
geom_hline(data = dplyr::filter(to_plot, metric_fct == "Bias"),
mapping = aes(yintercept = 0), colour = "black") +
geom_hline(data = dplyr::filter(to_plot, metric_fct == "MSE"),
mapping = aes(yintercept = 0), colour = "black") +
geom_hline(data = dplyr::filter(to_plot, metric_fct == "Coverage"),
mapping = aes(yintercept = 0.95), colour = "black") +
geom_line() + geom_errorbar(width = 0.05) + geom_point() +
theme_bw() + theme(legend.position = "bottom", panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) + ylab("") +
guides(fill = guide_legend(nrow = 3, byrow = TRUE))
p <- ggplot(data = to_plot, mapping = aes(x = theta,
y = mean,
ymin = mean - 2 * se,
ymax = mean + 2 * se,
col = Method)) +
xlab(expression(theta)) + scale_color_manual(values = my_cols) +
scale_x_continuous(trans = "log10") +
facet_grid(metric_fct ~ fam_str, scales = "free") +
geom_hline(data = dplyr::filter(to_plot, metric_fct == "Bias"),
mapping = aes(yintercept = 0), colour = "black") +
geom_hline(data = dplyr::filter(to_plot, metric_fct == "MSE"),
mapping = aes(yintercept = 0), colour = "black") +
geom_hline(data = dplyr::filter(to_plot, metric_fct == "Coverage"),
mapping = aes(yintercept = 0.95), colour = "black") +
geom_line() + geom_errorbar(width = 0.05) + geom_point() +
theme_bw() + theme(legend.position = "bottom", panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) + ylab("") +
guides(color = guide_legend(nrow = 3, byrow = TRUE))
p
p <- ggplot(data = to_plot, mapping = aes(x = theta,
y = mean,
ymin = mean - 2 * se,
ymax = mean + 2 * se,
col = Method)) +
xlab(expression(theta)) + scale_color_manual(values = my_cols) +
scale_x_continuous(trans = "log10") +
facet_grid(metric_fct ~ fam_str, scales = "free") +
geom_hline(data = dplyr::filter(to_plot, metric_fct == "Bias"),
mapping = aes(yintercept = 0), colour = "black") +
geom_hline(data = dplyr::filter(to_plot, metric_fct == "MSE"),
mapping = aes(yintercept = 0), colour = "black") +
geom_hline(data = dplyr::filter(to_plot, metric_fct == "Coverage"),
mapping = aes(yintercept = 0.95), colour = "black") +
geom_line() + geom_errorbar(width = 0.05) + geom_point() +
theme_bw() + theme(legend.position = "bottom", panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) + ylab("") +
guides(color = guide_legend(nrow = 3, byrow = TRUE)) +
theme(legend.spacing.x = unit(0.2, 'cm'))
p
p <- ggplot(data = to_plot, mapping = aes(x = theta,
y = mean,
ymin = mean - 2 * se,
ymax = mean + 2 * se,
col = Method)) +
xlab(expression(theta)) + scale_color_manual(values = my_cols) +
scale_x_continuous(trans = "log10") +
facet_grid(metric_fct ~ fam_str, scales = "free") +
geom_hline(data = dplyr::filter(to_plot, metric_fct == "Bias"),
mapping = aes(yintercept = 0), colour = "black") +
geom_hline(data = dplyr::filter(to_plot, metric_fct == "MSE"),
mapping = aes(yintercept = 0), colour = "black") +
geom_hline(data = dplyr::filter(to_plot, metric_fct == "Coverage"),
mapping = aes(yintercept = 0.95), colour = "black") +
geom_line() + geom_errorbar(width = 0.05) + geom_point() +
theme_bw() + theme(legend.position = "bottom", panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) + ylab("") +
guides(color = guide_legend(nrow = 3, byrow = TRUE)) +
theme(legend.spacing.x = unit(0.1, 'cm'))
p
p <- ggplot(data = to_plot, mapping = aes(x = theta,
y = mean,
ymin = mean - 2 * se,
ymax = mean + 2 * se,
col = Method)) +
xlab(expression(theta)) + scale_color_manual(values = my_cols) +
scale_x_continuous(trans = "log10") +
facet_grid(metric_fct ~ fam_str, scales = "free") +
geom_hline(data = dplyr::filter(to_plot, metric_fct == "Bias"),
mapping = aes(yintercept = 0), colour = "black") +
geom_hline(data = dplyr::filter(to_plot, metric_fct == "MSE"),
mapping = aes(yintercept = 0), colour = "black") +
geom_hline(data = dplyr::filter(to_plot, metric_fct == "Coverage"),
mapping = aes(yintercept = 0.95), colour = "black") +
geom_line() + geom_errorbar(width = 0.05) + geom_point() +
theme_bw() + theme(legend.position = "bottom", panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) + ylab("") +
guides(color = guide_legend(nrow = 3, byrow = TRUE)) +
theme(legend.spacing = unit(0.1, 'cm'))
p
p <- ggplot(data = to_plot, mapping = aes(x = theta,
y = mean,
ymin = mean - 2 * se,
ymax = mean + 2 * se,
col = Method)) +
xlab(expression(theta)) + scale_color_manual(values = my_cols) +
scale_x_continuous(trans = "log10") +
facet_grid(metric_fct ~ fam_str, scales = "free") +
geom_hline(data = dplyr::filter(to_plot, metric_fct == "Bias"),
mapping = aes(yintercept = 0), colour = "black") +
geom_hline(data = dplyr::filter(to_plot, metric_fct == "MSE"),
mapping = aes(yintercept = 0), colour = "black") +
geom_hline(data = dplyr::filter(to_plot, metric_fct == "Coverage"),
mapping = aes(yintercept = 0.95), colour = "black") +
geom_line() + geom_errorbar(width = 0.05) + geom_point() +
theme_bw() + theme(legend.position = "bottom", panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) + ylab("") +
guides(color = guide_legend(nrow = 3, byrow = TRUE, keyheight = "1cm"))
p <- ggplot(data = to_plot, mapping = aes(x = theta,
y = mean,
ymin = mean - 2 * se,
ymax = mean + 2 * se,
col = Method)) +
xlab(expression(theta)) + scale_color_manual(values = my_cols) +
scale_x_continuous(trans = "log10") +
facet_grid(metric_fct ~ fam_str, scales = "free") +
geom_hline(data = dplyr::filter(to_plot, metric_fct == "Bias"),
mapping = aes(yintercept = 0), colour = "black") +
geom_hline(data = dplyr::filter(to_plot, metric_fct == "MSE"),
mapping = aes(yintercept = 0), colour = "black") +
geom_hline(data = dplyr::filter(to_plot, metric_fct == "Coverage"),
mapping = aes(yintercept = 0.95), colour = "black") +
geom_line() + geom_errorbar(width = 0.05) + geom_point() +
theme_bw() + theme(legend.position = "bottom", panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) + ylab("") +
ggplot2::guides(color = ggplot2::guide_legend(
nrow = 3, byrow = TRUE,
keywidth = 0.0, keyheight = 0.15,
default.unit = "inch",
override.aes = list(size = 1.25)))
p
p <- ggplot(data = to_plot, mapping = aes(x = theta,
y = mean,
ymin = mean - 2 * se,
ymax = mean + 2 * se,
col = Method)) +
xlab(expression(theta)) + scale_color_manual(values = my_cols) +
scale_x_continuous(trans = "log10") +
facet_grid(metric_fct ~ fam_str, scales = "free") +
geom_hline(data = dplyr::filter(to_plot, metric_fct == "Bias"),
mapping = aes(yintercept = 0), colour = "black") +
geom_hline(data = dplyr::filter(to_plot, metric_fct == "MSE"),
mapping = aes(yintercept = 0), colour = "black") +
geom_hline(data = dplyr::filter(to_plot, metric_fct == "Coverage"),
mapping = aes(yintercept = 0.95), colour = "black") +
geom_line() + geom_errorbar(width = 0.05) + geom_point() +
theme_bw() + theme(legend.position = "bottom", panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) + ylab("") +
ggplot2::guides(color = ggplot2::guide_legend(
nrow = 3, byrow = TRUE,
keywidth = 0.0, keyheight = 0.1,
default.unit = "inch",
override.aes = list(size = 1.25)))
p
p <- ggplot(data = to_plot, mapping = aes(x = theta,
y = mean,
ymin = mean - 2 * se,
ymax = mean + 2 * se,
col = Method)) +
xlab(expression(theta)) + scale_color_manual(values = my_cols) +
scale_x_continuous(trans = "log10") +
facet_grid(metric_fct ~ fam_str, scales = "free") +
geom_hline(data = dplyr::filter(to_plot, metric_fct == "Bias"),
mapping = aes(yintercept = 0), colour = "black") +
geom_hline(data = dplyr::filter(to_plot, metric_fct == "MSE"),
mapping = aes(yintercept = 0), colour = "black") +
geom_hline(data = dplyr::filter(to_plot, metric_fct == "Coverage"),
mapping = aes(yintercept = 0.95), colour = "black") +
geom_line() + geom_errorbar(width = 0.05) + geom_point() +
theme_bw() + theme(legend.position = "bottom", panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) + ylab("") +
ggplot2::guides(color = ggplot2::guide_legend(
nrow = 3, byrow = TRUE,
keywidth = 0.0, keyheight = 0.05,
default.unit = "inch",
override.aes = list(size = 1.25)))
p
p <- ggplot(data = to_plot, mapping = aes(x = theta,
y = mean,
ymin = mean - 2 * se,
ymax = mean + 2 * se,
col = Method)) +
xlab(expression(theta)) + scale_color_manual(values = my_cols) +
scale_x_continuous(trans = "log10") +
facet_grid(metric_fct ~ fam_str, scales = "free") +
geom_hline(data = dplyr::filter(to_plot, metric_fct == "Bias"),
mapping = aes(yintercept = 0), colour = "black") +
geom_hline(data = dplyr::filter(to_plot, metric_fct == "MSE"),
mapping = aes(yintercept = 0), colour = "black") +
geom_hline(data = dplyr::filter(to_plot, metric_fct == "Coverage"),
mapping = aes(yintercept = 0.95), colour = "black") +
geom_line() + geom_errorbar(width = 0.05) + geom_point() +
theme_bw() + theme(legend.position = "bottom", panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) + ylab("") +
ggplot2::guides(color = ggplot2::guide_legend(
nrow = 3, byrow = TRUE,
keywidth = 0.0, keyheight = 0.01,
default.unit = "inch",
override.aes = list(size = 1.25)))
p
p <- ggplot(data = to_plot, mapping = aes(x = theta,
y = mean,
ymin = mean - 2 * se,
ymax = mean + 2 * se,
col = Method)) +
xlab(expression(theta)) + scale_color_manual(values = my_cols) +
scale_x_continuous(trans = "log10") +
facet_grid(metric_fct ~ fam_str, scales = "free") +
geom_hline(data = dplyr::filter(to_plot, metric_fct == "Bias"),
mapping = aes(yintercept = 0), colour = "black") +
geom_hline(data = dplyr::filter(to_plot, metric_fct == "MSE"),
mapping = aes(yintercept = 0), colour = "black") +
geom_hline(data = dplyr::filter(to_plot, metric_fct == "Coverage"),
mapping = aes(yintercept = 0.95), colour = "black") +
geom_line() + geom_errorbar(width = 0.05) + geom_point() +
theme_bw() + theme(legend.position = "bottom", panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) + ylab("") +
ggplot2::guides(color = ggplot2::guide_legend(
nrow = 3, byrow = TRUE,
keywidth = 0.2, keyheight = 0.01,
default.unit = "inch",
override.aes = list(size = 1.25)))
p
p <- ggplot(data = to_plot, mapping = aes(x = theta,
y = mean,
ymin = mean - 2 * se,
ymax = mean + 2 * se,
col = Method)) +
xlab(expression(theta)) + scale_color_manual(values = my_cols) +
scale_x_continuous(trans = "log10") +
facet_grid(metric_fct ~ fam_str, scales = "free") +
geom_hline(data = dplyr::filter(to_plot, metric_fct == "Bias"),
mapping = aes(yintercept = 0), colour = "black") +
geom_hline(data = dplyr::filter(to_plot, metric_fct == "MSE"),
mapping = aes(yintercept = 0), colour = "black") +
geom_hline(data = dplyr::filter(to_plot, metric_fct == "Coverage"),
mapping = aes(yintercept = 0.95), colour = "black") +
geom_line() + geom_errorbar(width = 0.05) + geom_point() +
theme_bw() + theme(legend.position = "bottom", panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) + ylab("") +
ggplot2::guides(color = ggplot2::guide_legend(
nrow = 3, byrow = TRUE,
keyheight = 0.01,
default.unit = "inch",
override.aes = list(size = 1.25)))
p
p <- ggplot(data = to_plot, mapping = aes(x = theta,
y = mean,
ymin = mean - 2 * se,
ymax = mean + 2 * se,
col = Method)) +
xlab(expression(theta)) + scale_color_manual(values = my_cols) +
scale_x_continuous(trans = "log10") +
facet_grid(metric_fct ~ fam_str, scales = "free") +
geom_hline(data = dplyr::filter(to_plot, metric_fct == "Bias"),
mapping = aes(yintercept = 0), colour = "black") +
geom_hline(data = dplyr::filter(to_plot, metric_fct == "MSE"),
mapping = aes(yintercept = 0), colour = "black") +
geom_hline(data = dplyr::filter(to_plot, metric_fct == "Coverage"),
mapping = aes(yintercept = 0.95), colour = "black") +
geom_line() + geom_errorbar(width = 0.05) + geom_point() +
theme_bw() + theme(legend.position = "bottom", panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) + ylab("") +
ggplot2::guides(color = ggplot2::guide_legend(
nrow = 3, byrow = TRUE,
keyheight = 0.01,
default.unit = "inch",
override.aes = list(size = 1.25)))
p
library(dplyr)
library(ggplot2)
library(simulatr)
my_cols <- c("firebrick3", "dodgerblue3", "orchid4")
# load the results and specifier objects
sim_result_dir <- paste0(.get_config_path("LOCAL_GLMEIV_DATA_DIR"), "public/simulations/results")
sim_res_4 <- readRDS(paste0(sim_result_dir, "/sim_res_4.rds"))[["metrics"]]
to_plot <- sim_res_4 |> transform_metric_df() |> mutate(exp_m_perturbation = exp(m_perturbation))
library(dplyr)
library(ggplot2)
# load the results and specifier objects
sim_result_dir <- paste0(.get_config_path("LOCAL_GLMEIV_DATA_DIR"), "public/simulations/results")
sim_res_4 <- readRDS(paste0(sim_result_dir, "/sim_res_4.rds"))[["metrics"]]
source(paste0(.get_config_path("LOCAL_CODE_DIR"), "glmeiv-manuscript/R_scripts/plotting/simulation_plots/shared_plotting_code.R"))
to_plot <- sim_res_4 |> transform_metric_df() |> mutate(exp_m_perturbation = exp(m_perturbation))
p <- ggplot(data = to_plot, mapping = aes(x = exp_m_perturbation,
y = mean,
ymin = mean - 2 * se,
ymax = mean + 2 * se,
col = Method)) +
xlab(expression(exp(beta[m]))) + scale_color_manual(values = my_cols) +
facet_grid(metric_fct ~ fam_str, scales = "free") +
geom_hline(data = dplyr::filter(to_plot, metric_fct == "Bias"),
mapping = aes(yintercept = 0), colour = "black") +
geom_hline(data = dplyr::filter(to_plot, metric_fct == "MSE"),
mapping = aes(yintercept = 0), colour = "black") +
geom_hline(data = dplyr::filter(to_plot, metric_fct == "Coverage"),
mapping = aes(yintercept = 0.95), colour = "black") +
geom_line() + geom_errorbar(width = 0.05) + geom_point() +
theme_bw() + theme(legend.position = "bottom", panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) + ylab("")
p
library(magrittr)
library(glmeiv)
library(simulatr)
print("Running create sim_spec objects")
args <- commandArgs(trailingOnly = TRUE)
overwrite <- TRUE # if (is.na(args[1])) TRUE else as.logical(args[1])
save_obj <- function(obj, file_path, overwrite) {
if (!file.exists(file_path)) { # if file does not exist, save
saveRDS(obj, file_path)
} else { # if file does exist, save only if overwrite true
if (overwrite) {
saveRDS(obj, file_path)
}
}
}
sim_dir <- paste0(.get_config_path("LOCAL_GLMEIV_DATA_DIR"), "public/simulations/spec_objects")
###########################################################################################
# Experiment 5: misspecified gRNA model
# We vary g_pert, keeping all other parameters fixed; the gRNA distribution is misspecified
###########################################################################################
set.seed(4)
m_perturbation <- log(0.25)
theta <- 20
n <- 50000
g_perturbation_grid <- log(seq(1, 4, 0.5))
param_grid <- expand.grid(g_perturbation = g_perturbation_grid,
fam_str = c("nb_theta_unknown", "nb_theta_known", "poisson"))
param_grid$grid_id <- seq(1, nrow(param_grid))
param_grid$ground_truth <- m_perturbation
fam_obj <- lapply(as.character(param_grid$fam_str), function(str) {
switch(EXPR = str,
"nb_theta_unknown" = MASS::negative.binomial(theta) |> glmeiv::augment_family_object(),
"nb_theta_known" = MASS::negative.binomial(theta) |> glmeiv::augment_family_object(),
"poisson" = poisson() |> glmeiv::augment_family_object())
})
param_grid$m_fam <- fam_obj
param_grid$run_mrna_unknown_theta_precomputation <- as.character(param_grid$fam_str) == "nb_theta_unknown"
set.seed(4)
m_perturbation <- log(0.25)
theta <- 20
n <- 50000
g_perturbation_grid <- log(seq(1, 4, 0.5))
param_grid <- expand.grid(g_perturbation = g_perturbation_grid,
fam_str = c("nb_theta_unknown", "nb_theta_known", "poisson"))
head(param_grid)
set.seed(4)
m_perturbation <- log(0.25)
theta <- 20
n <- 50000
g_perturbation_grid <- log(seq(1, 4, 0.5))
param_grid <- expand.grid(g_perturbation = g_perturbation_grid,
fam_str = c("nb_theta_unknown", "nb_theta_known", "poisson"))
head(param_grid)
param_grid$grid_id <- seq(1, nrow(param_grid))
param_grid$ground_truth <- m_perturbation
fam_obj <- lapply(as.character(param_grid$fam_str), function(str) {
switch(EXPR = str,
"nb_theta_unknown" = MASS::negative.binomial(theta) |> glmeiv::augment_family_object(),
"nb_theta_known" = MASS::negative.binomial(theta) |> glmeiv::augment_family_object(),
"poisson" = poisson() |> glmeiv::augment_family_object())
})
param_grid$m_fam <- fam_obj
param_grid$run_mrna_unknown_theta_precomputation <- as.character(param_grid$fam_str) == "nb_theta_unknown"
fixed_params <- list(
g_fam = poisson() |> augment_family_object(),
run_grna_unknown_theta_precomputation = FALSE,
seed = 4,
n = n,
B = 500,
m_intercept = log(0.01),
m_perturbation = log(0.25),
g_intercept = log(0.005),
covariate_matrix = data.frame(batch = rbinom(n = n, size = 1, prob = 0.5)),
m_covariate_coefs = log(0.9),
g_covariate_coefs = log(1.1),
alpha = 0.95,
n_em_rep = 15,
save_membership_probs_mult = 1000L,
pi = 0.02,
m_offset = log(rpois(n = n, lambda = 10000)),
g_offset = log(rpois(n = n, lambda = 5000)),
pi_guess_range = c(1e-5, 0.03),
m_perturbation_guess_range = log(c(0.1, 1.5)),
g_perturbation_guess_range = log(c(0.5, 10)),
m_intercept_guess_range = log(c(1e-4, 1e-1)),
g_intercept_guess_range = log(c(1e-4, 1e-1)),
m_covariate_coefs_guess_range = log(c(0.25, 2)),
g_covariate_coefs_guess_range = log(c(0.25, 2)),
exponentiate_coefs = FALSE,
ep_tol = 1e-4)
missing_covariate
log(c(1.1, 1.5))
log(c(0.9, 1))
df <- data.frame(a = c(1, 2), b = c(2, 6))
colnames(df) <- c("hi", "me")
df
NULL %in% colnames(df)
"NULL" %in% colnames(df)
"" %in% colnames(df)
set.seed(4)
m_perturbation <- log(0.5)
theta <- 20
n <- 50000
g_perturbation_grid <- log(seq(1, 4, 0.5))
param_grid <- expand.grid(g_perturbation = g_perturbation_grid,
fam_str = c("nb_theta_unknown", "nb_theta_known", "poisson"))
param_grid$grid_id <- seq(1, nrow(param_grid))
param_grid$ground_truth <- m_perturbation
fam_obj <- lapply(as.character(param_grid$fam_str), function(str) {
switch(EXPR = str,
"nb_theta_unknown" = MASS::negative.binomial(theta) |> glmeiv::augment_family_object(),
"nb_theta_known" = MASS::negative.binomial(theta) |> glmeiv::augment_family_object(),
"poisson" = poisson() |> glmeiv::augment_family_object())
})
param_grid$m_fam <- fam_obj
param_grid$run_mrna_unknown_theta_precomputation <- as.character(param_grid$fam_str) == "nb_theta_unknown"
fixed_params <- list(
g_fam = poisson() |> augment_family_object(),
run_grna_unknown_theta_precomputation = FALSE,
seed = 4,
n = n,
B = 500,
m_intercept = log(0.01),
m_perturbation = m_perturbation,
g_intercept = log(0.005),
covariate_matrix = data.frame(batch = rbinom(n = n, size = 1, prob = 0.5),
missing_covariate = runif(n = n, min = 0, max = 1)),
rm_covariate = "missing_covariate",
m_covariate_coefs = log(c(0.9, 1)),
g_covariate_coefs = log(c(1.1, 1.5)),
alpha = 0.95,
n_em_rep = 15,
save_membership_probs_mult = 1000L,
pi = 0.02,
m_offset = log(rpois(n = n, lambda = 10000)),
g_offset = log(rpois(n = n, lambda = 5000)),
pi_guess_range = c(1e-5, 0.03),
m_perturbation_guess_range = log(c(0.1, 1.5)),
g_perturbation_guess_range = log(c(0.5, 10)),
m_intercept_guess_range = log(c(1e-4, 1e-1)),
g_intercept_guess_range = log(c(1e-4, 1e-1)),
m_covariate_coefs_guess_range = log(c(0.25, 2)),
g_covariate_coefs_guess_range = log(c(0.25, 2)),
exponentiate_coefs = FALSE,
ep_tol = 1e-4)
sim_spec_1 <- create_simulatr_specifier_object(param_grid = param_grid,
fixed_params = fixed_params,
methods = c("glmeiv_fast", "thresholding", "unimodal_mixture"))
set.seed(4)
m_perturbation <- log(0.5)
theta <- 20
n <- 50000
g_perturbation_grid <- log(seq(1, 4, 0.5))
param_grid <- expand.grid(g_perturbation = g_perturbation_grid,
fam_str = c("nb_theta_unknown", "nb_theta_known", "poisson"))
param_grid$grid_id <- seq(1, nrow(param_grid))
param_grid$ground_truth <- m_perturbation
fam_obj <- lapply(as.character(param_grid$fam_str), function(str) {
switch(EXPR = str,
"nb_theta_unknown" = MASS::negative.binomial(theta) |> glmeiv::augment_family_object(),
"nb_theta_known" = MASS::negative.binomial(theta) |> glmeiv::augment_family_object(),
"poisson" = poisson() |> glmeiv::augment_family_object())
})
param_grid$m_fam <- fam_obj
param_grid$run_mrna_unknown_theta_precomputation <- as.character(param_grid$fam_str) == "nb_theta_unknown"
fixed_params <- list(
g_fam = poisson() |> augment_family_object(),
run_grna_unknown_theta_precomputation = FALSE,
seed = 4,
n = n,
B = 500,
m_intercept = log(0.01),
m_perturbation = m_perturbation,
g_intercept = log(0.005),
covariate_matrix = data.frame(batch = rbinom(n = n, size = 1, prob = 0.5),
missing_covariate = runif(n = n, min = 0, max = 1)),
rm_covariate = "missing_covariate",
m_covariate_coefs = log(c(0.9, 1)),
g_covariate_coefs = log(c(1.1, 1.5)),
alpha = 0.95,
n_em_rep = 15,
save_membership_probs_mult = 1000L,
pi = 0.02,
m_offset = log(rpois(n = n, lambda = 10000)),
g_offset = log(rpois(n = n, lambda = 5000)),
pi_guess_range = c(1e-5, 0.03),
m_perturbation_guess_range = log(c(0.1, 1.5)),
g_perturbation_guess_range = log(c(0.5, 10)),
m_intercept_guess_range = log(c(1e-4, 1e-1)),
g_intercept_guess_range = log(c(1e-4, 1e-1)),
m_covariate_coefs_guess_range = log(c(0.25, 2)),
g_covariate_coefs_guess_range = log(c(0.25, 2)),
exponentiate_coefs = FALSE,
ep_tol = 1e-4)
rm_covariate
head(dat)
m_fam
g_fam
?run_glmeiv_at_scale_simulatr
document()
