alpha = 0.95,
n_em_rep = 15,
save_membership_probs_mult = 1000L,
pi = 0.02,
m_offset = log(rpois(n = n, lambda = 10000)),
g_offset = log(rpois(n = n, lambda = 5000)),
pi_guess_range = c(1e-5, 0.03),
m_perturbation_guess_range = log(c(0.1, 1.5)),
g_perturbation_guess_range = log(c(0.5, 10)),
m_intercept_guess_range = log(c(1e-4, 1e-1)),
g_intercept_guess_range = log(c(1e-4, 1e-1)),
m_covariate_coefs_guess_range = log(c(0.25, 2)),
g_covariate_coefs_guess_range = log(c(0.25, 2)),
exponentiate_coefs = FALSE,
ep_tol = 1e-4)
sim_spec_5 <- create_simulatr_specifier_object(param_grid = param_grid,
fixed_params = fixed_params,
methods = c("glmeiv_fast", "thresholding", "unimodal_mixture"))
check <- simulatr::check_simulatr_specifier_object(simulatr_spec = sim_spec_5, B_in = 2, parallel = TRUE)
check$metrics |> dplyr::filter(metric == "mse", method == "glmeiv_fast")
check$metrics |> dplyr::filter(metric == "mse", method == "thresholding")
check$metrics |> dplyr::filter(metric == "mse", method == "unimodal_mixture")
param_grid <- param_grid |> dplyr::filter(fam_str == "poisson")
fixed_params <- list(
g_fam = poisson() |> augment_family_object(),
run_grna_unknown_theta_precomputation = FALSE,
seed = 4,
n = n,
B = 500,
m_intercept = log(0.01),
m_perturbation = m_perturbation,
g_intercept = log(0.005),
covariate_matrix = data.frame(batch = rbinom(n = n, size = 1, prob = 0.5),
cell_cycle = runif(n = n, min = 0, max = 1)),
grna_duplet_rate = 0.01,
mrna_duplet_rate = 0.0,
rm_covariate = "cell_cycle",
m_covariate_coefs = log(c(0.9, 1)),
g_covariate_coefs = log(c(0.8, 1.25)),
alpha = 0.95,
n_em_rep = 15,
save_membership_probs_mult = 1000L,
pi = 0.02,
m_offset = log(rpois(n = n, lambda = 10000)),
g_offset = log(rpois(n = n, lambda = 5000)),
pi_guess_range = c(1e-5, 0.03),
m_perturbation_guess_range = log(c(0.1, 1.5)),
g_perturbation_guess_range = log(c(0.5, 10)),
m_intercept_guess_range = log(c(1e-4, 1e-1)),
g_intercept_guess_range = log(c(1e-4, 1e-1)),
m_covariate_coefs_guess_range = log(c(0.25, 2)),
g_covariate_coefs_guess_range = log(c(0.25, 2)),
exponentiate_coefs = FALSE,
ep_tol = 1e-4)
sim_spec_5 <- create_simulatr_specifier_object(param_grid = param_grid,
fixed_params = fixed_params,
methods = c("glmeiv_fast", "thresholding", "unimodal_mixture"))
check <- simulatr::check_simulatr_specifier_object(simulatr_spec = sim_spec_5, B_in = 2, parallel = TRUE)
check$metrics |> dplyr::filter(metric == "mse", method == "unimodal_mixture")
check$metrics |> dplyr::filter(metric == "mse", method == "thresholding")
check$metrics |> dplyr::filter(metric == "mse", method == "glmeiv_fast")
fixed_params <- list(
g_fam = poisson() |> augment_family_object(),
run_grna_unknown_theta_precomputation = FALSE,
seed = 4,
n = n,
B = 500,
m_intercept = log(0.01),
m_perturbation = m_perturbation,
g_intercept = log(0.005),
covariate_matrix = data.frame(batch = rbinom(n = n, size = 1, prob = 0.5),
cell_cycle = runif(n = n, min = 0, max = 1)),
grna_duplet_rate = 0.00,
mrna_duplet_rate = 0.0,
rm_covariate = "cell_cycle",
m_covariate_coefs = log(c(0.9, 1)),
g_covariate_coefs = log(c(0.8, 1.25)),
alpha = 0.95,
n_em_rep = 15,
save_membership_probs_mult = 1000L,
pi = 0.02,
m_offset = log(rpois(n = n, lambda = 10000)),
g_offset = log(rpois(n = n, lambda = 5000)),
pi_guess_range = c(1e-5, 0.03),
m_perturbation_guess_range = log(c(0.1, 1.5)),
g_perturbation_guess_range = log(c(0.5, 10)),
m_intercept_guess_range = log(c(1e-4, 1e-1)),
g_intercept_guess_range = log(c(1e-4, 1e-1)),
m_covariate_coefs_guess_range = log(c(0.25, 2)),
g_covariate_coefs_guess_range = log(c(0.25, 2)),
exponentiate_coefs = FALSE,
ep_tol = 1e-4)
sim_spec_5 <- create_simulatr_specifier_object(param_grid = param_grid,
fixed_params = fixed_params,
methods = c("glmeiv_fast", "thresholding", "unimodal_mixture"))
check <- simulatr::check_simulatr_specifier_object(simulatr_spec = sim_spec_5, B_in = 2, parallel = TRUE)
check$metrics |> dplyr::filter(metric == "mse", method == "glmeiv_fast")
check$metrics |> dplyr::filter(metric == "mse", method == "unimodal_mixture")
m_perturbation <- log(0.5)
theta <- 20
n <- 50000
g_perturbation_grid <- log(seq(1, 4, 0.5))
library(magrittr)
library(glmeiv)
library(simulatr)
print("Running create sim_spec objects")
args <- commandArgs(trailingOnly = TRUE)
overwrite <- TRUE # if (is.na(args[1])) TRUE else as.logical(args[1])
save_obj <- function(obj, file_path, overwrite) {
if (!file.exists(file_path)) { # if file does not exist, save
saveRDS(obj, file_path)
} else { # if file does exist, save only if overwrite true
if (overwrite) {
saveRDS(obj, file_path)
}
}
}
sim_dir <- paste0(.get_config_path("LOCAL_GLMEIV_DATA_DIR"), "public/simulations/spec_objects")
#######################################
# Experiment 6: misspecified mRNA model
#######################################
set.seed(4)
m_perturbation <- log(0.5)
theta <- 20
n <- 50000
g_perturbation_grid <- log(seq(1, 4, 0.5))
g_perturbation_grid
g_perturbation_grid
#######################################
# Experiment 6: misspecified mRNA model
#######################################
set.seed(4)
m_perturbation <- log(0.25)
theta <- 20
n <- 50000
g_perturbation_grid <- log(seq(1, 4, 0.5))
param_grid <- expand.grid(g_perturbation = g_perturbation_grid,
fam_str = c("nb_theta_unknown", "nb_theta_known", "poisson"))
param_grid$grid_id <- seq(1, nrow(param_grid))
param_grid$ground_truth <- m_perturbation
fam_obj <- lapply(as.character(param_grid$fam_str), function(str) {
switch(EXPR = str,
"nb_theta_unknown" = MASS::negative.binomial(theta) |> glmeiv::augment_family_object(),
"nb_theta_known" = MASS::negative.binomial(theta) |> glmeiv::augment_family_object(),
"poisson" = poisson() |> glmeiv::augment_family_object())
})
param_grid$m_fam <- fam_obj
param_grid$run_mrna_unknown_theta_precomputation <- as.character(param_grid$fam_str) == "nb_theta_unknown"
head(param_grid)
param_grid <- param_grid |> dplyr::filter(fam_str == "poisson")
param_grid
set.seed(4)
m_perturbation <- log(0.25)
theta <- 20
n <- 50000
g_perturbation_grid <- log(seq(1, 4, 0.5))
param_grid <- expand.grid(g_perturbation = g_perturbation_grid,
fam_str = c("nb_theta_unknown", "nb_theta_known", "poisson"))
param_grid$grid_id <- seq(1, nrow(param_grid))
param_grid$ground_truth <- m_perturbation
fam_obj <- lapply(as.character(param_grid$fam_str), function(str) {
switch(EXPR = str,
"nb_theta_unknown" = MASS::negative.binomial(theta) |> glmeiv::augment_family_object(),
"nb_theta_known" = MASS::negative.binomial(theta) |> glmeiv::augment_family_object(),
"poisson" = poisson() |> glmeiv::augment_family_object())
})
param_grid$m_fam <- fam_obj
param_grid$run_mrna_unknown_theta_precomputation <- as.character(param_grid$fam_str) == "nb_theta_unknown"
head(param_grid)
param_grid <- param_grid |> dplyr::filter(fam_str == "poisson")
fixed_params <- list(
g_fam = poisson() |> augment_family_object(),
run_grna_unknown_theta_precomputation = FALSE,
seed = 4,
n = n,
B = 500,
m_intercept = log(0.01),
m_perturbation = m_perturbation,
g_intercept = log(0.005),
covariate_matrix = data.frame(batch = rbinom(n = n, size = 1, prob = 0.5),
cell_cycle = runif(n = n, min = 0, max = 1)),
grna_duplet_rate = 0.0,
mrna_duplet_rate = 0.01,
rm_covariate = "cell_cycle",
m_covariate_coefs = log(c(0.9, 1.2)),
g_covariate_coefs = log(c(0.8, 1.0)),
alpha = 0.95,
n_em_rep = 15,
save_membership_probs_mult = 1000L,
pi = 0.02,
m_offset = log(rpois(n = n, lambda = 10000)),
g_offset = log(rpois(n = n, lambda = 5000)),
pi_guess_range = c(1e-5, 0.03),
m_perturbation_guess_range = log(c(0.1, 1.5)),
g_perturbation_guess_range = log(c(0.5, 10)),
m_intercept_guess_range = log(c(1e-4, 1e-1)),
g_intercept_guess_range = log(c(1e-4, 1e-1)),
m_covariate_coefs_guess_range = log(c(0.25, 2)),
g_covariate_coefs_guess_range = log(c(0.25, 2)),
exponentiate_coefs = FALSE,
ep_tol = 1e-4)
sim_spec_6 <- create_simulatr_specifier_object(param_grid = param_grid,
fixed_params = fixed_params,
methods = c("glmeiv_fast", "thresholding", "unimodal_mixture"))
check <- simulatr::check_simulatr_specifier_object(simulatr_spec = sim_spec_5, B_in = 2, parallel = TRUE)
check <- simulatr::check_simulatr_specifier_object(simulatr_spec = sim_spec_6, B_in = 2, parallel = TRUE)
check$metrics
check$metrics |> dplyr::filter(method == "glmeiv_fast")
check$metrics |> dplyr::filter(method == "glmeiv_fast", metric == "mse")
check$metrics |> dplyr::filter(method == "unimodal_mixture", metric == "mse")
check$metrics |> dplyr::filter(method == "thresholding", metric == "mse")
n <- 50000
m_perturbations <- log(seq(0.2, 1, length.out = 9))
param_grid <- expand.grid(m_perturbation = m_perturbations,
fam_str = c("nb_theta_unknown", "nb_theta_known", "poisson"))
param_grid$grid_id <- seq(1, nrow(param_grid))
param_grid$ground_truth <- m_perturbations
fam_obj <- lapply(as.character(param_grid$fam_str), function(str) {
switch(EXPR = str,
"nb_theta_unknown" = MASS::negative.binomial(20) |> glmeiv::augment_family_object(),
"nb_theta_known" = MASS::negative.binomial(20) |> glmeiv::augment_family_object(),
"poisson" = poisson() |> glmeiv::augment_family_object())
})
param_grid$run_mrna_unknown_theta_precomputation <- as.character(param_grid$fam_str) == "nb_theta_unknown"
param_grid$m_fam <- fam_obj
#######################################
# Experiment 6: misspecified mRNA model
#######################################
g_perturbation <- log(2)
n <- 50000
m_perturbations <- log(seq(0.2, 1, length.out = 9))
m_perturbations
param_grid <- expand.grid(m_perturbation = m_perturbations,
fam_str = c("nb_theta_unknown", "nb_theta_known", "poisson"))
param_grid$grid_id <- seq(1, nrow(param_grid))
param_grid$ground_truth <- m_perturbations
fam_obj <- lapply(as.character(param_grid$fam_str), function(str) {
switch(EXPR = str,
"nb_theta_unknown" = MASS::negative.binomial(20) |> glmeiv::augment_family_object(),
"nb_theta_known" = MASS::negative.binomial(20) |> glmeiv::augment_family_object(),
"poisson" = poisson() |> glmeiv::augment_family_object())
})
param_grid$run_mrna_unknown_theta_precomputation <- as.character(param_grid$fam_str) == "nb_theta_unknown"
param_grid$m_fam <- fam_obj
head(param_grid)
nrow(param_grid)
g_perturbation <- log(2)
n <- 50000
m_perturbations <- log(seq(0.2, 1, length.out = 9))
param_grid <- expand.grid(m_perturbation = m_perturbations,
fam_str = c("nb_theta_unknown", "nb_theta_known", "poisson"))
param_grid$grid_id <- seq(1, nrow(param_grid))
param_grid$ground_truth <- m_perturbations
fam_obj <- lapply(as.character(param_grid$fam_str), function(str) {
switch(EXPR = str,
"nb_theta_unknown" = MASS::negative.binomial(20) |> glmeiv::augment_family_object(),
"nb_theta_known" = MASS::negative.binomial(20) |> glmeiv::augment_family_object(),
"poisson" = poisson() |> glmeiv::augment_family_object())
})
param_grid$run_mrna_unknown_theta_precomputation <- as.character(param_grid$fam_str) == "nb_theta_unknown"
param_grid$m_fam <- fam_obj
param_grid <- param_grid |> dplyr::filter(fam_str == "poisson")
g_perturbation
m_perturbations
param_grid
head(param_grid)
g_perturbation <- log(2)
n <- 50000
m_perturbations <- log(seq(0.2, 1, length.out = 9))
param_grid <- expand.grid(m_perturbation = m_perturbations,
fam_str = c("nb_theta_unknown", "nb_theta_known", "poisson"))
param_grid$grid_id <- seq(1, nrow(param_grid))
param_grid$ground_truth <- m_perturbations
fam_obj <- lapply(as.character(param_grid$fam_str), function(str) {
switch(EXPR = str,
"nb_theta_unknown" = MASS::negative.binomial(20) |> glmeiv::augment_family_object(),
"nb_theta_known" = MASS::negative.binomial(20) |> glmeiv::augment_family_object(),
"poisson" = poisson() |> glmeiv::augment_family_object())
})
param_grid$run_mrna_unknown_theta_precomputation <- as.character(param_grid$fam_str) == "nb_theta_unknown"
param_grid$m_fam <- fam_obj
param_grid <- param_grid |> dplyr::filter(fam_str == "poisson")
fixed_params <- list(
g_fam = poisson() |> augment_family_object(),
run_grna_unknown_theta_precomputation = FALSE,
seed = 4,
n = n,
B = 500,
m_intercept = log(0.01),
g_perturbation = g_perturbation,
g_intercept = log(0.005),
covariate_matrix = data.frame(batch = rbinom(n = n, size = 1, prob = 0.5),
cell_cycle = runif(n = n, min = 0, max = 1)),
grna_duplet_rate = 0.0,
mrna_duplet_rate = 0.01,
rm_covariate = "cell_cycle",
m_covariate_coefs = log(c(0.9, 1.5)),
g_covariate_coefs = log(c(0.8, 1.0)),
alpha = 0.95,
n_em_rep = 15,
save_membership_probs_mult = 1000L,
pi = 0.02,
m_offset = log(rpois(n = n, lambda = 10000)),
g_offset = log(rpois(n = n, lambda = 5000)),
pi_guess_range = c(1e-5, 0.03),
m_perturbation_guess_range = log(c(0.1, 1.5)),
g_perturbation_guess_range = log(c(0.5, 10)),
m_intercept_guess_range = log(c(1e-4, 1e-1)),
g_intercept_guess_range = log(c(1e-4, 1e-1)),
m_covariate_coefs_guess_range = log(c(0.25, 2)),
g_covariate_coefs_guess_range = log(c(0.25, 2)),
exponentiate_coefs = FALSE,
ep_tol = 1e-4)
sim_spec_6 <- create_simulatr_specifier_object(param_grid = param_grid,
fixed_params = fixed_params,
methods = c("glmeiv_fast", "thresholding", "unimodal_mixture"))
check <- simulatr::check_simulatr_specifier_object(simulatr_spec = sim_spec_6, B_in = 2, parallel = TRUE)
check
check$metrics
check$metrics |> filter(metric == "mse")
check$metrics |> dplyer::(metric == "mse")
check$metrics |> dplyr::filter(metric == "mse")
check$metrics |> dplyr::filter(metric == "mse", method == "glmeiv_fast")
check$metrics |> dplyr::filter(metric == "mse", method == "thresholding")
check$metrics |> dplyr::filter(metric == "mse", method == "unimodal_mixture")
library(dplyr)
library(ggplot2)
library(simulatr)
# load the results and specifier objects
sim_result_dir <- paste0(.get_config_path("LOCAL_GLMEIV_DATA_DIR"), "public/simulations/results")
sim_res_1 <- readRDS(paste0(sim_result_dir, "/sim_res_1.rds"))[["metrics"]]
source(paste0(.get_config_path("LOCAL_CODE_DIR"), "glmeiv-manuscript/R_scripts/plotting/simulation_plots/shared_plotting_code.R"))
to_plot <- sim_res_1|> transform_metric_df() |>
mutate(exp_g_perturbation = exp(g_perturbation))
p <- ggplot(data = to_plot, mapping = aes(x = exp_g_perturbation,
y = mean,
ymin = mean - 2 * se,
ymax = mean + 2 * se,
col = Method)) +
xlab(expression(exp(beta[g]))) + scale_color_manual(values = my_cols) +
facet_grid(metric_fct ~ fam_str, scales = "free") +
geom_hline(data = dplyr::filter(to_plot, metric_fct == "Bias"),
mapping = aes(yintercept = 0), colour = "black") +
geom_hline(data = dplyr::filter(to_plot, metric_fct == "MSE"),
mapping = aes(yintercept = 0), colour = "black") +
geom_hline(data = dplyr::filter(to_plot, metric_fct == "Coverage"),
mapping = aes(yintercept = 0.95), colour = "black") +
geom_line() + geom_errorbar(width = 0.05) + geom_point() +
theme_bw() + theme(legend.position = "bottom", panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) + ylab("")
# load the results and specifier objects
sim_result_dir <- paste0(.get_config_path("LOCAL_GLMEIV_DATA_DIR"), "public/simulations/results")
sim_res_1 <- readRDS(paste0(sim_result_dir, "/sim_res_5.rds"))[["metrics"]]
source(paste0(.get_config_path("LOCAL_CODE_DIR"), "glmeiv-manuscript/R_scripts/plotting/simulation_plots/shared_plotting_code.R"))
head(sim_res_1)
sim_res_1
to_plot <- sim_res_1|> transform_metric_df() |>
mutate(exp_g_perturbation = exp(g_perturbation))
p <- ggplot(data = to_plot, mapping = aes(x = exp_g_perturbation,
y = mean,
ymin = mean - 2 * se,
ymax = mean + 2 * se,
col = Method)) +
xlab(expression(exp(beta[g]))) + scale_color_manual(values = my_cols) +
facet_grid(metric_fct ~ fam_str, scales = "free") +
geom_hline(data = dplyr::filter(to_plot, metric_fct == "Bias"),
mapping = aes(yintercept = 0), colour = "black") +
geom_hline(data = dplyr::filter(to_plot, metric_fct == "MSE"),
mapping = aes(yintercept = 0), colour = "black") +
geom_hline(data = dplyr::filter(to_plot, metric_fct == "Coverage"),
mapping = aes(yintercept = 0.95), colour = "black") +
geom_line() + geom_errorbar(width = 0.05) + geom_point() +
theme_bw() + theme(legend.position = "bottom", panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) + ylab("")
p
log(seq(1, 0.25, 0.25))
log(seq(1, 0.25, by = 0.25))
seq(1, 0.25, 0.25)
seq(1, 0.25, by = 0.25)
seq(1, 0.25, by = -0.25)
set.seed(4)
m_perturbation <- log(0.25)
theta <- 20
n <- 50000
g_perturbation_grid <- log(seq(1, 4, 0.5))
m_perturbation_grid <- log(seq(1, 0.25, by = -0.25))
g_perturbation_grid
m_perturbation_grid
set.seed(4)
m_perturbation <- log(0.25)
theta <- 20
n <- 50000
g_perturbation_grid <- log(seq(1, 4, 0.5))
m_perturbation_grid <- log(seq(1, 0.25, by = -0.25))
set.seed(4)
m_perturbation <- log(0.25)
theta <- 20
n <- 50000
g_perturbation_grid <- log(seq(1, 4, 0.5))
m_perturbation_grid <- log(seq(1, 0.25, by = -0.25))
param_grid <- expand.grid(g_perturbation = g_perturbation_grid,
m_perturbation = m_perturbation_grid)
param_grid$grid_id <- seq(1, nrow(param_grid))
param_grid$ground_truth <- m_perturbation
m_perturbation <- log(0.25)
theta <- 20
n <- 50000
g_perturbation_grid <- log(seq(1, 4, 0.5))
m_perturbation_grid <- log(seq(1, 0.25, by = -0.25))
param_grid
###########################################################################################
# Experiment 5: misspecified gRNA model
# We vary g_pert, keeping all other parameters fixed; the gRNA distribution is misspecified
# due to missing covariate and duplets
###########################################################################################
set.seed(4)
###########################################################################################
# Experiment 5: misspecified gRNA model
# We vary g_pert, keeping all other parameters fixed; the gRNA distribution is misspecified
# due to missing covariate and duplets
###########################################################################################
set.seed(4)
theta <- 20
n <- 50000
g_perturbation_grid <- log(seq(1, 4, 0.5))
m_perturbation_grid <- log(seq(1, 0.25, by = -0.25))
param_grid <- expand.grid(g_perturbation = g_perturbation_grid,
m_perturbation = m_perturbation_grid)
param_grid$grid_id <- seq(1, nrow(param_grid))
param_grid$ground_truth <- m_perturbation
param_grid$ground_truth <- param_grid$m_perturbation
###########################################################################################
# Experiment 5: misspecified gRNA model
# We vary g_pert, keeping all other parameters fixed; the gRNA distribution is misspecified
# due to missing covariate and duplets
###########################################################################################
set.seed(4)
theta <- 20
n <- 50000
g_perturbation_grid <- log(seq(1, 4, 0.5))
m_perturbation_grid <- log(seq(1, 0.25, by = -0.25))
g_perturbation_grid
m_perturbation_grid
param_grid <- expand.grid(g_perturbation = g_perturbation_grid,
m_perturbation = m_perturbation_grid)
param_grid
param_grid$grid_id <- seq(1, nrow(param_grid))
param_grid$ground_truth <- param_grid$m_perturbation
param_grid
set.seed(4)
theta <- 20
n <- 50000
g_perturbation_grid <- log(seq(1, 4, 0.5))
m_perturbation_grid <- log(seq(1, 0.25, by = -0.25))
param_grid <- expand.grid(g_perturbation = g_perturbation_grid,
m_perturbation = m_perturbation_grid)
param_grid$grid_id <- seq(1, nrow(param_grid))
param_grid$ground_truth <- param_grid$m_perturbation
fixed_params <- list(
g_fam = poisson() |> augment_family_object(),
m_fam = MASS::negative.binomial(20) |> augment_family_object(),
run_grna_unknown_theta_precomputation = FALSE,
run_mrna_unknown_theta_precomputation = FALSE,
seed = 4,
n = n,
B = 500,
m_intercept = log(0.01),
g_intercept = log(0.005),
covariate_matrix = data.frame(batch = rbinom(n = n, size = 1, prob = 0.5),
cell_cycle = runif(n = n, min = 0, max = 1)),
grna_duplet_rate = 0.01,
mrna_duplet_rate = 0.0,
rm_covariate = "cell_cycle",
m_covariate_coefs = log(c(0.9, 1)),
g_covariate_coefs = log(c(0.8, 1.25)),
alpha = 0.95,
n_em_rep = 15,
save_membership_probs_mult = 1000L,
pi = 0.02,
m_offset = log(rpois(n = n, lambda = 10000)),
g_offset = log(rpois(n = n, lambda = 5000)),
pi_guess_range = c(1e-5, 0.03),
m_perturbation_guess_range = log(c(0.1, 1.5)),
g_perturbation_guess_range = log(c(0.5, 10)),
m_intercept_guess_range = log(c(1e-4, 1e-1)),
g_intercept_guess_range = log(c(1e-4, 1e-1)),
m_covariate_coefs_guess_range = log(c(0.25, 2)),
g_covariate_coefs_guess_range = log(c(0.25, 2)),
exponentiate_coefs = FALSE,
ep_tol = 1e-4)
library(magrittr)
library(glmeiv)
library(simulatr)
print("Running create sim_spec objects")
args <- commandArgs(trailingOnly = TRUE)
overwrite <- TRUE # if (is.na(args[1])) TRUE else as.logical(args[1])
save_obj <- function(obj, file_path, overwrite) {
if (!file.exists(file_path)) { # if file does not exist, save
saveRDS(obj, file_path)
} else { # if file does exist, save only if overwrite true
if (overwrite) {
saveRDS(obj, file_path)
}
}
}
sim_dir <- paste0(.get_config_path("LOCAL_GLMEIV_DATA_DIR"), "public/simulations/spec_objects")
library(SeuratData)
SeuratData::AvailableData()
x <- SeuratData::LoadData("ifnb.SeuratData")
class(x)
x@assays$RNA@counts |> class()
x@assays$RNA@counts
